{
  "pipes": [
    {
      "name": "GroupByPipe",
      "id": "pipe-GroupByPipe-ca4c91b7db47f3733fd5412f17a47bf7",
      "file": "libs/designsystem/src/lib/components/list/pipes/group-by.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "getGroupName",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "item",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "any[]",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "getGroupName",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "item",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "groupBy",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'groupBy',\n})\nexport class GroupByPipe implements PipeTransform {\n  transform(items: any[], getGroupName?: (item: any) => string): any[] {\n    if (!items) {\n      return null;\n    }\n    if (!getGroupName) {\n      return items;\n    }\n\n    const groupsMap = new Map<string, any[]>();\n\n    items.forEach((item: any) => {\n      const itemGroup = getGroupName(item);\n      const groupItems = groupsMap.get(itemGroup);\n\n      if (groupItems) {\n        groupItems.push(item);\n      } else {\n        groupsMap.set(itemGroup, [item]);\n      }\n    });\n\n    return Array.from(groupsMap)\n      .sort(([name], [otherName]) => name.localeCompare(otherName))\n      .map(([name, items]) => {\n        return { name, items };\n      });\n  }\n}\n"
    }
  ],
  "interfaces": [
    {
      "name": "ActionSheetConfig",
      "id": "interface-ActionSheetConfig-1f76ab102b46b93a9531cc9367aa4f76",
      "file": "libs/designsystem/src/lib/components/modal/action-sheet/config/action-sheet-config.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ActionSheetItem } from './action-sheet-item';\n\nexport interface ActionSheetConfig {\n  header?: string;\n  subheader?: string;\n  items: Array<ActionSheetItem>;\n  cancelButtonText?: string;\n}\n",
      "properties": [
        {
          "name": "cancelButtonText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "header",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<ActionSheetItem>",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "subheader",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ActionSheetItem",
      "id": "interface-ActionSheetItem-63413828ab3234b72f387d8bda7ca478",
      "file": "libs/designsystem/src/lib/components/modal/action-sheet/config/action-sheet-item.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ActionSheetItem {\n  id: string;\n  text: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "AlertConfig",
      "id": "interface-AlertConfig-120fb3cbc6f49e68cb1a16ee37535387",
      "file": "libs/designsystem/src/lib/components/modal/alert/config/alert-config.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Observable } from 'rxjs';\n\nexport interface AlertConfig {\n  title: string | Observable<string>;\n  message?: string | Observable<string>;\n\n  /**\n   * @deprecated Will be deprecated in next major version. Use `okBtn` instead.\n   */\n  okBtnText?: string;\n\n  /**\n   * @deprecated Will be deprecated in next major version. Use `cancelBtn` instead.\n   */\n  cancelBtnText?: string;\n\n  cancelBtn?: string;\n\n  icon?: {\n    name: string;\n    themeColor?: string;\n  };\n\n  okBtn?:\n    | string\n    | {\n        text: string;\n        isDestructive: boolean;\n      };\n}\n",
      "properties": [
        {
          "name": "cancelBtn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "cancelBtnText",
          "deprecated": true,
          "deprecationMessage": "Will be deprecated in next major version. Use `cancelBtn` instead.",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 15,
          "rawdescription": "\n\n",
          "jsdoctags": [
            {
              "pos": 273,
              "end": 355,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 326,
              "tagName": {
                "pos": 274,
                "end": 284,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": "<p>Will be deprecated in next major version. Use <code>cancelBtn</code> instead.</p>\n"
            }
          ]
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 19
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | Observable<string>",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "okBtn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | literal type",
          "optional": true,
          "description": "",
          "line": 24
        },
        {
          "name": "okBtnText",
          "deprecated": true,
          "deprecationMessage": "Will be deprecated in next major version. Use `okBtn` instead.",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10,
          "rawdescription": "\n\n",
          "jsdoctags": [
            {
              "pos": 158,
              "end": 236,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 326,
              "tagName": {
                "pos": 159,
                "end": 169,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": "<p>Will be deprecated in next major version. Use <code>okBtn</code> instead.</p>\n"
            }
          ]
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | Observable<string>",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "CalendarCell",
      "id": "interface-CalendarCell-830fff3d315f253adce2d8ade37b3c75",
      "file": "libs/designsystem/src/lib/components/calendar/helpers/calendar-cell.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface CalendarCell {\n  date: number;\n  isCurrentMonth: boolean;\n  isSelectable: boolean;\n  isSelected: boolean;\n  cssClasses: string;\n}\n",
      "properties": [
        {
          "name": "cssClasses",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "isCurrentMonth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isSelectable",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "CalendarDay",
      "id": "interface-CalendarDay-0404f45d49279e72125481c3a349fb95",
      "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport {\n  add,\n  differenceInDays,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  getYear,\n  isAfter,\n  isBefore,\n  isSameDay,\n  isSameMonth,\n  isWeekend,\n  Locale as LocaleDateFns,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n} from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { da, enGB, enUS } from 'date-fns/locale';\n\nimport { capitalizeFirstLetter } from '@kirbydesign/core';\n\nimport { CalendarCell } from './helpers/calendar-cell.model';\nimport { CalendarOptions } from './helpers/calendar-options.model';\nimport { CalendarHelper } from './helpers/calendar.helper';\nimport { CalendarYearNavigatorConfig } from './options/calendar-year-navigator-config';\n\nexport type Locale = LocaleDateFns;\ninterface CalendarDay {\n  isCurrentMonth: boolean;\n  isToday: boolean;\n  isWeekend: boolean;\n  isPast: boolean;\n  isFuture: boolean;\n  isDisabled: boolean;\n}\n\nenum TimeUnit {\n  years = 'years',\n  months = 'months',\n  weeks = 'weeks',\n  days = 'days',\n  hours = 'hours',\n  minutes = 'minutes',\n  seconds = 'seconds',\n  milliseconds = 'milliseconds',\n}\n\n@Component({\n  selector: 'kirby-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n  providers: [CalendarHelper],\n})\nexport class CalendarComponent implements OnInit, AfterViewInit, OnChanges {\n  @ViewChild('calendarContainer', { static: false }) calendarContainer: ElementRef;\n  @Output() dateChange = new EventEmitter<Date>();\n  @Output() dateSelect = new EventEmitter<Date>();\n  @Output() yearSelect = new EventEmitter<number>();\n  @Input() timezone: 'local' | 'UTC' = 'local';\n  @Input() disableWeekends = false;\n  @Input() disablePastDates = false;\n  @Input() disableFutureDates = false;\n  @Input() alwaysEnableToday = false;\n  @Input() customLocales: { [key: string]: Locale } = {};\n  /**\n   * Configuration for the year navigator.\n   *\n   * Internally, calendar component:\n   * - bases yearNavigatorOptions.from and yearNavigatorOptions.to on todayDate if a number is provided\n   * - prioritizes minDate and maxDate over yearNavigatorOptions.from and yearNavigatorOptions.to\n   */\n  @Input() yearNavigatorOptions: CalendarYearNavigatorConfig;\n\n  _month: CalendarCell[][];\n  _weekDays: string[];\n  private selectedDay: CalendarCell;\n  // NOTE: Internally, all Dates\n  // are normalized to point to local timezone midnight, regardless of the timezone\n  // setting.\n  private activeMonth: Date;\n  private _selectedDate: Date;\n  private _disabledDates: Date[] = [];\n  private _todayDate: Date;\n  private _minDate: Date;\n  private _maxDate: Date;\n  private locale: Locale;\n  private timeZoneName: string;\n  private includedLocales = { da, enGB, enUS };\n\n  get selectedDate(): Date {\n    return this._selectedDate;\n  }\n\n  @Input() set selectedDate(valueLocalOrUTC: Date) {\n    const value = this.normalizeDate(valueLocalOrUTC);\n    this.setActiveMonth(value);\n\n    if (this.hasDateChanged(value, this._selectedDate)) {\n      this.onSelectedDateChange(value);\n      this._selectedDate = value;\n    }\n  }\n\n  get disabledDates(): Date[] {\n    return this._disabledDates;\n  }\n\n  @Input() set disabledDates(value: Date[]) {\n    this._disabledDates = (value || []).map((date) => this.normalizeDate(date));\n  }\n\n  get todayDate(): Date {\n    return this._todayDate;\n  }\n\n  @Input() set todayDate(value: Date) {\n    this._todayDate = this.normalizeDate(value);\n  }\n\n  get minDate(): Date {\n    return this._minDate;\n  }\n\n  @Input() set minDate(value: Date) {\n    if (value && this.activeMonth && isBefore(this.activeMonth, value)) {\n      this.setActiveMonth(value);\n    }\n    this._minDate = this.normalizeDate(value);\n  }\n\n  get maxDate(): Date {\n    return this._maxDate;\n  }\n\n  @Input() set maxDate(value: Date) {\n    if (value && this.activeMonth && isAfter(this.activeMonth, value)) {\n      this.setActiveMonth(value);\n    }\n    this._maxDate = this.normalizeDate(value);\n  }\n\n  get activeMonthName(): string {\n    return capitalizeFirstLetter(this.formatWithLocale(this.activeMonth, 'MMMM'));\n  }\n\n  get activeYear(): string {\n    return this.formatWithLocale(this.activeMonth, 'yyyy');\n  }\n\n  /**\n   * Gets navigable years for year navigator based on yearNavigatorOptions.\n   */\n  get navigableYears(): string[] {\n    const dateOfFirstNavigableYear =\n      this.minDate || this.getDateFromNavigableYear(this.yearNavigatorOptions.from);\n\n    const dateOfLastNavigableYear =\n      this.maxDate || this.getDateFromNavigableYear(this.yearNavigatorOptions.to);\n\n    return this.getYearsBetweenDates(dateOfFirstNavigableYear, dateOfLastNavigableYear);\n  }\n\n  get navigatedYear(): number {\n    return this.navigableYears.indexOf(this.activeYear);\n  }\n\n  @HostBinding('class.has-year-navigator')\n  get _hasYearNavigator() {\n    return !!this.yearNavigatorOptions;\n  }\n\n  constructor(private calendarHelper: CalendarHelper, @Inject(LOCALE_ID) locale: string) {\n    this.locale = this.mapLocale(locale);\n    this.timeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  private formatWithLocale(date: Date, formatString: string): string {\n    return format(date, formatString, {\n      locale: this.locale,\n    });\n  }\n\n  private mapLocale(locale: string): Locale {\n    if (locale === 'en') {\n      locale = 'enGB'; // if english locale is provided without region, we default to GB\n    }\n    locale = locale.replace('-', '');\n    const availableLocales = { ...this.includedLocales, ...this.customLocales };\n\n    return availableLocales[locale] || this.includedLocales.enGB; // Default to enGB if injected locale doesnt exist\n  }\n\n  ngOnInit() {\n    this._weekDays = this.getWeekDays();\n    this.setActiveMonth(this.selectedDate);\n  }\n\n  ngAfterViewInit() {\n    this.calendarHelper.init(\n      this.calendarContainer,\n      this.getHelperOptions(),\n      this._onDateSelected.bind(this),\n      this.onChangeMonth.bind(this)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.activeMonth) return;\n    if (\n      changes.disableWeekends ||\n      changes.disablePastDates ||\n      changes.disableFutureDates ||\n      changes.disabledDates ||\n      changes.minDate ||\n      changes.maxDate ||\n      changes.todayDate ||\n      changes.timezone\n    ) {\n      this.refreshActiveMonth();\n      this.calendarHelper.update(this.getHelperOptions());\n    }\n  }\n\n  private setActiveMonth(date: Date = new Date()) {\n    if (!this.activeMonth || !isSameMonth(this.activeMonth, date)) {\n      this.activeMonth = startOfMonth(date);\n      this.refreshActiveMonth();\n      this.calendarHelper.update(this.getHelperOptions());\n    }\n  }\n\n  // For leniency, the component will accept any Date that points to either UTC midnight\n  // or to local timezone midnight although we will internally normalize the representation\n  // of all received dates to point to local timezone midnight.\n  // We currently log no warnings if the date doesn't match the timezone setting or\n  // if it doesn't point to midnight.\n  private normalizeDate(dateLocalOrUTC: Date) {\n    if (!dateLocalOrUTC) return;\n\n    if (startOfDay(dateLocalOrUTC).getTime() === dateLocalOrUTC.getTime()) {\n      // date is local timezone midnight\n      return dateLocalOrUTC;\n    }\n    if (\n      startOfDay(utcToZonedTime(dateLocalOrUTC, this.timeZoneName)).getTime() ===\n      utcToZonedTime(dateLocalOrUTC, this.timeZoneName).getTime()\n    ) {\n      // the date is a UTC midnight; create the equivalent local timezone midnight date\n      const normalizedUTCdate = utcToZonedTime(dateLocalOrUTC, this.timeZoneName);\n      return normalizedUTCdate;\n    }\n    // does not point to midnight so we make it\n    return startOfDay(dateLocalOrUTC);\n  }\n\n  private getWeekDays(): string[] {\n    const now = new Date();\n\n    const week = eachDayOfInterval({\n      start: startOfWeek(now, { locale: this.locale }),\n      end: endOfWeek(now, { locale: this.locale }),\n    });\n\n    return week.map((date) => this.getFirstLetterOfWeekDayCapitalized(date));\n  }\n\n  private getFirstLetterOfWeekDayCapitalized(date: Date) {\n    return this.formatWithLocale(date, 'EEEEE');\n  }\n\n  private hasDateChanged(newDate: Date, previousDate: Date): boolean {\n    if (!newDate && !previousDate) {\n      return false;\n    }\n    if (newDate instanceof Date && !previousDate) {\n      return true;\n    }\n    return !isSameDay(newDate, previousDate);\n  }\n\n  private isDisabledDate(date: Date): boolean {\n    return this.disabledDates.some((disabledDate) => {\n      return isSameDay(disabledDate, date);\n    });\n  }\n\n  refreshActiveMonth() {\n    if (!this.activeMonth) return;\n\n    const monthStart = startOfMonth(this.activeMonth);\n    const monthEnd = endOfMonth(this.activeMonth);\n    const startOfFirstWeek = startOfWeek(monthStart, { locale: this.locale });\n    const endOfLastWeek = endOfWeek(monthEnd, { locale: this.locale });\n    const totalDayCount = differenceInDays(endOfLastWeek, startOfFirstWeek) + 1;\n    const today = this.todayDate ? startOfDay(this.todayDate) : startOfDay(new Date());\n\n    const daysArray = Array.from(Array(totalDayCount).keys());\n\n    const days: CalendarCell[] = daysArray.map((number) => {\n      const cellDate = add(startOfFirstWeek, { [TimeUnit.days]: number });\n      const day = this.getCalendarDay(cellDate, today, monthStart);\n\n      const isSelectable = this.isSelectable(day, cellDate);\n      const isSelected = isSameDay(this.selectedDate, cellDate);\n      const cell = {\n        date: cellDate.getDate(),\n        isCurrentMonth: day.isCurrentMonth,\n        isSelectable,\n        isSelected,\n        cssClasses: this.getCssClasses(day, isSelectable, isSelected),\n      };\n      if (isSelected) {\n        this.selectedDay = cell;\n      }\n      return cell;\n    });\n    this._month = this.chunk(days, 7);\n  }\n\n  private getCalendarDay(date: Date, today: Date, monthStart: Date): CalendarDay {\n    return {\n      isToday: isSameDay(today, date),\n      isPast: isBefore(date, today),\n      isFuture: isAfter(date, today),\n      isWeekend: isWeekend(date),\n      isCurrentMonth: isSameMonth(date, monthStart),\n      isDisabled: this.isDisabledDate(date),\n    };\n  }\n\n  private isSelectable(day: CalendarDay, date: Date) {\n    return (\n      (this.alwaysEnableToday && day.isToday) ||\n      (!day.isDisabled &&\n        day.isCurrentMonth &&\n        !(this.disableWeekends && day.isWeekend) &&\n        !(this.disablePastDates && day.isPast) &&\n        !(this.disableFutureDates && day.isFuture) &&\n        !(this.minDate && isBefore(date, this.minDate)) &&\n        !(this.maxDate && isAfter(date, this.maxDate)))\n    );\n  }\n\n  private getCssClasses(day: CalendarDay, isSelectable: boolean, isSelected: boolean) {\n    const cssClasses = {\n      'current-month': day.isCurrentMonth,\n      weekend: day.isWeekend,\n      today: day.isToday,\n      selectable: isSelectable,\n      selected: isSelected,\n      past: day.isPast,\n      disabled: day.isDisabled,\n    };\n    let cssClassString = 'day';\n    for (const key in cssClasses) {\n      if (cssClasses[key]) {\n        cssClassString += ' ' + key;\n      }\n    }\n    return cssClassString;\n  }\n\n  private chunk(array: any[], size: number) {\n    const results = [];\n    while (array.length) {\n      results.push(array.splice(0, size));\n    }\n    return results;\n  }\n\n  private onSelectedDateChange(newDate: Date): void {\n    if (this.selectedDay) {\n      this.selectedDay.isSelected = false;\n    }\n\n    const newDay = this.getCell(newDate);\n    if (newDay) {\n      newDay.isSelected = true;\n      this.selectedDay = newDay;\n    }\n    this.calendarHelper.setSelectedDay(newDate.getDate());\n  }\n\n  _onDateSelected(newDay: CalendarCell) {\n    if (newDay.isSelectable && newDay.date) {\n      let newDate = new Date(this.activeMonth);\n\n      if (this.timezone === 'UTC') {\n        newDate = zonedTimeToUtc(this.subtractTimezoneOffset(newDate), this.timeZoneName);\n      }\n\n      newDate.setDate(newDay.date);\n      const dateToEmit = newDate;\n\n      if (this.hasDateChanged(newDate, this._selectedDate)) {\n        this.onSelectedDateChange(newDate);\n        this._selectedDate = newDate;\n        this.dateChange.emit(dateToEmit);\n      }\n      this.dateSelect.emit(dateToEmit);\n    }\n  }\n\n  private onChangeMonth(direction: number) {\n    this._changeMonth(direction);\n    this.calendarHelper.update(this.getHelperOptions());\n  }\n\n  _changeMonth(index: number) {\n    this.changeActiveView(index, TimeUnit.months);\n  }\n\n  _changeYear(year: string) {\n    const yearNumeric = Number(year);\n    this.changeActiveView(yearNumeric - getYear(this.activeMonth), TimeUnit.years);\n    this.yearSelect.emit(yearNumeric);\n  }\n\n  private changeActiveView(index: number, unit: TimeUnit) {\n    if (index === 0) return;\n    this.activeMonth = add(this.activeMonth, { [unit]: index });\n\n    this.refreshActiveMonth();\n  }\n\n  get _canNavigateBack(): boolean {\n    const reachedPastDatesLimit =\n      this.disablePastDates && isSameMonth(this.activeMonth, this.todayDate);\n\n    const reachedOrExceededMinDate =\n      this.minDate &&\n      (isSameMonth(this.activeMonth, this.minDate) || isBefore(this.activeMonth, this.minDate));\n\n    return !reachedPastDatesLimit && !reachedOrExceededMinDate;\n  }\n\n  get _canNavigateForward(): boolean {\n    const reachedFutureDatesLimit =\n      this.disableFutureDates && isSameMonth(this.activeMonth, this.todayDate);\n\n    const reachedOrExceededMaxDate =\n      this.maxDate &&\n      (isSameMonth(this.activeMonth, this.maxDate) || isAfter(this.activeMonth, this.maxDate));\n\n    return !reachedFutureDatesLimit && !reachedOrExceededMaxDate;\n  }\n\n  private getCell(date: Date) {\n    let foundDay = null;\n    if (date) {\n      for (let week of this._month) {\n        foundDay = week.find((day) => {\n          return day.isCurrentMonth && day.date === date.getDate();\n        });\n        if (foundDay) {\n          break;\n        }\n      }\n    }\n    return foundDay;\n  }\n\n  private getHelperOptions(): CalendarOptions {\n    return {\n      canNavigateBack: this._canNavigateBack,\n      canNavigateForward: this._canNavigateForward,\n      year: this.activeYear,\n      monthName: this.activeMonthName,\n      weekDays: this._weekDays,\n      month: this._month,\n    };\n  }\n\n  private subtractTimezoneOffset(date: Date): Date {\n    const timezoneOffsetInMs = date.getTimezoneOffset() * 60 * 1000;\n    return new Date(date.getTime() - timezoneOffsetInMs);\n  }\n\n  private getDateFromNavigableYear(navigableYear: number | Date): Date {\n    if (navigableYear instanceof Date) return navigableYear;\n    const today = this.todayDate || new Date();\n    return new Date(today.getFullYear() + navigableYear, 0, 1);\n  }\n\n  private getYearsBetweenDates(startDate: Date, endDate: Date): string[] {\n    // Ensure years are ordered correctly if parameters are switched:\n    const [startYear, endYear] = [startDate.getFullYear(), endDate.getFullYear()].sort();\n    const numberOfYears = endYear - startYear;\n    return Array.from({ length: numberOfYears + 1 }, (_, i) => (startYear + i).toString());\n  }\n}\n",
      "properties": [
        {
          "name": "isCurrentMonth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "isDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "isFuture",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "isPast",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "isToday",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "isWeekend",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 48
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "CalendarOptions",
      "id": "interface-CalendarOptions-691928ea7137020ad96eed176479e35b",
      "file": "libs/designsystem/src/lib/components/calendar/helpers/calendar-options.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CalendarCell } from './calendar-cell.model';\n\nexport interface CalendarOptions {\n  canNavigateBack: boolean;\n  canNavigateForward: boolean;\n  year: string;\n  monthName: string;\n  weekDays: string[];\n  month: CalendarCell[][];\n}\n",
      "properties": [
        {
          "name": "canNavigateBack",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "canNavigateForward",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "month",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CalendarCell[][]",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "monthName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "weekDays",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "year",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ComponentConfiguration",
      "id": "interface-ComponentConfiguration-416cf8298f934ba49f7a67073725b9de",
      "file": "libs/designsystem/src/lib/components/shared/component-configuration.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Type } from '@angular/core';\n\nexport interface ComponentConfiguration {\n  component: Type<any>;\n  data: any;\n}\n",
      "properties": [
        {
          "name": "component",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Type<any>",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "DynamicComponent",
      "id": "interface-DynamicComponent-11fcfbc86e806bfbdef0d83e3671c918",
      "file": "libs/designsystem/src/lib/components/shared/dynamic-component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface DynamicComponent {\n  data: any;\n}\n",
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "FitHeadingConfig",
      "id": "interface-FitHeadingConfig-0fb0296abff27f0ba8933045dbc8dae2",
      "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\nimport { DesignTokenHelper } from '@kirbydesign/core';\n\nimport { ResizeObserverService } from '../../components/shared/resize-observer/resize-observer.service';\nimport { LineClampHelper } from '../../helpers/line-clamp-helper';\n\nconst fontSize = DesignTokenHelper.fontSize;\nconst lineHeight = DesignTokenHelper.lineHeight;\n\ninterface HeadingSize {\n  name: string;\n  fontSize: string;\n  lineHeight: string;\n}\n\nexport interface FitHeadingConfig {\n  maxLines: number;\n}\n\n@Directive({\n  selector: `h1[kirbyFitHeading],h2[kirbyFitHeading],h3[kirbyFitHeading]`,\n  providers: [LineClampHelper],\n})\nexport class FitHeadingDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyFitHeading') config?: FitHeadingConfig;\n\n  private isObservingHostElement: boolean;\n  private hostElementClone: Element;\n  private isScalingHeader: boolean; // used to prevent resizeObserver to trigger on font scaling by this.scaleHeader()\n\n  private headingSizes: HeadingSize[] = [\n    {\n      name: 'h1',\n      fontSize: fontSize('xl'),\n      lineHeight: lineHeight('xl'),\n    },\n    {\n      name: 'h2',\n      fontSize: fontSize('l'),\n      lineHeight: lineHeight('l'),\n    },\n    {\n      name: 'h3',\n      fontSize: fontSize('m'),\n      lineHeight: lineHeight('m'),\n    },\n  ];\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private resizeObserverService: ResizeObserverService,\n    private lineClampHelper: LineClampHelper\n  ) {}\n\n  ngOnInit(): void {\n    if (this.config && this.config.maxLines) {\n      this.lineClampHelper.setMaxLines(this.elementRef.nativeElement, this.config.maxLines);\n      this.observeResize();\n      this.isObservingHostElement = true;\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.isObservingHostElement) {\n      this.resizeObserverService.unobserve(this.elementRef);\n      if (this.hostElementClone) {\n        this.renderer.removeChild(this.elementRef.nativeElement, this.hostElementClone);\n      }\n    }\n  }\n\n  private observeResize(): void {\n    this.resizeObserverService.observe(this.elementRef, () => {\n      this.scaleHeader();\n    });\n  }\n\n  private scaleHeader(): void {\n    if (this.isScalingHeader) return;\n\n    this.isScalingHeader = true;\n\n    if (!this.hostElementClone) {\n      this.hostElementClone = this.generateHostElementClone();\n      this.renderer.appendChild(this.elementRef.nativeElement, this.hostElementClone);\n    }\n\n    this.renderer.setStyle(\n      this.hostElementClone,\n      'width',\n      `${this.elementRef.nativeElement.clientWidth}px`\n    );\n\n    const fallbackSize = this.headingSizes[this.headingSizes.length - 1];\n    const fittedSize = this.headingSizes.find(this.canFitHeading.bind(this)) || fallbackSize;\n\n    this.setSize(this.elementRef.nativeElement, fittedSize);\n    this.lineClampHelper.setLineHeight(this.elementRef.nativeElement, fittedSize.lineHeight);\n    this.isScalingHeader = false;\n  }\n\n  private canFitHeading(size: HeadingSize) {\n    this.setSize(this.hostElementClone, size);\n    const lines = this.hostElementClone.clientHeight / parseInt(size.lineHeight);\n    return lines <= this.config.maxLines;\n  }\n\n  private generateHostElementClone(): Element {\n    const clone = this.elementRef.nativeElement.cloneNode(true);\n    this.renderer.setStyle(clone, 'position', 'absolute');\n    this.renderer.setStyle(clone, 'visibility', 'hidden');\n    this.lineClampHelper.removeLineClamp(clone);\n    return clone;\n  }\n\n  private setSize(el: Element, size: HeadingSize): void {\n    this.renderer.setStyle(el, 'font-size', size.fontSize);\n    this.renderer.setStyle(el, 'line-height', size.lineHeight);\n  }\n}\n",
      "properties": [
        {
          "name": "maxLines",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "HeadingSize",
      "id": "interface-HeadingSize-0fb0296abff27f0ba8933045dbc8dae2",
      "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\nimport { DesignTokenHelper } from '@kirbydesign/core';\n\nimport { ResizeObserverService } from '../../components/shared/resize-observer/resize-observer.service';\nimport { LineClampHelper } from '../../helpers/line-clamp-helper';\n\nconst fontSize = DesignTokenHelper.fontSize;\nconst lineHeight = DesignTokenHelper.lineHeight;\n\ninterface HeadingSize {\n  name: string;\n  fontSize: string;\n  lineHeight: string;\n}\n\nexport interface FitHeadingConfig {\n  maxLines: number;\n}\n\n@Directive({\n  selector: `h1[kirbyFitHeading],h2[kirbyFitHeading],h3[kirbyFitHeading]`,\n  providers: [LineClampHelper],\n})\nexport class FitHeadingDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyFitHeading') config?: FitHeadingConfig;\n\n  private isObservingHostElement: boolean;\n  private hostElementClone: Element;\n  private isScalingHeader: boolean; // used to prevent resizeObserver to trigger on font scaling by this.scaleHeader()\n\n  private headingSizes: HeadingSize[] = [\n    {\n      name: 'h1',\n      fontSize: fontSize('xl'),\n      lineHeight: lineHeight('xl'),\n    },\n    {\n      name: 'h2',\n      fontSize: fontSize('l'),\n      lineHeight: lineHeight('l'),\n    },\n    {\n      name: 'h3',\n      fontSize: fontSize('m'),\n      lineHeight: lineHeight('m'),\n    },\n  ];\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private resizeObserverService: ResizeObserverService,\n    private lineClampHelper: LineClampHelper\n  ) {}\n\n  ngOnInit(): void {\n    if (this.config && this.config.maxLines) {\n      this.lineClampHelper.setMaxLines(this.elementRef.nativeElement, this.config.maxLines);\n      this.observeResize();\n      this.isObservingHostElement = true;\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.isObservingHostElement) {\n      this.resizeObserverService.unobserve(this.elementRef);\n      if (this.hostElementClone) {\n        this.renderer.removeChild(this.elementRef.nativeElement, this.hostElementClone);\n      }\n    }\n  }\n\n  private observeResize(): void {\n    this.resizeObserverService.observe(this.elementRef, () => {\n      this.scaleHeader();\n    });\n  }\n\n  private scaleHeader(): void {\n    if (this.isScalingHeader) return;\n\n    this.isScalingHeader = true;\n\n    if (!this.hostElementClone) {\n      this.hostElementClone = this.generateHostElementClone();\n      this.renderer.appendChild(this.elementRef.nativeElement, this.hostElementClone);\n    }\n\n    this.renderer.setStyle(\n      this.hostElementClone,\n      'width',\n      `${this.elementRef.nativeElement.clientWidth}px`\n    );\n\n    const fallbackSize = this.headingSizes[this.headingSizes.length - 1];\n    const fittedSize = this.headingSizes.find(this.canFitHeading.bind(this)) || fallbackSize;\n\n    this.setSize(this.elementRef.nativeElement, fittedSize);\n    this.lineClampHelper.setLineHeight(this.elementRef.nativeElement, fittedSize.lineHeight);\n    this.isScalingHeader = false;\n  }\n\n  private canFitHeading(size: HeadingSize) {\n    this.setSize(this.hostElementClone, size);\n    const lines = this.hostElementClone.clientHeight / parseInt(size.lineHeight);\n    return lines <= this.config.maxLines;\n  }\n\n  private generateHostElementClone(): Element {\n    const clone = this.elementRef.nativeElement.cloneNode(true);\n    this.renderer.setStyle(clone, 'position', 'absolute');\n    this.renderer.setStyle(clone, 'visibility', 'hidden');\n    this.lineClampHelper.removeLineClamp(clone);\n    return clone;\n  }\n\n  private setSize(el: Element, size: HeadingSize): void {\n    this.renderer.setStyle(el, 'font-size', size.fontSize);\n    this.renderer.setStyle(el, 'line-height', size.lineHeight);\n  }\n}\n",
      "properties": [
        {
          "name": "fontSize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "lineHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "Icon",
      "id": "interface-Icon-22f0951b7db9f45198e83c1d38c2adcc",
      "file": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface Icon {\n  name: string;\n  svg?: string;\n}\n\nexport interface IconSettings {\n  icons: Icon[];\n}\n\nexport const ICON_SETTINGS = new InjectionToken<IconSettings>('IconSettings');\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "svg",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IconSettings",
      "id": "interface-IconSettings-22f0951b7db9f45198e83c1d38c2adcc",
      "file": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface Icon {\n  name: string;\n  svg?: string;\n}\n\nexport interface IconSettings {\n  icons: Icon[];\n}\n\nexport const ICON_SETTINGS = new InjectionToken<IconSettings>('IconSettings');\n",
      "properties": [
        {
          "name": "icons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Icon[]",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "InputMask",
      "id": "interface-InputMask-2d1701856ba8e8537a6d91eef4df6741",
      "file": "libs/designsystem/src/lib/components/form-field/directives/decimal-mask/decimal-mask.directive.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, LOCALE_ID, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport 'inputmask/lib/extensions/inputmask.numeric.extensions';\nimport Inputmask from 'inputmask/lib/inputmask';\n\ninterface InputMask {\n  unmaskedvalue: () => string;\n  setValue: (val: string) => void;\n}\n\n@Directive({\n  // tslint:disable-next-line\n  selector: '[kirby-decimal-mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: DecimalMaskDirective,\n    },\n  ],\n})\nexport class DecimalMaskDirective implements ControlValueAccessor, OnInit {\n  @Input() min: number;\n  @Input() max: number;\n  @Input() precision = 2;\n  @Input() setMaxOnOverflow = false;\n\n  @Input() set allowMinus(allowMinus: boolean) {\n    this._allowMinus = allowMinus || (this.min || 0) < 0;\n  }\n\n  @Input() set disableGroupSeperator(disabled: string) {\n    this._groupSeperatorDisabled = String(disabled) === '' || String(disabled) === 'true';\n  }\n\n  @Input() set maxlength(maxlength: number) {\n    this._maxlength = maxlength;\n\n    const maxlengthValue = parseInt('9'.repeat(maxlength));\n    this.max = this.getMax(maxlengthValue);\n    this.min = this.getMin(maxlengthValue);\n  }\n\n  groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.Group);\n  radixPoint = getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal);\n  inputmask: InputMask;\n\n  _allowMinus = false;\n  _maxlength: number;\n  _groupSeperatorDisabled: boolean;\n\n  onChange = (_: string) => {};\n\n  constructor(private elementRef: ElementRef, @Inject(LOCALE_ID) private locale: string) {}\n\n  ngOnInit(): void {\n    // Set type=\"text\", because functionality like 'setSelectionRange' are not supported on type=\"number\"\n    this.elementRef.nativeElement.setAttribute('type', 'text');\n\n    // Remove maxlength as this is handled by the mask\n    this.elementRef.nativeElement.removeAttribute('maxlength');\n\n    this.initMask();\n  }\n\n  writeValue(val: number): void {\n    if (!this.inputmask) return;\n    const formattedValue = String(val).replace('.', this.radixPoint);\n    this.inputmask.setValue(formattedValue);\n  }\n\n  registerOnChange(onChange: any): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(_: any): void {}\n\n  private initMask(): void {\n    new Inputmask('decimal', {\n      groupSeparator: this._groupSeperatorDisabled ? '' : this.groupSeparator,\n      radixPoint: this.radixPoint,\n      digits: this._maxlength ? 0 : this.precision,\n      min: this.min,\n      max: this.max,\n      allowMinus: this._allowMinus,\n      negationSymbol: {\n        front: getLocaleNumberSymbol(this.locale, NumberSymbol.MinusSign),\n        back: '',\n      },\n      SetMaxOnOverflow: this.setMaxOnOverflow,\n      showMaskOnFocus: false,\n      showMaskOnHover: false,\n      placeholder: '',\n      onBeforeWrite: () => {\n        if (!this.inputmask) return;\n        const unmaskedValue = this.inputmask.unmaskedvalue();\n        this.onChange(unmaskedValue.replace(this.radixPoint, '.'));\n      },\n    }).mask(this.elementRef.nativeElement);\n    this.inputmask = this.elementRef.nativeElement.inputmask;\n  }\n\n  private getMax(maxlengthValue: number): number {\n    return this.max === undefined ? maxlengthValue : Math.min(this.max, maxlengthValue);\n  }\n\n  private getMin(maxlengthValue: number): number {\n    if (!this.allowMinus) return;\n    maxlengthValue = -Math.abs(maxlengthValue);\n    return this.min === undefined ? maxlengthValue : -Math.abs(Math.max(this.min, maxlengthValue));\n  }\n}\n",
      "properties": [
        {
          "name": "setValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "unmaskedvalue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "KirbyConfig",
      "id": "interface-KirbyConfig-fa8f7236640bf146a2941d6f726d87bc",
      "file": "libs/designsystem/src/lib/kirby.module.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule, DOCUMENT } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { UiScrollModule } from 'ngx-ui-scroll';\n\nimport { customElementsInitializer } from './app-initialize';\nimport { AccordionItemComponent } from './components/accordion/accordion-item.component';\nimport { AccordionDirective } from './components/accordion/accordion.directive';\nimport { AppModule } from './components/app/app.module';\nimport { AvatarComponent } from './components/avatar/avatar.component';\nimport { ButtonComponent } from './components/button/button.component';\nimport { CalendarComponent } from './components/calendar/calendar.component';\nimport { CardFooterComponent } from './components/card/card-footer/card-footer.component';\nimport { CardHeaderComponent } from './components/card/card-header/card-header.component';\nimport { CardComponent } from './components/card/card.component';\nimport { ChartDeprecatedComponent } from './components/chart-deprecated/chart-deprecated.component';\nimport { ChartModule } from './components/chart/chart.module';\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\nimport { ChipComponent } from './components/chip/chip.component';\nimport { DividerComponent } from './components/divider/divider.component';\nimport { DropdownComponent } from './components/dropdown/dropdown.component';\nimport { EmptyStateComponent } from './components/empty-state/empty-state.component';\nimport { FabSheetComponent } from './components/fab-sheet/fab-sheet.component';\nimport { FlagComponent } from './components/flag/flag.component';\nimport { DateInputDirective } from './components/form-field/directives/date/date-input.directive';\nimport { DecimalMaskDirective } from './components/form-field/directives/decimal-mask/decimal-mask.directive';\nimport { FormFieldMessageComponent } from './components/form-field/form-field-message/form-field-message.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { InputCounterComponent } from './components/form-field/input-counter/input-counter.component';\nimport { InputComponent } from './components/form-field/input/input.component';\nimport { TextareaComponent } from './components/form-field/textarea/textarea.component';\nimport { BreakpointHelperService } from './components/grid/breakpoint-helper.service';\nimport { GridComponent } from './components/grid/grid.component';\nimport { IconModule } from './components/icon/icon.module';\nimport { ItemModule } from './components/item/item.module';\nimport { ListModule } from './components/list/list.module';\nimport { GroupByPipe } from './components/list/pipes/group-by.pipe';\nimport { LoadingOverlayComponent } from './components/loading-overlay/loading-overlay.component';\nimport { LoadingOverlayService } from './components/loading-overlay/loading-overlay.service';\nimport { ActionSheetComponent } from './components/modal/action-sheet/action-sheet.component';\nimport { AlertComponent } from './components/modal/alert/alert.component';\nimport { ModalFooterComponent } from './components/modal/footer/modal-footer.component';\nimport { ModalCompactWrapperComponent } from './components/modal/modal-wrapper/compact/modal-compact-wrapper.component';\nimport { ModalWrapperComponent } from './components/modal/modal-wrapper/modal-wrapper.component';\nimport { ActionSheetHelper } from './components/modal/services/action-sheet.helper';\nimport { AlertHelper } from './components/modal/services/alert.helper';\nimport { ModalController } from './components/modal/services/modal.controller';\nimport { ModalHelper } from './components/modal/services/modal.helper';\nimport { PageModule } from './components/page/page.module';\nimport { PopoverComponent } from './components/popover/popover.component';\nimport { ProgressCircleRingComponent } from './components/progress-circle/progress-circle-ring.component';\nimport { ProgressCircleComponent } from './components/progress-circle/progress-circle.component';\nimport { RadioGroupComponent } from './components/radio/radio-group/radio-group.component';\nimport { RadioComponent } from './components/radio/radio.component';\nimport { RangeComponent } from './components/range/range.component';\nimport { ReorderListComponent } from './components/reorder-list/reorder-list.component';\nimport { RouterOutletModule } from './components/router-outlet/router-outlet.module';\nimport { SegmentedControlComponent } from './components/segmented-control/segmented-control.component';\nimport { ComponentLoaderDirective } from './components/shared/component-loader.directive';\nimport { ResizeObserverFactory } from './components/shared/resize-observer/resize-observer.factory';\nimport { ResizeObserverService } from './components/shared/resize-observer/resize-observer.service';\nimport { SlideButtonComponent } from './components/slide-button/slide-button.component';\nimport { SlideDirective, SlidesComponent } from './components/slides/slides.component';\nimport { SpinnerModule } from './components/spinner/spinner.module';\nimport { StockChartDeprecatedComponent } from './components/stock-chart-deprecated/stock-chart-deprecated.component';\nimport { TabsModule } from './components/tabs/tabs.module';\nimport { ToastController } from './components/toast/services/toast.controller';\nimport { ToastHelper } from './components/toast/services/toast.helper';\nimport { ToggleButtonModule } from './components/toggle-button/toggle-button.module';\nimport { ToggleComponent } from './components/toggle/toggle.component';\nimport { KirbyBadge as BadgeComponent } from './components/web-component-proxies.component';\nimport { KeyHandlerDirective } from './directives/key-handler/key-handler.directive';\nimport { ModalRouterLinkDirective } from './directives/modal-router-link/modal-router-link.directive';\nimport { ThemeColorDirective } from './directives/theme-color/theme-color.directive';\n\nconst exportedDeclarations = [\n  CardComponent,\n  CardHeaderComponent,\n  CardFooterComponent,\n  ButtonComponent,\n  ChartDeprecatedComponent,\n  StockChartDeprecatedComponent,\n  GridComponent,\n  ComponentLoaderDirective,\n  AvatarComponent,\n  GroupByPipe,\n  CalendarComponent,\n  CheckboxComponent,\n  ActionSheetComponent,\n  ModalFooterComponent,\n  ModalRouterLinkDirective,\n  SegmentedControlComponent,\n  ChipComponent,\n  BadgeComponent,\n  ThemeColorDirective,\n  DateInputDirective,\n  DecimalMaskDirective,\n  SlideButtonComponent,\n  ToggleComponent,\n  EmptyStateComponent,\n  FormFieldComponent,\n  InputComponent,\n  InputCounterComponent,\n  TextareaComponent,\n  FabSheetComponent,\n  DividerComponent,\n  ReorderListComponent,\n  DropdownComponent,\n  LoadingOverlayComponent,\n  ProgressCircleComponent,\n  FlagComponent,\n  SlidesComponent,\n  SlideDirective,\n  AccordionDirective,\n  AccordionItemComponent,\n  RadioComponent,\n  RadioGroupComponent,\n  RangeComponent,\n];\n\nconst declarations = [\n  ...exportedDeclarations,\n  KeyHandlerDirective,\n  FormFieldMessageComponent,\n  AlertComponent,\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ProgressCircleRingComponent,\n  PopoverComponent,\n];\n\nconst exportedModules = [\n  AppModule,\n  RouterOutletModule,\n  PageModule,\n  TabsModule,\n  IconModule,\n  ItemModule,\n  ToggleButtonModule,\n  ListModule,\n  ChartModule,\n  SpinnerModule,\n];\n\nconst exports = [...exportedModules, ...exportedDeclarations];\n\nconst importedModules = [...exportedModules];\n\nconst providers = [\n  ModalController,\n  ActionSheetHelper,\n  ModalHelper,\n  AlertHelper,\n  ToastHelper,\n  ToastController,\n  BreakpointHelperService,\n  LoadingOverlayService,\n  ResizeObserverFactory,\n  ResizeObserverService,\n  customElementsInitializer(),\n];\n\nconst entryComponents = [\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ActionSheetComponent,\n  AlertComponent,\n];\n\nconst ConfigToken = new InjectionToken<any>('USERCONFIG');\nexport interface KirbyConfig {\n  moduleRootRoutePath?: string;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UiScrollModule,\n    IonicModule.forRoot({\n      mode: 'ios',\n      inputShims: true,\n      scrollAssist: true,\n      scrollPadding: false,\n    }),\n    ...importedModules,\n  ],\n  declarations: declarations,\n  providers: providers,\n  entryComponents: entryComponents,\n  exports: exports,\n})\nexport class KirbyModule {\n  static forChild(config?: KirbyConfig): ModuleWithProviders<KirbyModule> {\n    return {\n      ngModule: KirbyModule,\n      providers: [\n        {\n          provide: ConfigToken,\n          useValue: config,\n        },\n      ],\n    };\n  }\n\n  constructor(\n    modalController: ModalController,\n    @Optional() @Inject(ConfigToken) config?: KirbyConfig\n  ) {\n    modalController.initialize(config && config.moduleRootRoutePath);\n  }\n}\n",
      "properties": [
        {
          "name": "moduleRootRoutePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 180
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ListSwipeAction",
      "id": "interface-ListSwipeAction-9516800a5500d0844e1cb6310f3c647d",
      "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type ListSwipeActionType = 'success' | 'warning' | 'danger';\n\nexport type ListSwipeDirection = 'right' | 'left';\n\nexport type ListSwipeEnd = 'start' | 'end';\n\nexport interface ListSwipeAction {\n  position: ListSwipeDirection;\n  title: ((item: any) => string) | string;\n  icon?: ((item: any) => string) | string;\n  type?: ((item: any) => ListSwipeActionType) | ListSwipeActionType;\n  onSelected: (item: any) => void;\n  isDisabled?: ((item: any) => boolean) | boolean;\n}\n",
      "properties": [
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": " | string",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "isDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": " | boolean",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "onSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ListSwipeDirection",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": " | string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": " | ListSwipeActionType",
          "optional": true,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "LoadOnDemandEvent",
      "id": "interface-LoadOnDemandEvent-7f12bf79b7024753705ba80b1993b3eb",
      "file": "libs/designsystem/src/lib/components/list/list.event.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface LoadOnDemandEvent {\n  complete: (disableLoadOnDemand?: boolean) => void;\n}\n\nexport interface LoadOnDemandEventData {\n  object: any;\n  returnValue: any;\n}\n",
      "properties": [
        {
          "name": "complete",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "LoadOnDemandEventData",
      "id": "interface-LoadOnDemandEventData-7f12bf79b7024753705ba80b1993b3eb",
      "file": "libs/designsystem/src/lib/components/list/list.event.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface LoadOnDemandEvent {\n  complete: (disableLoadOnDemand?: boolean) => void;\n}\n\nexport interface LoadOnDemandEventData {\n  object: any;\n  returnValue: any;\n}\n",
      "properties": [
        {
          "name": "object",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "returnValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ModalConfig",
      "id": "interface-ModalConfig-6b9a6c7d66ca6136a42724dba0e6bd35",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { DrawerSupplementaryAction } from './drawer-supplementary-action';\n\nexport type ModalFlavor = 'modal' | 'drawer' | 'compact';\nexport type ModalSize = 'small' | 'medium' | 'large' | 'full-height';\n\nexport interface ModalConfig {\n  /**\n   * @deprecated Will be removed in next major version. Embed a `<kirby-page-title>` element inside the component instead.\n   */\n  title?: string;\n  component: any;\n  size?: ModalSize;\n  modalRoute?: ActivatedRoute;\n  siblingModalRouteActivated$?: Observable<ActivatedRoute>;\n  flavor?: ModalFlavor;\n  /**\n   * @deprecated Will be removed in next major version.\n   */\n  dim?: number;\n  componentProps?: { [key: string]: any };\n  // the supplementary action is only available in the drawer\n  drawerSupplementaryAction?: DrawerSupplementaryAction;\n  // drawer properties\n  interactWithBackground?: boolean;\n  cssClass?: string | string[];\n}\n",
      "properties": [
        {
          "name": "component",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "componentProps",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 23
        },
        {
          "name": "cssClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | string[]",
          "optional": true,
          "description": "",
          "line": 28
        },
        {
          "name": "dim",
          "deprecated": true,
          "deprecationMessage": "Will be removed in next major version.",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 22,
          "rawdescription": "\n\n",
          "jsdoctags": [
            {
              "pos": 639,
              "end": 693,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 326,
              "tagName": {
                "pos": 640,
                "end": 650,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": "<p>Will be removed in next major version.</p>\n"
            }
          ]
        },
        {
          "name": "drawerSupplementaryAction",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DrawerSupplementaryAction",
          "optional": true,
          "description": "",
          "line": 25
        },
        {
          "name": "flavor",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalFlavor",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "interactWithBackground",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 27
        },
        {
          "name": "modalRoute",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActivatedRoute",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "siblingModalRouteActivated$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ActivatedRoute>",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalSize",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "title",
          "deprecated": true,
          "deprecationMessage": "Will be removed in next major version. Embed a `<kirby-page-title>` element inside the component instead.",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 13,
          "rawdescription": "\n\n",
          "jsdoctags": [
            {
              "pos": 333,
              "end": 454,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 326,
              "tagName": {
                "pos": 334,
                "end": 344,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": "<p>Will be removed in next major version. Embed a <code>&lt;kirby-page-title&gt;</code> element inside the component instead.</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ModalRouteActivation",
      "id": "interface-ModalRouteActivation-1a9ebb41117eddef644c1ffd4157f6e4",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ActivatedRoute } from '@angular/router';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface Overlay {\n  dismiss: (data?: any) => Promise<boolean>;\n  onWillDismiss: Promise<OverlayEventDetail>;\n  onDidDismiss: Promise<OverlayEventDetail>;\n}\n\nexport interface ModalRouteActivation {\n  route: ActivatedRoute;\n  isNewModal: boolean;\n}\n\nexport abstract class Modal {\n  didPresent: Promise<void>;\n  willClose: Promise<void>;\n  close: (data?: any) => Promise<void>;\n  scrollToTop: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollToBottom: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollDisabled: boolean;\n}\n",
      "properties": [
        {
          "name": "isNewModal",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "route",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActivatedRoute",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "Overlay",
      "id": "interface-Overlay-1a9ebb41117eddef644c1ffd4157f6e4",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ActivatedRoute } from '@angular/router';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface Overlay {\n  dismiss: (data?: any) => Promise<boolean>;\n  onWillDismiss: Promise<OverlayEventDetail>;\n  onDidDismiss: Promise<OverlayEventDetail>;\n}\n\nexport interface ModalRouteActivation {\n  route: ActivatedRoute;\n  isNewModal: boolean;\n}\n\nexport abstract class Modal {\n  didPresent: Promise<void>;\n  willClose: Promise<void>;\n  close: (data?: any) => Promise<void>;\n  scrollToTop: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollToBottom: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollDisabled: boolean;\n}\n",
      "properties": [
        {
          "name": "dismiss",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "onDidDismiss",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Promise<OverlayEventDetail>",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "onWillDismiss",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Promise<OverlayEventDetail>",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "OverlayEventDetail",
      "id": "interface-OverlayEventDetail-1a9ebb41117eddef644c1ffd4157f6e4",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ActivatedRoute } from '@angular/router';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface Overlay {\n  dismiss: (data?: any) => Promise<boolean>;\n  onWillDismiss: Promise<OverlayEventDetail>;\n  onDidDismiss: Promise<OverlayEventDetail>;\n}\n\nexport interface ModalRouteActivation {\n  route: ActivatedRoute;\n  isNewModal: boolean;\n}\n\nexport abstract class Modal {\n  didPresent: Promise<void>;\n  willClose: Promise<void>;\n  close: (data?: any) => Promise<void>;\n  scrollToTop: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollToBottom: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollDisabled: boolean;\n}\n",
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "role",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ResizeObserver",
      "id": "interface-ResizeObserver-57c1ac4516a5c290130abb6947051ddc",
      "file": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ResizeObserverCallback } from './resize-observer-callback';\n\nexport interface ResizeObserver {\n  new (callback: ResizeObserverCallback);\n  /**\n   * Adds target to the list of observed elements.\n   */\n  observe: (target: Element) => void;\n  /**\n   * Removes target from the list of observed elements.\n   */\n  unobserve: (target: Element) => void;\n  /**\n   * Clears both the observationTargets and activeTargets lists.\n   */\n  disconnect: () => void;\n}\n",
      "properties": [
        {
          "name": "disconnect",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "<p>Clears both the observationTargets and activeTargets lists.</p>\n",
          "line": 16,
          "rawdescription": "\n\nClears both the observationTargets and activeTargets lists.\n"
        },
        {
          "name": "observe",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "<p>Adds target to the list of observed elements.</p>\n",
          "line": 8,
          "rawdescription": "\n\nAdds target to the list of observed elements.\n"
        },
        {
          "name": "unobserve",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "<p>Removes target from the list of observed elements.</p>\n",
          "line": 12,
          "rawdescription": "\n\nRemoves target from the list of observed elements.\n"
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ResizeObserverEntry",
      "id": "interface-ResizeObserverEntry-643805a665bda4090677692cb06e09c1",
      "file": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer-entry.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ResizeObserverEntry {\n  /**\n   * @param target The Element whose size has changed.\n   */\n  new (target: Element);\n  /**\n   * The Element whose size has changed.\n   */\n  readonly target: Element;\n  /**\n   * Element's content rect when ResizeObserverCallback is invoked.\n   */\n  readonly contentRect: DOMRectReadOnly;\n}\n",
      "properties": [
        {
          "name": "contentRect",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DOMRectReadOnly",
          "optional": false,
          "description": "<p>Element&#39;s content rect when ResizeObserverCallback is invoked.</p>\n",
          "line": 13,
          "rawdescription": "\n\nElement's content rect when ResizeObserverCallback is invoked.\n",
          "modifierKind": [143]
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Element",
          "optional": false,
          "description": "<p>The Element whose size has changed.</p>\n",
          "line": 9,
          "rawdescription": "\n\nThe Element whose size has changed.\n",
          "modifierKind": [143]
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "Scroll",
      "id": "interface-Scroll-5380b4bdc311c2755aa80a7ab346598c",
      "file": "libs/designsystem/src/lib/components/list/directives/scroll.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Scroll {\n  distanceToViewBottom: number;\n  elementHeight: number;\n  viewHeight: number;\n}\n",
      "properties": [
        {
          "name": "distanceToViewBottom",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "elementHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "viewHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "SegmentItem",
      "id": "interface-SegmentItem-707563ce66d2e9192070255397ed42ac",
      "file": "libs/designsystem/src/lib/components/segmented-control/segment-item.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { ThemeColor } from '@kirbydesign/core';\n\nexport interface SegmentItem {\n  id: string;\n  text: string;\n  /**\n   * @deprecated Will be removed in next major version. Use `selectedIndex` or `value` on `<kirby-segmented-control>` instead.\n   */\n  checked?: boolean;\n  badge?: {\n    content?: string;\n    icon?: string;\n    description?: string;\n    themeColor: ThemeColor;\n  };\n}\n",
      "properties": [
        {
          "name": "badge",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "checked",
          "deprecated": true,
          "deprecationMessage": "Will be removed in next major version. Use `selectedIndex` or `value` on `<kirby-segmented-control>` instead.",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 9,
          "rawdescription": "\n\n",
          "jsdoctags": [
            {
              "pos": 121,
              "end": 246,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 326,
              "tagName": {
                "pos": 122,
                "end": 132,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": "<p>Will be removed in next major version. Use <code>selectedIndex</code> or <code>value</code> on <code>&lt;kirby-segmented-control&gt;</code> instead.</p>\n"
            }
          ]
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "StockChartDeprecatedDataPoint",
      "id": "interface-StockChartDeprecatedDataPoint-dd6e82042dc55387cafd7e8877e00959",
      "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { formatNumber } from '@angular/common';\nimport { Options } from 'highcharts';\nimport { dateFormat } from 'highcharts/highstock';\n\nimport { ColorHelper } from '@kirbydesign/core';\n\nexport interface StockChartDeprecatedDataPoint {\n  x: number;\n  y: number;\n  id: 'min' | 'max' | '';\n}\n\nexport const stockChartDeprecatedOptions = (locale: string, height: number) => {\n  const options: Options = defaultOptions(locale) as Options;\n  const transparentColor = 'rgba(255,255,255,0)';\n  options.chart.backgroundColor = transparentColor;\n  options.chart.height = height;\n\n  options.tooltip.backgroundColor = ColorHelper.getThemeColorRgbString('background-color');\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.tooltip.formatter = function() {\n    return (\n      '<div class=\"kirby-text-xsmall\">' +\n      // @ts-ignore\n      dateFormat('%e. %b', new Date(this.x)) +\n      '</div><br/><div class=\"kirby-text-small kirby-text-bold\">' +\n      formatNumber(this.y, locale) +\n      '</div>'\n    );\n  };\n  options.plotOptions.area.fillColor = transparentColor;\n  options.plotOptions.area.lineColor = ColorHelper.getThemeColorRgbString('tertiary');\n\n  options.plotOptions.area.marker.lineColor = 'rgba(255,255,255,0.3)';\n  options.plotOptions.area.marker.fillColor = ColorHelper.getThemeColorRgbString('primary');\n\n  options.xAxis = {\n    ...options.xAxis,\n    crosshair: {\n      color: ColorHelper.getThemeColorRgbString('primary'),\n    },\n    tickColor: transparentColor,\n    lineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  options.yAxis = {\n    ...options.yAxis,\n    lineColor: transparentColor,\n    gridLineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  /*\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOver = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      tickColor: transparentColor,\n      lineColor: ColorHelper.getThemeColorRgbString('medium'),\n      labels: {\n        style: {\n          color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n        },\n      },\n    });\n  };\n\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOut = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      lineColor: transparentColor,\n      labels: {\n        style: {\n          color: transparentColor,\n        },\n      },\n    });\n  };\n   */\n\n  return options;\n};\n\nexport const annotations = (locale: string): Highcharts.AnnotationsOptions => {\n  return {\n    id: 'minmax',\n    zIndex: 2,\n    labels: [\n      {\n        point: 'max',\n        shape: 'rect',\n        distance: 5,\n        align: 'center',\n        verticalAlign: 'top',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n      {\n        point: 'min',\n        shape: 'rect',\n        distance: -28,\n        align: 'center',\n        verticalAlign: 'bottom',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n    ],\n    labelOptions: {\n      y: 0,\n      allowOverlap: true,\n    },\n  };\n};\n\nconst defaultOptions = (locale: string) => {\n  return {\n    chart: {\n      zoomType: 'x',\n      type: 'StockChart',\n      spacingTop: 30,\n      //spacingRight: 55,\n    },\n    navigator: {\n      enabled: false,\n    },\n    rangeSelector: {\n      enabled: false,\n    },\n    scrollbar: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    title: {\n      text: '',\n    },\n    subtitle: {\n      text: '',\n    },\n    xAxis: {\n      ordinal: true,\n      type: 'datetime',\n      lineWidth: 0.5,\n      opposite: false,\n      labels: {\n        format: '{value:%Y-%b-%e %l:%M %p }',\n      },\n    },\n    yAxis: {\n      opposite: false,\n      title: {\n        text: '',\n      },\n      /* Doesn't work before upgrade.\n        labels: {\n          x: 0,\n          y: 10,\n          align: 'right',\n        },\n         */\n    },\n    annotations: [annotations(locale)],\n    legend: {\n      enabled: false,\n    },\n    tooltip: {\n      crosshairs: {\n        width: 1,\n        zIndex: 2,\n      },\n      shadow: false,\n      borderWidth: 0,\n    },\n    plotOptions: {\n      area: {\n        marker: {\n          lineWidth: 16,\n          radius: 7,\n        },\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        events: {},\n        threshold: null,\n      },\n      series: {\n        marker: {\n          zIndex: 100,\n          enabledThreshold: 50,\n        },\n      },\n    },\n    series: [\n      {\n        type: 'area',\n        data: [],\n      },\n    ],\n  };\n};\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"min\" | \"max\" | string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "x",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "y",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ToastConfig",
      "id": "interface-ToastConfig-61ba1000edba4639c9d8a831953790d6",
      "file": "libs/designsystem/src/lib/components/toast/config/toast-config.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ToastConfig {\n  message: string;\n  messageType: MessageType;\n  durationInMs?: number;\n  animated?: boolean;\n}\n\n/**\n * 'danger' is deprecated. Use Kirby Alert for critical events\n */\nexport type MessageType = 'success' | 'warning' | 'danger';\n",
      "properties": [
        {
          "name": "animated",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "durationInMs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "messageType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MessageType",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "ActionSheetHelper",
      "id": "injectable-ActionSheetHelper-5d35dc381343aaaae5c6ddf68c96d5c1",
      "file": "libs/designsystem/src/lib/components/modal/services/action-sheet.helper.ts",
      "properties": [],
      "methods": [
        {
          "name": "showActionSheet",
          "args": [
            {
              "name": "config",
              "type": "ActionSheetConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<Overlay>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ActionSheetConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, EventEmitter } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\nimport { ActionSheetConfig } from '../action-sheet/config/action-sheet-config';\nimport { ActionSheetComponent } from '../action-sheet/action-sheet.component';\nimport { ActionSheetItem } from '../action-sheet/config/action-sheet-item';\nimport { Overlay } from './modal.interfaces';\n\n@Injectable()\nexport class ActionSheetHelper {\n  constructor(private ionicModalController: ModalController) {}\n\n  public async showActionSheet(config: ActionSheetConfig): Promise<Overlay> {\n    const cancel = new EventEmitter();\n    const itemSelect = new EventEmitter<ActionSheetItem>();\n\n    const ionModal = await this.ionicModalController.create({\n      component: ActionSheetComponent,\n      cssClass: ['kirby-overlay', 'kirby-action-sheet'],\n      componentProps: {\n        ...config,\n        cancel: cancel,\n        itemSelect: itemSelect,\n      },\n      backdropDismiss: false,\n    });\n\n    const cancelSubscription: Subscription = cancel.subscribe(() => ionModal.dismiss());\n    const itemSelectSubscription: Subscription = itemSelect.subscribe((item) =>\n      ionModal.dismiss(item)\n    );\n    const onDidDismiss = ionModal.onDidDismiss();\n    onDidDismiss.then((_) => {\n      cancelSubscription.unsubscribe();\n      itemSelectSubscription.unsubscribe();\n    });\n\n    await ionModal.present();\n    return {\n      dismiss: ionModal.dismiss.bind(ionModal),\n      onWillDismiss: ionModal.onWillDismiss(),\n      onDidDismiss: ionModal.onDidDismiss(),\n    };\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AlertHelper",
      "id": "injectable-AlertHelper-4b9b2295ae0e5228b41898ec6979a6ff",
      "file": "libs/designsystem/src/lib/components/modal/services/alert.helper.ts",
      "properties": [],
      "methods": [
        {
          "name": "getCancelBtnText",
          "args": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getComponentProps",
          "args": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOkBtnIsDestructive",
          "args": [
            {
              "name": "config",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "config",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOkBtnText",
          "args": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showAlert",
          "args": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<Overlay>",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\nimport { AlertConfig } from '../alert/config/alert-config';\nimport { AlertComponent } from '../alert/alert.component';\nimport { Overlay } from './modal.interfaces';\n\n@Injectable()\nexport class AlertHelper {\n  constructor(private ionicModalController: ModalController) {}\n\n  public async showAlert(config: AlertConfig): Promise<Overlay> {\n    const ionModal = await this.ionicModalController.create({\n      component: AlertComponent,\n      componentProps: this.getComponentProps(config),\n      cssClass: ['kirby-overlay', 'kirby-alert'],\n      mode: 'ios',\n      backdropDismiss: false,\n    });\n\n    await ionModal.present();\n    return {\n      dismiss: ionModal.dismiss.bind(ionModal),\n      onWillDismiss: ionModal.onWillDismiss(),\n      onDidDismiss: ionModal.onDidDismiss(),\n    };\n  }\n\n  private getComponentProps(config: AlertConfig) {\n    return {\n      ...config,\n      okBtnText: this.getOkBtnText(config),\n      cancelBtnText: this.getCancelBtnText(config),\n      okBtnIsDestructive: this.getOkBtnIsDestructive(config),\n      iconName: config.icon && config.icon.name,\n      iconThemeColor: config.icon && config.icon.themeColor,\n    };\n  }\n\n  private getOkBtnText(config: AlertConfig) {\n    let text: string;\n    if (config.okBtnText) {\n      console.warn(\n        '`okBtnText` will be deprecated on next major version. Please use `okBtn` instead.'\n      );\n      text = config.okBtnText;\n    }\n    if (config.okBtn) {\n      if (typeof config.okBtn === 'string') {\n        text = config.okBtn;\n      } else {\n        text = config.okBtn.text;\n      }\n    }\n    return text;\n  }\n\n  getOkBtnIsDestructive(config) {\n    return typeof config.okBtn === 'object' ? config.okBtn.isDestructive : undefined;\n  }\n\n  private getCancelBtnText(config: AlertConfig) {\n    if (config.cancelBtnText) {\n      console.warn(\n        '`cancelBtnText` will be deprecated on next major version. Please use `cancelBtn` instead.'\n      );\n    }\n    return config.cancelBtn || config.cancelBtnText;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "BreakpointHelperService",
      "id": "injectable-BreakpointHelperService-d9bf3e7d46a08ea79e86d2025e5bdd27",
      "file": "libs/designsystem/src/lib/components/grid/breakpoint-helper.service.ts",
      "properties": [
        {
          "name": "currentScreenWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "orientationChangedSubject",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "init",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observe",
          "args": [],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointHelperService implements OnDestroy {\n  currentScreenWidth: 800;\n  private orientationChangedSubject = new Subject<void>();\n\n  constructor() {\n    this.init();\n  }\n\n  private init() {\n    // TODO JEO: Implement Angular/CDK BreakpointObserver:\n    this.orientationChangedSubject.next();\n  }\n\n  observe(): Observable<void> {\n    return this.orientationChangedSubject.asObservable();\n  }\n\n  ngOnDestroy() {\n    this.orientationChangedSubject.complete();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 9
      },
      "type": "injectable"
    },
    {
      "name": "CalendarHelper",
      "id": "injectable-CalendarHelper-49c70cf529e84e6cae6dceee73cab376",
      "file": "libs/designsystem/src/lib/components/calendar/helpers/calendar.helper.ts",
      "properties": [
        {
          "name": "embeddedView",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Window",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        },
        {
          "name": "embeddedViewReady",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "emitOptionsToEmbeddedView",
          "args": [
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleMessageEvent",
          "args": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onDaySelected",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "cell",
                  "type": "literal type",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            },
            {
              "name": "onChangeMonth",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "index",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onDaySelected",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "cell",
                  "type": "literal type",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onChangeMonth",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "index",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "hasEmbeddedView",
          "args": [
            {
              "name": "calendarContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "calendarContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "init",
          "args": [
            {
              "name": "calendarContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onDaySelected",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "cell",
                  "type": "literal type",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            },
            {
              "name": "onChangeMonth",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "index",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "calendarContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onDaySelected",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "cell",
                  "type": "literal type",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onChangeMonth",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "index",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setSelectedDay",
          "args": [
            {
              "name": "day",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "day",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "update",
          "args": [
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "options",
              "type": "CalendarOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateDateSelectedMessage",
          "args": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateMessage",
          "args": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateNavigateMonthMessage",
          "args": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MessageEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ElementRef, Injectable } from '@angular/core';\n\nimport { WindowRef } from '../../../types/window-ref';\n\nimport { CalendarOptions } from './calendar-options.model';\n\n@Injectable()\nexport class CalendarHelper {\n  private embeddedView: Window;\n  private embeddedViewReady = false;\n\n  constructor(private windowRef: WindowRef) {}\n\n  public init(\n    calendarContainer: ElementRef,\n    options: CalendarOptions,\n    onDaySelected: (cell: { isSelectable: boolean; date: number }) => void,\n    onChangeMonth: (index: number) => void\n  ) {\n    if (this.hasEmbeddedView(calendarContainer)) {\n      const iframe = <HTMLIFrameElement>calendarContainer.nativeElement;\n      iframe.onload = () => {\n        this.embeddedViewReady = true;\n        this.emitOptionsToEmbeddedView(options);\n      };\n      this.embeddedView = iframe.contentWindow;\n\n      this.windowRef.nativeWindow.addEventListener('message', (event: MessageEvent) =>\n        this.handleMessageEvent(event, onDaySelected, onChangeMonth)\n      );\n    }\n  }\n\n  public update(options: CalendarOptions) {\n    if (this.embeddedViewReady) {\n      this.emitOptionsToEmbeddedView(options);\n    }\n  }\n\n  public setSelectedDay(day: number) {\n    if (this.embeddedViewReady) {\n      this.embeddedView.postMessage(\n        {\n          type: 'kirbyCalendarSetSelectedDay',\n          selectedDay: day,\n        },\n        '*'\n      );\n    }\n  }\n\n  private hasEmbeddedView(calendarContainer: ElementRef) {\n    return (\n      calendarContainer &&\n      calendarContainer.nativeElement &&\n      calendarContainer.nativeElement instanceof HTMLIFrameElement &&\n      calendarContainer.nativeElement.contentWindow\n    );\n  }\n\n  private emitOptionsToEmbeddedView(options: CalendarOptions) {\n    this.embeddedView.postMessage(\n      {\n        type: 'kirbyCalendarInit',\n        ...options,\n      },\n      '*'\n    );\n  }\n\n  private handleMessageEvent(\n    event: MessageEvent,\n    onDaySelected: (cell: { isSelectable: boolean; date: number }) => void,\n    onChangeMonth: (index: number) => void\n  ) {\n    if (this.validateMessage(event)) {\n      switch (event.data.type) {\n        case 'kirbyCalendarDaySelected':\n          if (this.validateDateSelectedMessage(event)) {\n            onDaySelected({ isSelectable: true, date: event.data.day });\n          }\n          break;\n        case 'kirbyCalendarChangeMonth':\n          if (this.validateNavigateMonthMessage(event)) {\n            onChangeMonth(event.data.index);\n          }\n          break;\n      }\n    }\n  }\n\n  private validateMessage(event: MessageEvent) {\n    return (\n      this.embeddedView === event.source &&\n      event.type === 'message' &&\n      event.data &&\n      event.data.type\n    );\n  }\n\n  private validateDateSelectedMessage(event: MessageEvent) {\n    return event.data.type === 'kirbyCalendarDaySelected' && event.data.day;\n  }\n\n  private validateNavigateMonthMessage(event: MessageEvent) {\n    return event.data.type === 'kirbyCalendarChangeMonth' && typeof event.data.index === 'number';\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ChartConfigService",
      "id": "injectable-ChartConfigService-f8ddb4c0ab21424652b8e6728f4b0e6d",
      "file": "libs/designsystem/src/lib/components/chart/configs/chart-config.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "chartTypeToChartJSType",
          "args": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ChartJSType",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAnnotationDefaults",
          "args": [
            {
              "name": "type",
              "type": "AnnotationType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "type",
              "type": "AnnotationType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getInteractionFunctionsExtensions",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "getTypeConfig",
          "args": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ChartTypeConfig",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ChartType as ChartJSType } from 'chart.js';\nimport { AnnotationType, AnnotationTypeRegistry } from 'chartjs-plugin-annotation';\n\nimport { deepCopy } from '../../../helpers/deep-copy';\nimport { ChartType, ChartTypeConfig } from '../chart.types';\n\nimport { CHART_ANNOTATIONS_CONFIG } from './annotations.config';\nimport { CHART_INTERACTION_FUNCTIONS_EXTENSIONS } from './interaction-functions-extensions.config';\nimport { CHART_TYPES_CONFIG } from './type.config';\n\n@Injectable()\nexport class ChartConfigService {\n  public getTypeConfig(chartType: ChartType): ChartTypeConfig {\n    /* Deep copy to avoid Chart object modifying parts of CHART_TYPES_CONFIG \n    as it copies by reference when initialized */\n    return deepCopy(CHART_TYPES_CONFIG[chartType]);\n  }\n\n  public getAnnotationDefaults(type: AnnotationType): AnnotationTypeRegistry[AnnotationType] {\n    return CHART_ANNOTATIONS_CONFIG[type];\n  }\n\n  public getInteractionFunctionsExtensions() {\n    return CHART_INTERACTION_FUNCTIONS_EXTENSIONS;\n  }\n\n  /* Our types does not always map 1 to 1 to the same type \n  that the chart.js chart is actually oconfigured with. Therefore this function \n  for looking up the ChartJSType of a type.  */\n  public chartTypeToChartJSType(chartType: ChartType): ChartJSType {\n    return CHART_TYPES_CONFIG[chartType]['type'] as ChartJSType;\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ChartDeprecatedHelper",
      "id": "injectable-ChartDeprecatedHelper-db88135aff5f32add23d2c911e35acbf",
      "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts",
      "properties": [
        {
          "name": "chartContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "init",
          "args": [
            {
              "name": "chartContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "chartContainer",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "renderChart",
          "args": [
            {
              "name": "options",
              "type": "Options",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "options",
              "type": "Options",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ElementRef, Injectable } from '@angular/core';\nimport { chart, Options } from 'highcharts';\nimport * as Highcharts from 'highcharts';\n\n// Docs on importing accessibility: https://www.highcharts.com/docs/chart-concepts/accessibility\n\ndeclare var require: any;\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nrequire('highcharts/modules/broken-axis')(Highcharts);\n\n@Injectable()\nexport class ChartDeprecatedHelper {\n  chartContainer: ElementRef;\n\n  public init(chartContainer: ElementRef) {\n    this.chartContainer = chartContainer;\n  }\n\n  public renderChart(options: Options) {\n    if (this.chartContainer && options.chart) {\n      chart(this.chartContainer.nativeElement, options);\n    }\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ChartJSService",
      "id": "injectable-ChartJSService-f89cf4cb66df3e1499f78d716b447af6",
      "file": "libs/designsystem/src/lib/components/chart/chart-js/chart-js.service.ts",
      "properties": [
        {
          "name": "chart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Chart",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "addHighlightedElementsToDatasets",
          "args": [
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "applyDefaultsToAnnotations",
          "args": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "applyInteractionFunctionsExtensions",
          "args": [
            {
              "name": "options",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ChartOptions",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "options",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createAnnotationPluginOptionsObject",
          "args": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{ plugins: { annotation: { annotations: any; }; }; }",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createBlankLabels",
          "args": [
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createConfigurationObject",
          "args": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "dataLabels",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "ChartConfiguration",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "datasets",
              "type": "ChartDataset[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dataLabels",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createDatasets",
          "args": [
            {
              "name": "data",
              "type": "ChartDataset[] | number[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "ChartDataset[]",
          "typeParameters": [],
          "line": 223,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "data",
              "type": "ChartDataset[] | number[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createOptionsObject",
          "args": [
            {
              "name": "args",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ChartOptions",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "args",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "destructivelyUpdateType",
          "args": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExistingChartAnnotations",
          "args": [],
          "optional": false,
          "returnType": "AnnotationOptions[]",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initializeNewChart",
          "args": [
            {
              "name": "canvasElement",
              "type": "HTMLCanvasElement",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "config",
              "type": "ChartConfiguration",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "canvasElement",
              "type": "HTMLCanvasElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "config",
              "type": "ChartConfiguration",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "nonDestructivelyUpdateType",
          "args": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "chartType",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "redrawChart",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "renderChart",
          "args": [
            {
              "name": "args",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "args",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAnnotations",
          "args": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "annotations",
              "type": "AnnotationOptions[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateData",
          "args": [
            {
              "name": "data",
              "type": "ChartDataset[] | number[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "data",
              "type": "ChartDataset[] | number[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateDataLabels",
          "args": [
            {
              "name": "dataLabels",
              "type": "string[] | string[][]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "dataLabels",
              "type": "string[] | string[][]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateHighlightedElements",
          "args": [
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "highlightedElements",
              "type": "ChartHighlightedElements",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateOptions",
          "args": [
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateType",
          "args": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "type",
              "type": "ChartType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customOptions",
              "type": "ChartOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ElementRef, Injectable } from '@angular/core';\nimport { ActiveElement, ChartConfiguration, ChartOptions } from 'chart.js';\nimport { AnnotationOptions } from 'chartjs-plugin-annotation';\n\nimport { mergeDeepAll } from '../../../helpers/merge-deep';\nimport { ChartDataset, ChartHighlightedElements, ChartType, isNumberArray } from '../chart.types';\nimport { ChartConfigService } from '../configs/chart-config.service';\n\nimport { Chart } from './configured-chart-js';\n\n@Injectable()\nexport class ChartJSService {\n  private chart: Chart;\n\n  constructor(private chartConfigService: ChartConfigService) {}\n\n  public renderChart(args: {\n    targetElement: ElementRef<HTMLCanvasElement>;\n    type: ChartType;\n    data: ChartDataset[] | number[];\n    dataLabels?: string[] | string[][];\n    customOptions?: ChartOptions;\n    annotations?: AnnotationOptions[];\n    highlightedElements?: ChartHighlightedElements;\n  }): void {\n    const {\n      targetElement,\n      type,\n      data,\n      dataLabels,\n      customOptions,\n      annotations,\n      highlightedElements,\n    } = args;\n\n    const datasets = this.createDatasets(data, highlightedElements);\n    const options = this.createOptionsObject({ type, customOptions, annotations });\n    const config = this.createConfigurationObject(type, datasets, options, dataLabels);\n    this.initializeNewChart(targetElement.nativeElement, config);\n  }\n\n  public redrawChart() {\n    this.chart.update();\n  }\n\n  public updateData(data: ChartDataset[] | number[]): void {\n    const datasets = this.createDatasets(data);\n    this.chart.data.datasets = datasets;\n  }\n\n  public updateDataLabels(dataLabels: string[] | string[][]) {\n    this.chart.data.labels = dataLabels;\n  }\n\n  public updateType(type: ChartType, customOptions?: ChartOptions) {\n    if (type === 'bar' || type === 'column') {\n      /* indexAxis does not update predictably; update by replacing \n         the chart entirely instead */\n      this.destructivelyUpdateType(type, customOptions);\n    } else {\n      this.nonDestructivelyUpdateType(type, customOptions);\n    }\n  }\n\n  public updateOptions(customOptions: ChartOptions, type: ChartType) {\n    const annotations = this.getExistingChartAnnotations();\n    this.chart.options = this.createOptionsObject({ type, customOptions, annotations });\n  }\n\n  public updateAnnotations(annotations: AnnotationOptions[]) {\n    const annotationsWithDefaults = this.applyDefaultsToAnnotations(annotations);\n    this.chart.options.plugins.annotation.annotations = annotationsWithDefaults;\n  }\n\n  public updateHighlightedElements(highlightedElements?: ChartHighlightedElements) {\n    const oldDatasets = this.chart.data.datasets as ChartDataset[];\n\n    // Clear old datasets of highlighted elements\n    oldDatasets.map((dataset) => {\n      if (dataset?.kirbyOptions?.highlightedElements) {\n        delete dataset.kirbyOptions.highlightedElements;\n      }\n    });\n\n    this.chart.data.datasets = this.createDatasets(oldDatasets, highlightedElements);\n  }\n\n  private getExistingChartAnnotations(): AnnotationOptions[] {\n    const annotations = this.chart.options.plugins?.annotation?.annotations;\n    /* In browser chart.js might return annotations as a Proxy object; force it to be an array.\n       Each annotationOption in the resulting array  will also be a Proxy object. \n       But internally chart.js will just work with them as normal values */\n    if (annotations !== undefined) {\n      return Object.keys(annotations).map((key) => annotations[key]);\n    } else {\n      return [];\n    }\n  }\n\n  private destructivelyUpdateType(type: ChartType, customOptions?: ChartOptions) {\n    const datasets = this.chart.data.datasets as ChartDataset[];\n    const dataLabels = this.chart.data.labels;\n    const annotations = this.getExistingChartAnnotations();\n\n    const options = this.createOptionsObject({ type, customOptions, annotations });\n    const config = this.createConfigurationObject(type, datasets, options, dataLabels);\n    const canvasElement = this.chart.canvas;\n\n    this.chart.destroy();\n    this.initializeNewChart(canvasElement, config);\n  }\n\n  private nonDestructivelyUpdateType(chartType: ChartType, customOptions?: ChartOptions) {\n    const annotations = this.getExistingChartAnnotations();\n    const options = this.createOptionsObject({\n      type: chartType,\n      customOptions,\n      annotations,\n    });\n\n    this.chart.options = options;\n    this.chart.config.type = this.chartConfigService.chartTypeToChartJSType(chartType);\n  }\n\n  private initializeNewChart(canvasElement: HTMLCanvasElement, config: ChartConfiguration) {\n    this.chart = new Chart(canvasElement, config);\n  }\n\n  private createBlankLabels(datasets: ChartDataset[]): string[] {\n    const largestDataset = datasets.reduce((previousDataset, currentDataset) =>\n      previousDataset.data.length > currentDataset.data.length ? previousDataset : currentDataset\n    );\n    return Array(largestDataset.data.length).fill('');\n  }\n\n  private applyDefaultsToAnnotations(annotations: AnnotationOptions[]) {\n    return annotations.map((annotation) => {\n      const annotationTypeDefaults = this.chartConfigService.getAnnotationDefaults(annotation.type);\n      return mergeDeepAll(annotationTypeDefaults, annotation);\n    });\n  }\n\n  private createAnnotationPluginOptionsObject(annotations: AnnotationOptions[]) {\n    const annotationsWithDefaults = this.applyDefaultsToAnnotations(annotations);\n    return {\n      plugins: {\n        annotation: {\n          annotations: annotationsWithDefaults,\n        },\n      },\n    };\n  }\n\n  private applyInteractionFunctionsExtensions(options: ChartOptions): ChartOptions {\n    const interactionFunctionsExtensions = this.chartConfigService.getInteractionFunctionsExtensions();\n    Object.entries(interactionFunctionsExtensions).forEach(([key, _]) => {\n      const callback = options[key];\n      options[key] = (e: Event, a: ActiveElement[], c: Chart) => {\n        interactionFunctionsExtensions[key](e, a, c, callback);\n      };\n    });\n    return options;\n  }\n\n  private createOptionsObject(args: {\n    type: ChartType;\n    customOptions?: ChartOptions;\n    annotations?: AnnotationOptions[];\n  }): ChartOptions {\n    const { type, customOptions, annotations } = args;\n\n    const typeConfig = this.chartConfigService.getTypeConfig(type);\n    const typeConfigOptions = typeConfig?.options;\n    const annotationPluginOptions = annotations\n      ? this.createAnnotationPluginOptionsObject(annotations)\n      : {};\n    let options: ChartOptions = mergeDeepAll(\n      typeConfigOptions,\n      customOptions,\n      annotationPluginOptions\n    );\n    return this.applyInteractionFunctionsExtensions(options);\n  }\n\n  private createConfigurationObject(\n    type: ChartType,\n    datasets: ChartDataset[],\n    options: ChartOptions,\n    dataLabels?: unknown[]\n  ): ChartConfiguration {\n    /* chartJS requires labels; if none is provided create an empty string array\n    to make it optional for consumer */\n    const labels = !dataLabels ? this.createBlankLabels(datasets) : dataLabels;\n    const typeConfig = this.chartConfigService.getTypeConfig(type);\n\n    return mergeDeepAll(typeConfig, {\n      data: {\n        labels,\n        datasets,\n      },\n      options,\n    }) as ChartConfiguration;\n  }\n\n  private addHighlightedElementsToDatasets(\n    highlightedElements: ChartHighlightedElements,\n    datasets: ChartDataset[]\n  ) {\n    highlightedElements.forEach(([datasetIndex, dataIndex]) => {\n      const dataset = datasets[datasetIndex];\n      if (!dataset) return;\n\n      if (dataset?.kirbyOptions?.highlightedElements) {\n        dataset.kirbyOptions.highlightedElements.push(dataIndex);\n      } else {\n        dataset.kirbyOptions = {\n          ...dataset.kirbyOptions,\n          highlightedElements: [dataIndex],\n        };\n      }\n    });\n  }\n  private createDatasets(\n    data: ChartDataset[] | number[],\n    highlightedElements?: ChartHighlightedElements\n  ): ChartDataset[] {\n    let datasets = isNumberArray(data) ? [{ data }] : data;\n\n    if (highlightedElements) this.addHighlightedElementsToDatasets(highlightedElements, datasets);\n\n    return datasets;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "chartConfigService",
            "type": "ChartConfigService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "chartConfigService",
            "type": "ChartConfigService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "IconRegistryService",
      "id": "injectable-IconRegistryService-9eebe9125f546e23259c56fd7b3e12f5",
      "file": "libs/designsystem/src/lib/components/icon/icon-registry.service.ts",
      "properties": [
        {
          "name": "iconRegistry",
          "defaultValue": "new Map<string, string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "addIcon",
          "args": [
            {
              "name": "iconName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "svgPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "iconName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "svgPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "addIcons",
          "args": [
            {
              "name": "icons",
              "type": "Icon[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "icons",
              "type": "Icon[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getIcon",
          "args": [
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Icon",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getIcons",
          "args": [],
          "optional": false,
          "returnType": "Icon[]",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\n\nimport { Icon, IconSettings, ICON_SETTINGS } from './icon-settings';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconRegistryService {\n  private iconRegistry = new Map<string, string>();\n\n  constructor(@Optional() @Inject(ICON_SETTINGS) iconSettings?: IconSettings) {\n    if (iconSettings) {\n      this.addIcons(iconSettings.icons);\n      console.warn(`Use of IconSettings is deprecated, use IconRegistryService instead`);\n    }\n  }\n\n  public addIcon(iconName: string, svgPath: string): void {\n    if (!this.iconRegistry.has(iconName)) {\n      this.iconRegistry.set(iconName, svgPath);\n    } else {\n      console.warn(`Icon with name: \"${iconName}\" already exists`);\n    }\n  }\n\n  public addIcons(icons: Icon[]): void {\n    if (!icons) {\n      console.error('Icons not defined');\n      return;\n    }\n    icons.forEach((icon) => {\n      this.addIcon(icon.name, icon.svg);\n    });\n  }\n\n  getIcons(): Icon[] {\n    return [...this.iconRegistry].map(\n      (keyValPair) => ({ name: keyValPair[0], svg: keyValPair[1] } as Icon)\n    );\n  }\n\n  getIcon(name: string): Icon {\n    const svg = this.iconRegistry.get(name);\n    return svg ? { name, svg } : undefined;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "iconSettings",
            "type": "IconSettings",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "iconSettings",
            "type": "IconSettings",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "KeyboardHandlerService",
      "id": "injectable-KeyboardHandlerService-def389f2b8ebb5d273e31320771906d0",
      "file": "libs/designsystem/src/lib/components/dropdown/keyboard-handler.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "handle",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "items",
              "type": "any[] | string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "selectedIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "items",
              "type": "any[] | string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selectedIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardHandlerService {\n  handle(event: KeyboardEvent, items: any[] | string[], selectedIndex: number) {\n    let newIndex = -1;\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowLeft':\n        // Select previous item:\n        newIndex = selectedIndex - 1;\n        break;\n      case 'ArrowDown':\n      case 'ArrowRight':\n        if (selectedIndex === undefined) {\n          // None selected, select first item:\n          newIndex = 0;\n        } else if (selectedIndex < items.length - 1) {\n          // Select next item:\n          newIndex = selectedIndex + 1;\n        }\n        break;\n      case 'Home':\n        // Select first item:\n        newIndex = 0;\n        break;\n      case 'End':\n        // Select last item:\n        newIndex = items.length - 1;\n        break;\n      default:\n        break;\n    }\n    return newIndex;\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "LineClampHelper",
      "id": "injectable-LineClampHelper-9644141e529d14eea792ed6917c85d7c",
      "file": "libs/designsystem/src/lib/helpers/line-clamp-helper.ts",
      "properties": [],
      "methods": [
        {
          "name": "removeLineClamp",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setLineHeight",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "lineHeight",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "lineHeight",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setMaxLines",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "maxLines",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "maxLines",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, Renderer2, RendererStyleFlags2 } from '@angular/core';\n\nconst config = Object.freeze({\n  className: 'kirby-line-clamp',\n  lineClamp: '--line-clamp',\n  lineHeight: '--line-height',\n});\n\n@Injectable()\nexport class LineClampHelper {\n  constructor(private renderer: Renderer2) {}\n\n  setMaxLines(element: Element, maxLines: number): void {\n    this.renderer.setStyle(element, config.lineClamp, maxLines, RendererStyleFlags2.DashCase);\n    this.renderer.addClass(element, config.className);\n  }\n\n  setLineHeight(element: Element, lineHeight: string): void {\n    // Only necessary for the fallback solution to work\n    this.renderer.setStyle(element, config.lineHeight, lineHeight, RendererStyleFlags2.DashCase);\n  }\n\n  removeLineClamp(element: Element) {\n    this.renderer.removeClass(element, config.className);\n    this.renderer.removeStyle(element, config.lineClamp);\n    this.renderer.removeStyle(element, config.lineHeight);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ListHelper",
      "id": "injectable-ListHelper-f5fe9f577576ce9a5d007d8132d20d2f",
      "file": "libs/designsystem/src/lib/components/list/helpers/list-helper.ts",
      "properties": [],
      "methods": [
        {
          "name": "onLoadOnDemand",
          "args": [
            {
              "name": "component",
              "type": "ListComponent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_event",
              "type": "LoadOnDemandEventData",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "component",
              "type": "ListComponent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_event",
              "type": "LoadOnDemandEventData",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ListComponent } from '../list.component';\nimport { LoadOnDemandEventData } from '../list.event';\n\n@Injectable()\nexport class ListHelper {\n  onLoadOnDemand(component: ListComponent, _event: LoadOnDemandEventData) {\n    if (component.isLoadOnDemandEnabled && !component._isLoading) {\n      component._isLoading = true;\n      component.loadOnDemand.emit({\n        complete: (disableLoadOnDemand: boolean) => {\n          component.isLoadOnDemandEnabled = !disableLoadOnDemand;\n          component._isLoading = false;\n        },\n      });\n    }\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "LoadingOverlayService",
      "id": "injectable-LoadingOverlayService-1d1ba4cb8083ece9cdf8d6c953c8c401",
      "file": "libs/designsystem/src/lib/components/loading-overlay/loading-overlay.service.ts",
      "properties": [
        {
          "name": "ionLoading",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLIonLoadingElement",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "hideLoadingOverlay",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130]
        },
        {
          "name": "showLoadingOverlay",
          "args": [
            {
              "name": "showBackdrop",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "showBackdrop",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n\nimport { SpinnerComponent } from '../spinner/spinner.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingOverlayService {\n  private ionLoading: HTMLIonLoadingElement = null;\n\n  constructor(\n    private loadingController: LoadingController,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  public async showLoadingOverlay(showBackdrop: boolean = true): Promise<void> {\n    if (!this.ionLoading) {\n      this.ionLoading = await this.loadingController.create({\n        cssClass: 'kirby-loading-overlay',\n        duration: 0,\n        message: null,\n        showBackdrop: showBackdrop,\n        spinner: null,\n      });\n\n      const loadingWrapper = this.ionLoading.querySelector('.loading-wrapper');\n      const kirbySpinner = document.createElement('kirby-spinner');\n      const factory = this.componentFactoryResolver.resolveComponentFactory(SpinnerComponent);\n      factory.create(this.injector, [], kirbySpinner);\n      loadingWrapper.appendChild(kirbySpinner);\n\n      await this.ionLoading.present();\n    }\n  }\n\n  public async hideLoadingOverlay(): Promise<void> {\n    if (!!this.ionLoading) {\n      await this.ionLoading.dismiss();\n      this.ionLoading = null;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "loadingController",
            "type": "LoadingController",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "loadingController",
            "type": "LoadingController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ModalAnimationBuilderService",
      "id": "injectable-ModalAnimationBuilderService-3a31f75831c768b4182fa83529962e71",
      "file": "libs/designsystem/src/lib/components/modal/services/modal-animation-builder.service.ts",
      "properties": [
        {
          "name": "duration",
          "defaultValue": "KirbyAnimation.Duration.LONG",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121, 143]
        },
        {
          "name": "easingEnter",
          "defaultValue": "KirbyAnimation.Easing.modal.enter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121, 143]
        },
        {
          "name": "easingLeave",
          "defaultValue": "KirbyAnimation.Easing.modal.exit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121, 143]
        },
        {
          "name": "SwipeToCloseDefaults",
          "defaultValue": "{\n    MIN_PRESENTING_SCALE: 0.93,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [121, 143]
        }
      ],
      "methods": [
        {
          "name": "enterAnimation",
          "args": [
            {
              "name": "currentBackdrop",
              "type": "HTMLIonBackdropElement",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "AnimationBuilder",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "currentBackdrop",
              "type": "HTMLIonBackdropElement",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "leaveAnimation",
          "args": [
            {
              "name": "currentBackdrop",
              "type": "HTMLIonBackdropElement",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "AnimationBuilder",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "currentBackdrop",
              "type": "HTMLIonBackdropElement",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Animation, AnimationBuilder, AnimationController } from '@ionic/angular';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\nimport { PlatformService } from '../../../helpers/platform.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalAnimationBuilderService {\n  constructor(private animationCtrl: AnimationController, private platform: PlatformService) {}\n\n  private readonly easingEnter = KirbyAnimation.Easing.modal.enter;\n  private readonly easingLeave = KirbyAnimation.Easing.modal.exit;\n  private readonly duration = KirbyAnimation.Duration.LONG;\n  private readonly SwipeToCloseDefaults = {\n    MIN_PRESENTING_SCALE: 0.93,\n  };\n\n  public enterAnimation(currentBackdrop?: HTMLIonBackdropElement): AnimationBuilder {\n    return (baseEl: HTMLElement, presentingEl?: HTMLElement): Animation => {\n      const backdropAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl.querySelector('ion-backdrop')!)\n        .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n        .beforeStyles({\n          'pointer-events': 'none',\n        })\n        .afterClearStyles(['pointer-events']);\n\n      const wrapperAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl.querySelectorAll('.modal-wrapper, .modal-shadow')!)\n        .beforeStyles({ opacity: 1 })\n        .fromTo('transform', 'translateY(100vh)', 'translateY(0vh)');\n\n      const baseAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl)\n        .easing(this.easingEnter)\n        .duration(this.duration)\n        .addAnimation(wrapperAnimation);\n\n      let currentBackdropAnimation: Animation;\n      if (currentBackdrop) {\n        currentBackdropAnimation = this.animationCtrl\n          .create()\n          .addElement(currentBackdrop)\n          .fromTo('opacity', 'var(--backdrop-opacity)', 0.01);\n      }\n\n      if (presentingEl) {\n        const isMobile = !this.platform.isPhabletOrBigger();\n        const hasCardModal =\n          presentingEl.tagName === 'ION-MODAL' &&\n          (presentingEl as HTMLIonModalElement).presentingElement !== undefined;\n\n        const presentingAnimation = this.animationCtrl.create().beforeStyles({\n          transform: 'translateY(0)',\n          'transform-origin': 'top center',\n          overflow: 'hidden',\n        });\n\n        const bodyEl = document.body;\n\n        if (isMobile) {\n          /**\n           * Fallback for browsers that does not support `max()` (ex: Firefox)\n           * No need to worry about statusbar padding since engines like Gecko\n           * are not used as the engine for standlone Cordova/Capacitor apps\n           */\n          const transformOffset = !CSS.supports('width', 'max(0px, 1px)')\n            ? '30px'\n            : 'max(30px, var(--ion-safe-area-top))';\n          const modalTransform = hasCardModal ? '-10px' : transformOffset;\n          const toPresentingScale = this.SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n          const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;\n\n          presentingAnimation\n            .afterStyles({\n              transform: finalTransform,\n            })\n            .beforeAddWrite(() => bodyEl.style.setProperty('background-color', 'black'))\n            .addElement(presentingEl)\n            .keyframes([\n              {\n                offset: 0,\n                filter: 'contrast(1)',\n                transform: 'translateY(0px) scale(1)',\n                borderRadius: '0px',\n              },\n              {\n                offset: 1,\n                filter: 'contrast(0.85)',\n                transform: finalTransform,\n                borderRadius: '10px 10px 0 0',\n              },\n            ]);\n          baseAnimation.addAnimation(presentingAnimation);\n        } else {\n          baseAnimation.addAnimation(backdropAnimation);\n          if (currentBackdropAnimation) {\n            baseAnimation.addAnimation(currentBackdropAnimation);\n          }\n\n          if (!hasCardModal) {\n            wrapperAnimation.fromTo('opacity', '0', '1');\n          } else {\n            const toPresentingScale = hasCardModal\n              ? this.SwipeToCloseDefaults.MIN_PRESENTING_SCALE\n              : 1;\n            const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;\n\n            presentingAnimation\n              .afterStyles({\n                transform: finalTransform,\n              })\n              .addElement(presentingEl.querySelector('.modal-wrapper')!)\n              .keyframes([\n                { offset: 0, filter: 'contrast(1)', transform: 'translateY(0) scale(1)' },\n                { offset: 1, filter: 'contrast(0.85)', transform: finalTransform },\n              ]);\n\n            const shadowAnimation = this.animationCtrl\n              .create()\n              .afterStyles({\n                transform: finalTransform,\n              })\n              .addElement(presentingEl.querySelector('.modal-shadow')!)\n              .keyframes([\n                { offset: 0, opacity: '1', transform: 'translateY(0) scale(1)' },\n                { offset: 1, opacity: '0', transform: finalTransform },\n              ]);\n\n            baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n          }\n        }\n      } else {\n        baseAnimation.addAnimation(backdropAnimation);\n        if (currentBackdropAnimation) {\n          baseAnimation.addAnimation(currentBackdropAnimation);\n        }\n      }\n\n      return baseAnimation;\n    };\n  }\n\n  public leaveAnimation(currentBackdrop?: HTMLIonBackdropElement): AnimationBuilder {\n    return (baseEl: HTMLElement, presentingEl?: HTMLElement): Animation => {\n      const backdropAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl.querySelector('ion-backdrop')!)\n        .fromTo('opacity', 'var(--backdrop-opacity)', 0.0);\n\n      const wrapperAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl.querySelectorAll('.modal-wrapper, .modal-shadow')!)\n        .beforeStyles({ opacity: 1 })\n        .fromTo('transform', 'translateY(0vh)', 'translateY(100vh)');\n\n      const baseAnimation = this.animationCtrl\n        .create()\n        .addElement(baseEl)\n        .easing(this.easingLeave)\n        .duration(this.duration)\n        .addAnimation(wrapperAnimation);\n\n      let currentBackdropAnimation: Animation;\n      if (currentBackdrop) {\n        currentBackdropAnimation = this.animationCtrl\n          .create()\n          .addElement(currentBackdrop)\n          .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n          .afterStyles({ opacity: 'var(--backdrop-opacity)' }); //Ensures backdrop is reset to default opacity after swipe to close\n      }\n\n      if (presentingEl) {\n        const isMobile = !this.platform.isPhabletOrBigger();\n        const hasCardModal =\n          presentingEl.tagName === 'ION-MODAL' &&\n          (presentingEl as HTMLIonModalElement).presentingElement !== undefined;\n\n        const presentingAnimation = this.animationCtrl\n          .create()\n          .beforeClearStyles(['transform'])\n          .afterClearStyles(['transform'])\n          .onFinish((currentStep) => {\n            // only reset background color if this is the last card-style modal\n            if (currentStep !== 1) {\n              return;\n            }\n\n            presentingEl.style.setProperty('overflow', '');\n\n            const numModals = Array.from(bodyEl.querySelectorAll('ion-modal')).filter(\n              (m) => m.presentingElement !== undefined\n            ).length;\n            if (numModals <= 1) {\n              bodyEl.style.setProperty('background-color', '');\n            }\n          });\n\n        const bodyEl = document.body;\n\n        if (isMobile) {\n          const transformOffset = !CSS.supports('width', 'max(0px, 1px)')\n            ? '30px'\n            : 'max(30px, var(--ion-safe-area-top))';\n          const modalTransform = hasCardModal ? '-10px' : transformOffset;\n          const toPresentingScale = this.SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n          const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;\n\n          presentingAnimation.addElement(presentingEl).keyframes([\n            {\n              offset: 0,\n              filter: 'contrast(0.85)',\n              transform: finalTransform,\n              borderRadius: '10px 10px 0 0',\n            },\n            {\n              offset: 1,\n              filter: 'contrast(1)',\n              transform: 'translateY(0px) scale(1)',\n              borderRadius: '0px',\n            },\n          ]);\n\n          baseAnimation.addAnimation(presentingAnimation);\n        } else {\n          baseAnimation.addAnimation(backdropAnimation);\n          if (currentBackdropAnimation) {\n            baseAnimation.addAnimation(currentBackdropAnimation);\n          }\n\n          if (!hasCardModal) {\n            wrapperAnimation.fromTo('opacity', '1', '0');\n          } else {\n            const toPresentingScale = hasCardModal\n              ? this.SwipeToCloseDefaults.MIN_PRESENTING_SCALE\n              : 1;\n            const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;\n\n            presentingAnimation\n              .addElement(presentingEl.querySelector('.modal-wrapper')!)\n              .afterStyles({\n                transform: 'translate3d(0, 0, 0)',\n              })\n              .keyframes([\n                { offset: 0, filter: 'contrast(0.85)', transform: finalTransform },\n                { offset: 1, filter: 'contrast(1)', transform: 'translateY(0) scale(1)' },\n              ]);\n\n            const shadowAnimation = this.animationCtrl\n              .create()\n              .addElement(presentingEl.querySelector('.modal-shadow')!)\n              .afterStyles({\n                transform: 'translateY(0) scale(1)',\n              })\n              .keyframes([\n                { offset: 0, opacity: '0', transform: finalTransform },\n                { offset: 1, opacity: '1', transform: 'translateY(0) scale(1)' },\n              ]);\n\n            baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n          }\n        }\n      } else {\n        baseAnimation.addAnimation(backdropAnimation);\n        if (currentBackdropAnimation) {\n          baseAnimation.addAnimation(currentBackdropAnimation);\n        }\n      }\n\n      return baseAnimation;\n    };\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "animationCtrl",
            "type": "AnimationController",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "animationCtrl",
            "type": "AnimationController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ModalController",
      "id": "injectable-ModalController-142214aee4337aaf5c195e06483dc757",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.controller.ts",
      "properties": [
        {
          "name": "destroy$",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [121]
        },
        {
          "name": "noOverlayRegisteredErrorMessage",
          "defaultValue": "'No modal overlays are currently registered'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [121, 143]
        },
        {
          "name": "overlays",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Overlay[]",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "hideAll",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130]
        },
        {
          "name": "hideTopmost",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initialize",
          "args": [
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "navigateToModal",
          "args": [
            {
              "name": "path",
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "navigateWithinModal",
          "args": [
            {
              "name": "relativePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "relativePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 193,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalRouteActivated",
          "args": [
            {
              "name": "modalRouteActivated$",
              "type": "Observable<ModalRouteActivation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "modalRouteActivated$",
              "type": "Observable<ModalRouteActivation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onModalRouteDeactivated",
          "args": [
            {
              "name": "modalRouteDeactivated$",
              "type": "Observable<boolean>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "modalRouteDeactivated$",
              "type": "Observable<boolean>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerPresentingElement",
          "args": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToBottom",
          "args": [
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174,
          "deprecated": true,
          "deprecationMessage": "Will be removed in next major version. Inject Modal in embedded component and use Modal.scrollToBottom instead.",
          "rawdescription": "\n\n",
          "description": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToTop",
          "args": [
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160,
          "deprecated": true,
          "deprecationMessage": "Will be removed in next major version. Inject Modal in embedded component and use Modal.scrollToTop instead.",
          "rawdescription": "\n\n",
          "description": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showActionSheet",
          "args": [
            {
              "name": "config",
              "type": "ActionSheetConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ActionSheetConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showAlert",
          "args": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "result",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 119,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "AlertConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "result",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showAndRegisterOverlay",
          "args": [
            {
              "name": "showOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            },
            {
              "name": "onCloseOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ]
            },
            {
              "name": "onWillCloseOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 123,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "showOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onCloseOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onWillCloseOverlay",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showModal",
          "args": [
            {
              "name": "config",
              "type": "ModalConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ModalConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showModalRoute",
          "args": [
            {
              "name": "modalRoute",
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "siblingModalRouteActivated$",
              "type": "Observable<ActivatedRoute>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onWillClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "modalRoute",
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "siblingModalRouteActivated$",
              "type": "Observable<ActivatedRoute>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onWillClose",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "data",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "optional": true
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { ActivatedRoute, Params, Routes, ROUTES } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\nimport { ActionSheetConfig } from '../action-sheet/config/action-sheet-config';\nimport { AlertConfig } from '../alert/config/alert-config';\nimport { ModalConfig } from '../modal-wrapper/config/modal-config';\n\nimport { ActionSheetHelper } from './action-sheet.helper';\nimport { AlertHelper } from './alert.helper';\nimport { ModalNavigationService } from './modal-navigation.service';\nimport { ModalHelper } from './modal.helper';\nimport { ModalRouteActivation, Overlay } from './modal.interfaces';\n\n@Injectable()\nexport class ModalController implements OnDestroy {\n  private overlays: Overlay[] = [];\n  private readonly noOverlayRegisteredErrorMessage = 'No modal overlays are currently registered';\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private modalHelper: ModalHelper,\n    private actionSheetHelper: ActionSheetHelper,\n    private alertHelper: AlertHelper,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @Inject(ROUTES) private routeConfig: Routes[]\n  ) {}\n\n  async initialize(moduleRootRoutePath?: string) {\n    const modalNavigation = await this.modalNavigationService.getModalNavigation(\n      this.routeConfig,\n      moduleRootRoutePath\n    );\n    this.onModalRouteActivated(modalNavigation.activated$);\n    this.onModalRouteDeactivated(modalNavigation.deactivated$); // TODO: Do we want to close modal when routing out of modal route? Or should the code that navigates close the window??\n  }\n\n  private onModalRouteActivated(modalRouteActivated$: Observable<ModalRouteActivation>) {\n    const navigateOnWillClose = () => {\n      this.modalNavigationService.navigateOutOfModalOutlet();\n    };\n    const siblingModalRouteActivated$ = modalRouteActivated$.pipe(\n      filter((modalRouteActivation) => !modalRouteActivation.isNewModal),\n      map((modalRouteActivation) => modalRouteActivation.route)\n    );\n\n    modalRouteActivated$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(() => this.overlays.length === 0)\n      )\n      .subscribe(async (modalRouteActivation) => {\n        if (modalRouteActivation.isNewModal) {\n          await this.showModalRoute(\n            modalRouteActivation.route,\n            siblingModalRouteActivated$,\n            navigateOnWillClose\n          );\n        }\n      });\n  }\n\n  private onModalRouteDeactivated(modalRouteDeactivated$: Observable<boolean>) {\n    modalRouteDeactivated$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(() => this.overlays.length > 0) // TODO: This also fires when closing overlay - should we check for isClosing??\n      )\n      .subscribe(async () => {\n        await this.hideAll();\n      });\n  }\n\n  public async showModal(config: ModalConfig, onClose?: (data?: any) => void): Promise<void> {\n    if (config.hasOwnProperty('dim')) {\n      console.warn('ModalConfig.dim is deprecated - please remove from your configuration.');\n    }\n    await this.showAndRegisterOverlay(() => this.modalHelper.showModalWindow(config), onClose);\n  }\n\n  public async navigateToModal(path: string | string[], queryParams?: Params): Promise<boolean> {\n    return this.modalNavigationService.navigateToModal(path, queryParams);\n  }\n\n  public async navigateWithinModal(relativePath: string, queryParams?: Params): Promise<boolean> {\n    return this.modalNavigationService.navigateWithinModal(relativePath, queryParams);\n  }\n\n  private async showModalRoute(\n    modalRoute: ActivatedRoute,\n    siblingModalRouteActivated$: Observable<ActivatedRoute>,\n    onWillClose: (data?: any) => void\n  ): Promise<void> {\n    const config: ModalConfig = {\n      component: null,\n      modalRoute: modalRoute,\n      siblingModalRouteActivated$: siblingModalRouteActivated$,\n      flavor: 'modal', // Todo: Should it be possible to specify flavor as data in RouteConfig?\n    };\n    await this.showAndRegisterOverlay(\n      () => this.modalHelper.showModalWindow(config),\n      null,\n      onWillClose\n    );\n  }\n\n  public async showActionSheet(\n    config: ActionSheetConfig,\n    onClose?: (data?: any) => void\n  ): Promise<void> {\n    await this.showAndRegisterOverlay(\n      () => this.actionSheetHelper.showActionSheet(config),\n      onClose\n    );\n  }\n\n  public async showAlert(config: AlertConfig, onClose?: (result: boolean) => void): Promise<void> {\n    await this.showAndRegisterOverlay(() => this.alertHelper.showAlert(config), onClose);\n  }\n\n  private async showAndRegisterOverlay(\n    showOverlay: () => Promise<Overlay>,\n    onCloseOverlay?: (data?: any) => void,\n    onWillCloseOverlay?: (data?: any) => void\n  ) {\n    const overlay = await showOverlay();\n    if (!overlay) return;\n\n    this.overlays.push(overlay);\n\n    if (typeof onWillCloseOverlay === 'function') {\n      overlay.onWillDismiss.then((event) => onWillCloseOverlay(event.data));\n    }\n\n    overlay.onDidDismiss.then((event) => {\n      this.overlays.pop();\n      if (typeof onCloseOverlay === 'function') {\n        onCloseOverlay(event.data);\n      }\n    });\n  }\n\n  public registerPresentingElement(element: HTMLElement) {\n    this.modalHelper.registerPresentingElement(element);\n  }\n\n  public async hideTopmost(data?: any): Promise<boolean> {\n    const overlay = this.overlays[this.overlays.length - 1];\n    if (!overlay) {\n      throw new Error(this.noOverlayRegisteredErrorMessage);\n    }\n    return overlay.dismiss(data);\n  }\n\n  /**\n   * @deprecated Will be removed in next major version. Inject Modal in embedded component and use Modal.scrollToTop instead.\n   */\n  public scrollToTop(duration?: KirbyAnimation.Duration) {\n    console.warn(\n      'ModalController.scrollToTop is deprecated - please inject Modal in embedded component and use Modal.scrollToTop instead.'\n    );\n    const overlay = this.overlays[this.overlays.length - 1];\n    if (!overlay) {\n      throw new Error(this.noOverlayRegisteredErrorMessage);\n    }\n    this.modalHelper.scrollToTop(this.noOverlayRegisteredErrorMessage, duration);\n  }\n\n  /**\n   * @deprecated Will be removed in next major version. Inject Modal in embedded component and use Modal.scrollToBottom instead.\n   */\n  public scrollToBottom(duration?: KirbyAnimation.Duration) {\n    console.warn(\n      'ModalController.scrollToBottom is deprecated - please inject Modal in embedded component and use Modal.scrollToBottom instead.'\n    );\n    const overlay = this.overlays[this.overlays.length - 1];\n    if (!overlay) {\n      throw new Error(this.noOverlayRegisteredErrorMessage);\n    }\n    this.modalHelper.scrollToBottom(this.noOverlayRegisteredErrorMessage, duration);\n  }\n\n  public async hideAll(): Promise<void> {\n    await Promise.all(\n      this.overlays.map(async (overlay) => {\n        await overlay.dismiss();\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalHelper",
            "type": "ModalHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "actionSheetHelper",
            "type": "ActionSheetHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "alertHelper",
            "type": "AlertHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "routeConfig",
            "type": "Routes[]",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "modalHelper",
            "type": "ModalHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "actionSheetHelper",
            "type": "ActionSheetHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "alertHelper",
            "type": "AlertHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "routeConfig",
            "type": "Routes[]",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ModalHelper",
      "id": "injectable-ModalHelper-a0451940e3234d68288360cd1d551331",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.helper.ts",
      "properties": [
        {
          "name": "presentingElement",
          "defaultValue": "undefined",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121, 124]
        }
      ],
      "methods": [
        {
          "name": "getPresentingElement",
          "args": [
            {
              "name": "flavor",
              "type": "ModalFlavor",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "flavor",
              "type": "ModalFlavor",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerPresentingElement",
          "args": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToBottom",
          "args": [
            {
              "name": "noModalRegisteredErrorMessage",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 118,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "noModalRegisteredErrorMessage",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToTop",
          "args": [
            {
              "name": "noModalRegisteredErrorMessage",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "noModalRegisteredErrorMessage",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showModalWindow",
          "args": [
            {
              "name": "config",
              "type": "ModalConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<Overlay>",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ModalConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\nimport { WindowRef } from '../../../types/window-ref';\nimport { ModalCompactWrapperComponent } from '../modal-wrapper/compact/modal-compact-wrapper.component';\nimport { ModalConfig, ModalFlavor, ModalSize } from '../modal-wrapper/config/modal-config';\nimport { ModalWrapperComponent } from '../modal-wrapper/modal-wrapper.component';\n\nimport { ModalAnimationBuilderService } from './modal-animation-builder.service';\nimport { Overlay } from './modal.interfaces';\n\n@Injectable()\nexport class ModalHelper {\n  // TODO: Make presentingElement an instance field when\n  // forRoot()/singleton services has been solved:\n  private static presentingElement: HTMLElement = undefined;\n\n  constructor(\n    private ionicModalController: ModalController,\n    private modalAnimationBuilder: ModalAnimationBuilderService,\n    private windowRef: WindowRef\n  ) {}\n\n  public async showModalWindow(config: ModalConfig): Promise<Overlay> {\n    config.flavor = config.flavor || 'modal';\n    const modalPresentingElement = await this.getPresentingElement(config.flavor);\n\n    let currentBackdrop: HTMLIonBackdropElement;\n    const topMostModal = await this.ionicModalController.getTop();\n    if (topMostModal) {\n      currentBackdrop = topMostModal.querySelector<HTMLIonBackdropElement>('ion-backdrop');\n    }\n\n    const enterAnimation = this.modalAnimationBuilder.enterAnimation(currentBackdrop);\n    const leaveAnimation = this.modalAnimationBuilder.leaveAnimation(currentBackdrop);\n\n    const defaultModalSize: ModalSize = config.flavor === 'modal' ? 'medium' : null;\n    const modalSize = config.size || defaultModalSize;\n    const allow_scroll_class = 'allow-background-scroll';\n\n    let customCssClasses = [];\n    if (config.cssClass) {\n      customCssClasses = Array.isArray(config.cssClass) ? config.cssClass : [config.cssClass];\n    }\n\n    if (config.interactWithBackground) {\n      this.windowRef.nativeWindow.document.body.classList.add(allow_scroll_class);\n    }\n\n    const ionModal = await this.ionicModalController.create({\n      component: config.flavor === 'compact' ? ModalCompactWrapperComponent : ModalWrapperComponent,\n      cssClass: [\n        'kirby-overlay',\n        'kirby-modal',\n        config.flavor === 'drawer' ? 'kirby-drawer' : null,\n        config.flavor === 'compact' ? 'kirby-modal-compact' : null,\n        'kirby-modal-' + modalSize,\n        config.interactWithBackground ? 'interact-with-background' : null,\n        ...customCssClasses,\n      ],\n      backdropDismiss: config.flavor === 'compact' || config.interactWithBackground ? false : true,\n      showBackdrop: !config.interactWithBackground,\n      componentProps: { config: config },\n      swipeToClose: config.flavor != 'compact',\n      presentingElement: modalPresentingElement,\n      keyboardClose: false,\n      enterAnimation,\n      leaveAnimation,\n    });\n\n    if (config.interactWithBackground) {\n      ionModal.onDidDismiss().then(() => {\n        this.windowRef.nativeWindow.document.body.classList.remove(allow_scroll_class);\n      });\n    }\n\n    await ionModal.present();\n\n    return {\n      dismiss: ionModal.dismiss.bind(ionModal),\n      onWillDismiss: ionModal.onWillDismiss(),\n      onDidDismiss: ionModal.onDidDismiss(),\n    };\n  }\n\n  public registerPresentingElement(element: HTMLElement) {\n    ModalHelper.presentingElement = element;\n  }\n\n  private async getPresentingElement(flavor?: ModalFlavor) {\n    let modalPresentingElement: HTMLElement = undefined;\n    if (!flavor || flavor === 'modal') {\n      const topMostModal = await this.ionicModalController.getTop();\n      if (!topMostModal) {\n        modalPresentingElement = ModalHelper.presentingElement;\n      } else if (\n        !topMostModal.classList.contains('kirby-drawer') &&\n        !topMostModal.classList.contains('kirby-modal-compact')\n      ) {\n        modalPresentingElement = topMostModal;\n      }\n    }\n    return modalPresentingElement;\n  }\n\n  public async scrollToTop(\n    noModalRegisteredErrorMessage: string,\n    duration?: KirbyAnimation.Duration\n  ) {\n    const modal = await this.ionicModalController.getTop();\n    if (!modal || !(modal.component instanceof ModalWrapperComponent)) {\n      throw new Error(noModalRegisteredErrorMessage);\n    }\n    modal.component.scrollToTop(duration);\n  }\n\n  public async scrollToBottom(\n    noModalRegisteredErrorMessage: string,\n    duration?: KirbyAnimation.Duration\n  ) {\n    const modal = await this.ionicModalController.getTop();\n    if (!modal || !(modal.component instanceof ModalWrapperComponent)) {\n      throw new Error(noModalRegisteredErrorMessage);\n    }\n    modal.component.scrollToBottom(duration);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "modalAnimationBuilder",
            "type": "ModalAnimationBuilderService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "ionicModalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "modalAnimationBuilder",
            "type": "ModalAnimationBuilderService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ModalNavigationService",
      "id": "injectable-ModalNavigationService-8ab33464a38ecedb57d90c890765a769",
      "file": "libs/designsystem/src/lib/components/modal/services/modal-navigation.service.ts",
      "properties": [
        {
          "name": "navigationEndListener$",
          "defaultValue": "this.router.events.pipe(\n    filter((event): event is NavigationEnd => event instanceof NavigationEnd)\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 198,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "findChildRouteForUrl",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getBackdropRoute",
          "args": [
            {
              "name": "currentActivatedRoute",
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 326,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "currentActivatedRoute",
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCurrentActivatedRoute",
          "args": [],
          "optional": false,
          "returnType": "ActivatedRoute",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getCurrentRoutePaths",
          "args": [],
          "optional": false,
          "returnType": "Promise<string[]>",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130]
        },
        {
          "name": "getModalNavigation",
          "args": [
            {
              "name": "routeConfig",
              "type": "Routes[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 270,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "routeConfig",
              "type": "Routes[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModalRoutePath",
          "args": [
            {
              "name": "route",
              "type": "Route",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "route",
              "type": "Route",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModalRoutePaths",
          "args": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 171,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModalRoutes",
          "args": [
            {
              "name": "routeConfig",
              "type": "Routes[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<string[]>",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "routeConfig",
              "type": "Routes[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModuleRootPath",
          "args": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<string[]>",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "moduleRootRoutePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRoutePath",
          "args": [
            {
              "name": "route",
              "type": "Route",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "route",
              "type": "Route",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRoutePaths",
          "args": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parentPath",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRoutePathsWithoutChildSegments",
          "args": [
            {
              "name": "routePaths",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "routePaths",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "routes",
              "type": "Routes",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isModalRoute",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isNewModalWindow",
          "args": [
            {
              "name": "navigationEnd",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 177,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "navigationEnd",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "modalRouteActivatedFor",
          "args": [
            {
              "name": "navigationEnd$",
              "type": "Observable<NavigationEnd>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<ModalRouteActivation>",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "navigationEnd$",
              "type": "Observable<NavigationEnd>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "modalRouteDeactivatedFor",
          "args": [
            {
              "name": "navigationEnd$",
              "type": "Observable<NavigationEnd>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 226,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "navigationEnd$",
              "type": "Observable<NavigationEnd>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "modalRouteSetContainsPath",
          "args": [
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "navigationEnd",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 245,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "modalRouteSet",
              "type": "Set<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "navigationEnd",
              "type": "NavigationEnd",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "modalRoutesContainsUrlParams",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "navigateOutOfModalOutlet",
          "args": [],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 314,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130]
        },
        {
          "name": "navigateToModal",
          "args": [
            {
              "name": "path",
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 297,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "navigateWithinModal",
          "args": [
            {
              "name": "relativePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 307,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "relativePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "queryParams",
              "type": "Params",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pathContainsChildRouteWithUrlParams",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "childRouteWithUrlParams",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "exactMatch",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "childRouteWithUrlParams",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exactMatch",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "waitForCurrentThenGetNavigationEndStream",
          "args": [],
          "optional": false,
          "returnType": "Promise<Observable<NavigationEnd>>",
          "typeParameters": [],
          "line": 202,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Params, Route, Router, Routes } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, first, map, pairwise, startWith } from 'rxjs/operators';\n\nimport { ModalRouteActivation } from './modal.interfaces';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalNavigationService {\n  constructor(private router: Router, private route: ActivatedRoute) {}\n\n  isModalRoute(url: string): boolean {\n    return url.includes('(modal:');\n  }\n\n  private getCurrentActivatedRoute(): ActivatedRoute {\n    let childRoute = this.route.root;\n    while (childRoute.firstChild) {\n      childRoute = childRoute.firstChild;\n    }\n    return childRoute;\n  }\n\n  private async getModalRoutes(\n    routeConfig: Routes[],\n    moduleRootRoutePath?: string\n  ): Promise<string[]> {\n    const flattenedRoutes: Routes = [].concat(...routeConfig);\n    let modalRoutes: string[] = [];\n    const moduleRootPaths = await this.getModuleRootPath(flattenedRoutes, moduleRootRoutePath);\n    if (moduleRootPaths) {\n      modalRoutes = this.getModalRoutePaths(flattenedRoutes, moduleRootPaths);\n    }\n    return modalRoutes;\n  }\n\n  private async getModuleRootPath(routes: Routes, moduleRootRoutePath?: string): Promise<string[]> {\n    if (moduleRootRoutePath) {\n      const trimmedPaths = moduleRootRoutePath\n        .trim()\n        .split('/')\n        .filter((path) => !!path);\n      const rootPath = [''];\n      return rootPath.concat(trimmedPaths);\n    }\n\n    const currentRoutePaths = await this.getCurrentRoutePaths();\n    const moduleRootPaths = this.getRoutePathsWithoutChildSegments(currentRoutePaths, routes);\n    return moduleRootPaths;\n  }\n\n  private async getCurrentRoutePaths(): Promise<string[]> {\n    const rootPath = [''];\n    const currentNavigation = this.router.getCurrentNavigation();\n\n    if (!this.router.navigated && !currentNavigation) {\n      // If router hasn't navigated yet and we are not in the middle of navigating, assume root:\n      return rootPath;\n    }\n\n    if (currentNavigation) {\n      // Wait for current navigation to finish:\n      await this.navigationEndListener$.pipe(first()).toPromise();\n    }\n\n    let childRoute = this.route.snapshot.root;\n    while (childRoute.firstChild) {\n      childRoute = childRoute.firstChild;\n    }\n    const currentBackdropRoutePath = childRoute.pathFromRoot.filter(\n      (route) => route.outlet !== 'modal'\n    );\n\n    return rootPath.concat(\n      ...currentBackdropRoutePath.map((route) =>\n        route.url.filter((segment) => !!segment.path).map((segment) => segment.path)\n      )\n    );\n  }\n\n  private getRoutePathsWithoutChildSegments(routePaths: string[], routes: Routes): string[] {\n    if (!routePaths.length) return routePaths;\n\n    const matchedChildRoute = this.findChildRouteForUrl(routePaths.join('/'), routes);\n\n    if (!matchedChildRoute) return routePaths;\n\n    const startSlashRegex = /^\\//;\n    const relativeChildRoute = matchedChildRoute.replace(startSlashRegex, '');\n    const childSegmentCount = relativeChildRoute.split('/').length;\n    const routePathsWithoutChildSegments = routePaths.slice(0, -childSegmentCount); // Remove child segments from end of route path array\n    return routePathsWithoutChildSegments;\n  }\n\n  private findChildRouteForUrl(url: string, routes: Routes) {\n    const moduleRelativePaths = this.getRoutePaths(routes, [''])\n      .sort()\n      .reverse(); // Ensure child paths are evaluated first\n    let matchedChildRoute = moduleRelativePaths.find((path) => url.endsWith(path));\n    if (!matchedChildRoute) {\n      // No static child route found matching current route - look for child route with url params:\n      const exactMatch = false;\n      matchedChildRoute = moduleRelativePaths.find(\n        (path) =>\n          path.includes('/:') && this.pathContainsChildRouteWithUrlParams(url, path, exactMatch)\n      );\n    }\n    return matchedChildRoute;\n  }\n\n  private pathContainsChildRouteWithUrlParams(\n    path: string,\n    childRouteWithUrlParams: string,\n    exactMatch: boolean\n  ) {\n    const pathSegments = path.split('/');\n    const startSlashRegex = /^\\//;\n    let childRouteToMatch = childRouteWithUrlParams;\n    if (!exactMatch) {\n      const relativeChildRoute = childRouteWithUrlParams.replace(startSlashRegex, '');\n      childRouteToMatch = relativeChildRoute;\n    }\n    const childRouteSegments = childRouteToMatch.split('/');\n    // Match each child route segment against url\n    // Match backwards from end to start of child route, i.e. \"url ends with child route\":\n    const pathContainsChildRoute = childRouteSegments.reverse().every((childRouteSegment) => {\n      const pathSegment = pathSegments.pop();\n      // url params (e.g. `/:id/`) are treated as a match:\n      return childRouteSegment.startsWith(':') || childRouteSegment === pathSegment;\n    });\n    if (exactMatch) {\n      // Only match if we've reached the start of the url to match against:\n      return pathSegments.length === 0 && pathContainsChildRoute;\n    }\n    return pathContainsChildRoute;\n  }\n\n  private getRoutePaths(routes: Routes, parentPath: string[]): string[] {\n    return Array.isArray(routes)\n      ? ([] as string[]).concat(...routes.map((route) => this.getRoutePath(route, parentPath)))\n      : [];\n  }\n\n  private getRoutePath(route: Route, parentPath: string[]): string[] {\n    const routes: string[] = [];\n    if (!!route.outlet) return routes; // Don't return relative paths for outlet routes\n\n    const currentPath = [...parentPath];\n    if (!!route.path) {\n      currentPath.push(route.path);\n      routes.push(currentPath.join('/'));\n    }\n\n    return routes.concat(this.getRoutePaths(route.children, currentPath));\n  }\n\n  private getModalRoutePath(route: Route, parentPath: string[]): string[] {\n    const modalOutletName = 'modal';\n    if (!!route.path && route.outlet === modalOutletName) {\n      const modalOutletPath = `(${modalOutletName}:${route.path})`;\n      const modalRoutePath = [...parentPath, modalOutletPath].join('/');\n      return [modalRoutePath];\n    }\n    const currentPath = [...parentPath];\n    if (!!route.path) {\n      currentPath.push(route.path);\n    }\n    return ([] as string[]).concat(...this.getModalRoutePaths(route.children, currentPath));\n  }\n\n  private getModalRoutePaths(routes: Routes, parentPath: string[]): string[] {\n    return Array.isArray(routes)\n      ? ([] as string[]).concat(...routes.map((route) => this.getModalRoutePath(route, parentPath)))\n      : [];\n  }\n\n  private isNewModalWindow(navigationEnd: NavigationEnd): boolean {\n    const currentNavigation = this.router.getCurrentNavigation();\n    if (!currentNavigation || !currentNavigation.previousNavigation) {\n      return true;\n    }\n    const previousRoutePath = (\n      currentNavigation.previousNavigation.finalUrl ||\n      currentNavigation.previousNavigation.extractedUrl\n    ).toString();\n    const wasModalRoute = this.isModalRoute(previousRoutePath);\n    const isModalRoute = this.isModalRoute(navigationEnd.urlAfterRedirects);\n    if (!wasModalRoute && isModalRoute) {\n      return true;\n    }\n\n    const currentModalRouteParent = navigationEnd.urlAfterRedirects.split('/(modal:')[0];\n    const previousModalRouteParent = previousRoutePath.split('/(modal:')[0];\n\n    return previousModalRouteParent !== currentModalRouteParent;\n  }\n\n  private navigationEndListener$ = this.router.events.pipe(\n    filter((event): event is NavigationEnd => event instanceof NavigationEnd)\n  );\n\n  private async waitForCurrentThenGetNavigationEndStream(): Promise<Observable<NavigationEnd>> {\n    if (this.router.getCurrentNavigation()) {\n      const currentNavigationEnd = await this.navigationEndListener$.pipe(first()).toPromise();\n      return this.navigationEndListener$.pipe(startWith(currentNavigationEnd));\n    }\n    return this.navigationEndListener$;\n  }\n\n  private modalRouteActivatedFor(\n    navigationEnd$: Observable<NavigationEnd>,\n    modalRouteSet: Set<string>,\n    modalRoutesContainsUrlParams: boolean\n  ): Observable<ModalRouteActivation> {\n    return navigationEnd$.pipe(\n      filter((navigationEnd) =>\n        this.modalRouteSetContainsPath(modalRouteSet, navigationEnd, modalRoutesContainsUrlParams)\n      ),\n      map((navigationEnd) => ({\n        route: this.getCurrentActivatedRoute(),\n        isNewModal: this.isNewModalWindow(navigationEnd),\n      }))\n    );\n  }\n\n  private modalRouteDeactivatedFor(\n    navigationEnd$: Observable<NavigationEnd>,\n    modalRouteSet: Set<string>,\n    modalRoutesContainsUrlParams: boolean\n  ): Observable<boolean> {\n    return navigationEnd$.pipe(\n      pairwise(),\n      filter(([prevNavigation, _]) =>\n        this.modalRouteSetContainsPath(modalRouteSet, prevNavigation, modalRoutesContainsUrlParams)\n      ), // Only emit if previous route was modal\n      map(([_, currentNavigation]) => {\n        const isNewModalRoute = this.isModalRoute(currentNavigation.urlAfterRedirects);\n        // Deactivate modal route if new route is NOT modal OR is outside current parent route:\n        return !isNewModalRoute || this.isNewModalWindow(currentNavigation);\n      }),\n      filter((isDeactivation) => isDeactivation)\n    );\n  }\n\n  private modalRouteSetContainsPath(\n    modalRouteSet: Set<string>,\n    navigationEnd: NavigationEnd,\n    modalRoutesContainsUrlParams: boolean\n  ) {\n    const pathname = navigationEnd.urlAfterRedirects.split('?')[0];\n    let hasRoute = modalRouteSet.has(pathname);\n    if (!hasRoute && modalRoutesContainsUrlParams) {\n      // Use `for ... of` instead of `forEach` so we can break out of the loop if route is found:\n      for (let route of modalRouteSet) {\n        const exactMatch = true;\n        const routeMatchesPath = this.pathContainsChildRouteWithUrlParams(\n          pathname,\n          route,\n          exactMatch\n        );\n        if (routeMatchesPath) {\n          hasRoute = true;\n          break;\n        }\n      }\n    }\n    return hasRoute;\n  }\n\n  async getModalNavigation(\n    routeConfig: Routes[],\n    moduleRootRoutePath?: string\n  ): Promise<{ activated$: Observable<ModalRouteActivation>; deactivated$: Observable<boolean> }> {\n    if (Array.isArray(routeConfig)) {\n      const navigationEnd$ = await this.waitForCurrentThenGetNavigationEndStream();\n      const modalRoutes = await this.getModalRoutes(routeConfig, moduleRootRoutePath);\n      const hasModalRoutes = modalRoutes.length > 0;\n      if (hasModalRoutes) {\n        const modalRoutesContainsUrlParams = modalRoutes.some((route) => route.includes('/:'));\n        const modalRouteSet = new Set(modalRoutes);\n        const activated$ = this.modalRouteActivatedFor(\n          navigationEnd$,\n          modalRouteSet,\n          modalRoutesContainsUrlParams\n        );\n        const deactivated$ = this.modalRouteDeactivatedFor(\n          navigationEnd$,\n          modalRouteSet,\n          modalRoutesContainsUrlParams\n        );\n        return { activated$, deactivated$ };\n      }\n    }\n    return { activated$: EMPTY, deactivated$: EMPTY };\n  }\n\n  async navigateToModal(path: string | string[], queryParams?: Params): Promise<boolean> {\n    const commands = Array.isArray(path) ? path : path.split('/');\n    const childPath = commands.pop();\n    const result = await this.router.navigate([...commands, { outlets: { modal: [childPath] } }], {\n      queryParams,\n      relativeTo: this.getCurrentActivatedRoute(),\n    });\n    return result;\n  }\n\n  async navigateWithinModal(relativePath: string, queryParams?: Params): Promise<boolean> {\n    return this.router.navigate([relativePath], {\n      queryParams,\n      relativeTo: this.getCurrentActivatedRoute(),\n    });\n  }\n\n  async navigateOutOfModalOutlet(): Promise<boolean> {\n    let result = Promise.resolve(true);\n    const currentActivatedRoute = this.getCurrentActivatedRoute();\n    if (currentActivatedRoute.outlet === 'modal') {\n      const parentRoute = this.getBackdropRoute(currentActivatedRoute);\n      result = this.router.navigate(['./'], {\n        relativeTo: parentRoute,\n      });\n    }\n    return result;\n  }\n\n  private getBackdropRoute(currentActivatedRoute: ActivatedRoute) {\n    let parentRoute = currentActivatedRoute.parent;\n    while (parentRoute && !parentRoute.component && !!parentRoute.parent) {\n      parentRoute = parentRoute.parent;\n    }\n    return parentRoute;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PlatformService",
      "id": "injectable-PlatformService-66b650a685c9a72e58750b3b5f91fe07",
      "file": "libs/designsystem/src/lib/helpers/platform.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "isPhabletOrBigger",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "isTouch",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { DesignTokenHelper } from '@kirbydesign/core';\n\nimport { WindowRef } from '../types/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlatformService {\n  constructor(private windowRef: WindowRef) {}\n\n  isTouch() {\n    const isTouchDeviceQuery = '(pointer: coarse)'; // No check for `hover: none`, as Samsung Galaxy will return false on `hover: none` media query\n    return this.windowRef.nativeWindow.matchMedia(isTouchDeviceQuery).matches;\n  }\n\n  isPhabletOrBigger() {\n    const query = `(min-width: ${DesignTokenHelper.breakpoints.medium})`;\n    return this.windowRef.nativeWindow.matchMedia(query).matches;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ResizeObserverFactory",
      "id": "injectable-ResizeObserverFactory-38a41a45c8760279a538aa79c820d66d",
      "file": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts",
      "properties": [],
      "methods": [
        {
          "name": "create",
          "args": [
            {
              "name": "callback",
              "type": "ResizeObserverCallback",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ResizeObserver | null",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "callback",
              "type": "ResizeObserverCallback",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.</p>\n",
      "rawdescription": "\n\nFactory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ResizeObserver } from './types/resize-observer';\nimport { ResizeObserverCallback } from './types/resize-observer-callback';\n\ndeclare var ResizeObserver: {\n  prototype: ResizeObserver;\n  new (callback: ResizeObserverCallback): ResizeObserver;\n};\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({ providedIn: 'root' })\nexport class ResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ResizeObserverService",
      "id": "injectable-ResizeObserverService-b0256b58ed83820c84b2b2524a12cdee",
      "file": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.service.ts",
      "properties": [
        {
          "name": "observedElements",
          "defaultValue": "new WeakMap<Element, (entry: ResizeObserverEntry) => void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        },
        {
          "name": "observer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ResizeObserver | null",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "handleResize",
          "args": [
            {
              "name": "entries",
              "type": "ResizeObserverEntry[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "entries",
              "type": "ResizeObserverEntry[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observe",
          "args": [
            {
              "name": "elementOrRef",
              "type": "Element | ElementRef<Element>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "entry",
                  "type": "ResizeObserverEntry",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "elementOrRef",
              "type": "Element | ElementRef<Element>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "entry",
                  "type": "ResizeObserverEntry",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unobserve",
          "args": [
            {
              "name": "elementOrRef",
              "type": "Element | ElementRef<Element>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "elementOrRef",
              "type": "Element | ElementRef<Element>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ElementRef, Injectable, OnDestroy, NgZone } from '@angular/core';\n\nimport { ResizeObserver } from './types/resize-observer';\nimport { ResizeObserverEntry } from './types/resize-observer-entry';\nimport { ResizeObserverFactory } from './resize-observer.factory';\n\n@Injectable({ providedIn: 'root' })\nexport class ResizeObserverService implements OnDestroy {\n  // IMPORTANT: Keeps track of the existing ResizeObserver so it can be reused for performance.\n  // See: https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/z6ienONUb5A/F5-VcUZtBAAJ\n  private observer: ResizeObserver | null;\n  private observedElements = new WeakMap<Element, (entry: ResizeObserverEntry) => void>();\n\n  constructor(private _resizeObserverFactory: ResizeObserverFactory, private zone: NgZone) {\n    this.observer = this._resizeObserverFactory.create((entries) => this.handleResize(entries));\n  }\n\n  observe(\n    elementOrRef: Element | ElementRef<Element>,\n    action: (entry: ResizeObserverEntry) => void\n  ): void {\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    if (!this.observedElements.has(element)) {\n      if (this.observer) {\n        // IMPORTANT: Has to be run outside the Angular zone, for it to work with ResizeObserver polyfill:\n        this.zone.runOutsideAngular(() => {\n          this.observer.observe(element);\n        });\n      }\n      this.observedElements.set(element, action);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.observer) {\n      // IMPORTANT: Has to be run outside the Angular zone, for it to work with ResizeObserver polyfill:\n      this.zone.runOutsideAngular(() => {\n        this.observer.disconnect();\n      });\n    }\n    this.observedElements = null;\n  }\n\n  unobserve(elementOrRef: Element | ElementRef<Element>) {\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    if (this.observedElements.has(element)) {\n      if (this.observer) {\n        // IMPORTANT: Has to be run outside the Angular zone, for it to work with ResizeObserver polyfill:\n        this.zone.runOutsideAngular(() => {\n          this.observer.unobserve(element);\n        });\n      }\n      this.observedElements.delete(element);\n    }\n  }\n\n  private handleResize(entries: ResizeObserverEntry[]) {\n    entries.forEach((entry) => {\n      const action = this.observedElements.get(entry.target);\n      if (action) {\n        action(entry);\n      }\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_resizeObserverFactory",
            "type": "ResizeObserverFactory",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "_resizeObserverFactory",
            "type": "ResizeObserverFactory",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "TabsService",
      "id": "injectable-TabsService-2b047e9e00a66c38778dcbb8d427e012",
      "file": "libs/designsystem/src/lib/components/tabs/tabs.service.ts",
      "properties": [
        {
          "name": "outlet$",
          "defaultValue": "this.outletSubject$.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        },
        {
          "name": "outletSubject$",
          "defaultValue": "new ReplaySubject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ReplaySubject<IonRouterOutlet>",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "setOutlet",
          "args": [
            {
              "name": "outlet",
              "type": "IonRouterOutlet",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "outlet",
              "type": "IonRouterOutlet",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { IonRouterOutlet } from '@ionic/angular';\nimport { ReplaySubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabsService {\n  private outletSubject$: ReplaySubject<IonRouterOutlet> = new ReplaySubject();\n  public outlet$ = this.outletSubject$.asObservable();\n\n  public setOutlet(outlet: IonRouterOutlet) {\n    this.outletSubject$.next(outlet);\n  }\n}\n\nexport { IonRouterOutlet };\n",
      "type": "injectable"
    },
    {
      "name": "ToastController",
      "id": "injectable-ToastController-fa753270010dff4897cec5f80d1217d6",
      "file": "libs/designsystem/src/lib/components/toast/services/toast.controller.ts",
      "properties": [],
      "methods": [
        {
          "name": "showToast",
          "args": [
            {
              "name": "config",
              "type": "ToastConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onCloseToast",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ToastConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onCloseToast",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { ToastConfig } from '../config/toast-config';\n\nimport { ToastHelper } from './toast.helper';\n\n@Injectable()\nexport class ToastController {\n  constructor(private toastHelper: ToastHelper) {}\n\n  public showToast(config: ToastConfig, onCloseToast?: () => void) {\n    this.toastHelper.showToast(config).then((overlay) => {\n      if (onCloseToast) {\n        overlay.onDidDismiss.then(() => onCloseToast());\n      }\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "toastHelper",
            "type": "ToastHelper",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "toastHelper",
            "type": "ToastHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ToastHelper",
      "id": "injectable-ToastHelper-60038044990bb0a1e91132884e2100fa",
      "file": "libs/designsystem/src/lib/components/toast/services/toast.helper.ts",
      "properties": [
        {
          "name": "CSS_CLASS",
          "defaultValue": "'kirby-toast'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [124]
        },
        {
          "name": "DURATION_IN_MS",
          "defaultValue": "4000",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "getCssClass",
          "args": [
            {
              "name": "messageType",
              "type": "MessageType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "messageType",
              "type": "MessageType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showToast",
          "args": [
            {
              "name": "config",
              "type": "ToastConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<Overlay>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 130],
          "jsdoctags": [
            {
              "name": "config",
              "type": "ToastConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\n\nimport { Overlay } from '../../modal/services/modal.interfaces';\nimport { MessageType, ToastConfig } from '../config/toast-config';\n\n@Injectable()\nexport class ToastHelper {\n  static CSS_CLASS = 'kirby-toast';\n  static DURATION_IN_MS = 4000;\n\n  constructor(private toastController: ToastController) {}\n\n  public async showToast(config: ToastConfig): Promise<Overlay> {\n    const toast = await this.toastController.create({\n      animated: config.animated,\n      message: config.message,\n      position: 'top',\n      duration: config.durationInMs ? config.durationInMs : ToastHelper.DURATION_IN_MS,\n      cssClass: this.getCssClass(config.messageType),\n    });\n    await toast.present();\n    return {\n      dismiss: toast.dismiss.bind(toast),\n      onWillDismiss: toast.onWillDismiss(),\n      onDidDismiss: toast.onDidDismiss(),\n    };\n  }\n\n  private getCssClass(messageType: MessageType): string {\n    let cssClass = ToastHelper.CSS_CLASS;\n\n    if (messageType === 'danger') {\n      console.warn(\n        `[DEPRECATED] 'danger' message type is deprecated. Use Kirby Alerts for critical warnings. Toast will be shown as 'warning'`\n      );\n\n      messageType = 'warning';\n    }\n\n    if (messageType) {\n      cssClass += ' ' + messageType;\n    }\n\n    return cssClass;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "toastController",
            "type": "ToastController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "toastController",
            "type": "ToastController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "WindowRef",
      "id": "injectable-WindowRef-fbdad20e26519f6a07580d5128aa3992",
      "file": "libs/designsystem/src/lib/types/window-ref.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  get nativeWindow(): any {\n    return window;\n  }\n}\n",
      "accessors": {
        "nativeWindow": {
          "name": "nativeWindow",
          "getSignature": {
            "name": "nativeWindow",
            "type": "any",
            "returnType": "any",
            "line": 7
          }
        }
      },
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "DrawerSupplementaryAction",
      "id": "class-DrawerSupplementaryAction-e4b2c5096acad0c1f5649834b1bb8e9c",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/drawer-supplementary-action.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class DrawerSupplementaryAction {\n  iconName: string;\n  action: Function;\n}\n",
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Function",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "iconName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GridCard",
      "id": "class-GridCard-cbd7f0dd0574aa1591fbd91bb9ef0c85",
      "file": "libs/designsystem/src/lib/components/grid/grid.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ScssHelper } from '../../scss/scss-helper';\nimport { BreakpointHelperService } from './breakpoint-helper.service';\nimport { GridCardConfiguration } from './grid-card-configuration';\n\nclass GridCard {\n  configuration: GridCardConfiguration;\n  row: number;\n  col: number;\n  colSpan: number;\n\n  constructor(configuration: GridCardConfiguration, row: number, col: number, colSpan: number) {\n    this.configuration = configuration;\n    this.row = row;\n    this.col = col;\n    this.colSpan = colSpan;\n  }\n}\n\n@Component({\n  selector: 'kirby-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  // tslint:disable-next-line\n  host: { '[attr.max-columns]': 'maxColumns' },\n})\nexport class GridComponent implements OnInit, OnDestroy {\n  cardConfigs: GridCardConfiguration[];\n  cards: GridCard[] = [];\n  private breakpointSubscription: Subscription;\n\n  @Input() maxColumns: number;\n\n  @Input()\n  set cardConfigurations(cardConfigurations: GridCardConfiguration[]) {\n    this.cardConfigs = cardConfigurations;\n    // TODO TRM/JEO Remove this when breakpoint observe something something...\n    this.configureGrid();\n  }\n\n  constructor(private breakpointHelper: BreakpointHelperService) {}\n\n  configureGrid() {\n    let calculatedMaxColumns = 0;\n    if (this.maxColumns === undefined) {\n      calculatedMaxColumns =\n        this.breakpointHelper.currentScreenWidth >= ScssHelper.BREAKPOINT_SCREEN_L ? 2 : 1;\n    } else {\n      calculatedMaxColumns = this.maxColumns;\n    }\n    this.cards = [];\n    let columnCounter = 0;\n    let currentRow = 0;\n    let currentColumn = 0;\n\n    this.cardConfigs.forEach((card, index) => {\n      // Cards colspan is added to the column counter\n      columnCounter += card.preferredSize;\n      // If only maxColumns are set to 1, just add all cards with a colspan of 1\n      if (calculatedMaxColumns === 1) {\n        this.cards.push(new GridCard(card, currentRow, currentColumn, 1));\n        currentRow += 1;\n        return;\n      }\n      // If we are below maxColumns, then add the card to the array\n      if (columnCounter <= calculatedMaxColumns) {\n        this.cards.push(new GridCard(card, currentRow, currentColumn, card.preferredSize));\n        // Update currentColumn, so the next card will be placed correctly\n        currentColumn += card.preferredSize;\n      } else {\n        // The new card didn't fit - Calculate remaining columns for previous card\n        const restColumns = calculatedMaxColumns - (columnCounter - card.preferredSize);\n        const prevCard = this.cards[index - 1];\n        // Add the restColumns to the previous cards colspan, to make it span out\n        prevCard.colSpan = restColumns + prevCard.colSpan;\n        // We are now on a new row\n        currentRow += 1;\n        currentColumn = 0;\n        this.cards.push(new GridCard(card, currentRow, currentColumn, card.preferredSize));\n        // Update currentColumn to match the size of the new card and reset columnCounter\n        currentColumn = card.preferredSize;\n        columnCounter = card.preferredSize;\n      }\n      // If we on the last card, make sure it spans all the rest of the columns\n      if (this.cardConfigs.length - 1 === index) {\n        const restColumns = calculatedMaxColumns - columnCounter;\n        const currentCard = this.cards[index];\n        currentCard.colSpan += restColumns;\n      }\n    });\n  }\n\n  ngOnInit() {\n    // this.breakpointSubscription = this.breakpointHelper.observe().subscribe(() => {\n    //   this.configureGrid();\n    // });\n  }\n\n  ngOnDestroy() {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "configuration",
            "type": "GridCardConfiguration",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "row",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "col",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "colSpan",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "configuration",
            "type": "GridCardConfiguration",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "row",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "col",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "colSpan",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "col",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "colSpan",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "configuration",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GridCardConfiguration",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "row",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GridCardConfiguration",
      "id": "class-GridCardConfiguration-c15af21e2f9775c2d83d9ca30aaf8342",
      "file": "libs/designsystem/src/lib/components/grid/grid-card-configuration.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Type } from '@angular/core';\n\nimport { ComponentConfiguration } from '../shared/component-configuration';\n\nexport class GridCardConfiguration implements ComponentConfiguration {\n  constructor(public component: Type<any>, public data: any, public preferredSize: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "component",
            "type": "Type<any>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "data",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "preferredSize",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "component",
            "type": "Type<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "data",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "preferredSize",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "component",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Type<any>",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [123]
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [123]
        },
        {
          "name": "preferredSize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [123]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ComponentConfiguration"]
    },
    {
      "name": "Modal",
      "id": "class-Modal-1a9ebb41117eddef644c1ffd4157f6e4",
      "file": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { ActivatedRoute } from '@angular/router';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface Overlay {\n  dismiss: (data?: any) => Promise<boolean>;\n  onWillDismiss: Promise<OverlayEventDetail>;\n  onDidDismiss: Promise<OverlayEventDetail>;\n}\n\nexport interface ModalRouteActivation {\n  route: ActivatedRoute;\n  isNewModal: boolean;\n}\n\nexport abstract class Modal {\n  didPresent: Promise<void>;\n  willClose: Promise<void>;\n  close: (data?: any) => Promise<void>;\n  scrollToTop: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollToBottom: (scrollDuration?: KirbyAnimation.Duration) => void;\n  scrollDisabled: boolean;\n}\n",
      "properties": [
        {
          "name": "close",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "didPresent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Promise<void>",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "scrollDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "scrollToBottom",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "scrollToTop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "willClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Promise<void>",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ModalWrapperTestBuilder",
      "id": "class-ModalWrapperTestBuilder-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "properties": [
        {
          "name": "config",
          "defaultValue": "{\n    title: null,\n    component: null,\n    flavor: null,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalConfig",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121]
        },
        {
          "name": "createComponent",
          "defaultValue": "createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [121, 143]
        }
      ],
      "methods": [
        {
          "name": "build",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "component",
          "args": [
            {
              "name": "component",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "component",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "flavor",
          "args": [
            {
              "name": "flavor",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "flavor",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "interactWithBackground",
          "args": [
            {
              "name": "interactWithBackground",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "interactWithBackground",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "title",
          "args": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "withDynamicFooter",
          "args": [],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "withDynamicPageProgress",
          "args": [],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "withEmbeddedInputComponent",
          "args": [],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "withStaticFooter",
          "args": [],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "withStaticPageProgress",
          "args": [],
          "optional": false,
          "returnType": "this",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ReorderEvent",
      "id": "class-ReorderEvent-3eff13b082adb675ebf2e9ac8a2ef5b5",
      "file": "libs/designsystem/src/lib/components/reorder-list/reorder-event.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class ReorderEvent {\n  private origEvent: CustomEvent<any>;\n  private parent?: any;\n\n  constructor(ev: CustomEvent<any>, parentItem?: any) {\n    this.origEvent = ev;\n    this.parent = parentItem;\n    this.origEvent.cancelBubble = true;\n  }\n  complete(listOrReorder?: boolean | any[]): Promise<any> {\n    return this.origEvent.detail.complete(listOrReorder);\n  }\n\n  get parentItem(): any {\n    return this.parent;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ev",
            "type": "CustomEvent<any>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "parentItem",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 3,
        "jsdoctags": [
          {
            "name": "ev",
            "type": "CustomEvent<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentItem",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "origEvent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CustomEvent<any>",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [121]
        },
        {
          "name": "parent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 3,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "complete",
          "args": [
            {
              "name": "listOrReorder",
              "type": "boolean | any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "listOrReorder",
              "type": "boolean | any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "parentItem": {
          "name": "parentItem",
          "getSignature": {
            "name": "parentItem",
            "type": "any",
            "returnType": "any",
            "line": 14
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ScssHelper",
      "id": "class-ScssHelper-e1facfae20cc02b0622bb63864a7f783",
      "file": "libs/designsystem/src/lib/scss/scss-helper.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class ScssHelper {\n  // Breakpoints\n  public static BREAKPOINT_SCREEN_L = 720;\n  public static BREAKPOINT_CARD_S = 320;\n  public static BREAKPOINT_CARD_M = 460;\n  public static BREAKPOINT_CARD_L = 820;\n}\n",
      "properties": [
        {
          "name": "BREAKPOINT_CARD_L",
          "defaultValue": "820",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124]
        },
        {
          "name": "BREAKPOINT_CARD_M",
          "defaultValue": "460",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124]
        },
        {
          "name": "BREAKPOINT_CARD_S",
          "defaultValue": "320",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124]
        },
        {
          "name": "BREAKPOINT_SCREEN_L",
          "defaultValue": "720",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TestHelper",
      "id": "class-TestHelper-8860aad0c564fe652768b49eeaa5a3d5",
      "file": "libs/designsystem/src/lib/testing/test-helper.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IonicModule } from '@ionic/angular';\nimport { IonicConfig } from '@ionic/core';\n\nexport class TestHelper {\n  public static readonly _init = TestHelper.muteIonicReInitializeWarning();\n\n  public static muteIonicReInitializeWarning() {\n    const originalWarn = console.warn;\n    const patchedWarn = (warning: any, ...optionalParams: any[]) => {\n      const suppress = `Ionic Angular was already initialized. Make sure IonicModule.forRoot() is just called once.`;\n      if (warning !== suppress) originalWarn(warning, ...optionalParams);\n    };\n    console.warn = patchedWarn;\n  }\n\n  public static ionicModuleForTest = IonicModule.forRoot({\n    mode: 'ios',\n    _testing: true,\n    get: () => {}, // Prevents Ionic \"config.get is not a function\" errors\n  } as IonicConfig);\n\n  /*\n   * Checks for the Web Component(s) being ready,\n   * ie. the component is hydrated, styles have been applied\n   * and the Shadow DOM is ready for query\n   */\n  public static async whenReady(\n    elementOrNodeList: Element | NodeListOf<Element> | Element[]\n  ): Promise<void> {\n    if (elementOrNodeList === undefined || elementOrNodeList === null)\n      return Promise.reject('TestHelper.whenReady: Element is null or undefined');\n    if (elementOrNodeList instanceof Element) {\n      await TestHelper.whenDefined(elementOrNodeList);\n      await TestHelper.ionComponentOnReady(elementOrNodeList);\n    } else {\n      await Promise.all(\n        Array.from(elementOrNodeList).map(async (element) => await TestHelper.whenReady(element))\n      );\n    }\n  }\n\n  /* Checks for the Web Component being defined, ie. the public methods are available */\n  public static async whenDefined(element: Element): Promise<void> {\n    await customElements.whenDefined(element.localName);\n  }\n\n  /* Checks for the Ionic Web Component being ready, ie. the component is hydrated and styles applied */\n  public static async ionComponentOnReady(element: Element): Promise<void> {\n    const componentOnReady = (element as any).componentOnReady as () => Promise<void>;\n    if (typeof componentOnReady === 'function') {\n      await componentOnReady.bind(element)();\n    }\n  }\n\n  public static async whenTrue(\n    pollFunc: () => boolean,\n    timeoutInMs: number = 2000,\n    pollIntervalInMs: number = 5\n  ): Promise<void> {\n    if (pollFunc() === true) return Promise.resolve();\n    return new Promise<void>((resolve, reject) => {\n      let timeoutId, intervalId;\n      const pollState = () => {\n        const result = pollFunc();\n        if (result === true) {\n          clearTimeout(timeoutId);\n          clearInterval(intervalId);\n          resolve();\n        }\n      };\n      timeoutId = setTimeout(() => {\n        clearInterval(intervalId);\n        reject(\n          `Error: Timeout - TestHelper.whenTrue function did not complete within ${timeoutInMs}ms`\n        );\n      }, timeoutInMs);\n      intervalId = setInterval(pollState, pollIntervalInMs);\n    });\n  }\n\n  public static getCssProperty(element: Element, propertyName: string) {\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(propertyName)\n      .trim();\n  }\n\n  public static screensize = {\n    phonesmall: { width: '320px', height: '568px' },\n    phone: { width: '375px', height: '667px' },\n    phablet: { width: '575px', height: '767px' },\n    'phablet-landscape': { width: '767px', height: '575px' },\n    tablet: { width: '768px', height: '1024px' },\n    desktop: { width: '1200px', height: '900px' },\n  };\n\n  public static resizeTestWindow(size: { width?: string; height?: string }): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (!window.frameElement) {\n        console.warn('window.frameElement is undefined. Cannot resize test window.');\n        reject();\n      } else {\n        const query = [];\n        if (size.width) {\n          query.push(`(max-width: ${size.width})`);\n        }\n        if (size.height) {\n          query.push(`(max-height: ${size.height})`);\n        }\n        console.log(`Set test window size to: ${JSON.stringify(size)}`);\n        (window.frameElement as HTMLIFrameElement).style.width = size.width;\n        (window.frameElement as HTMLIFrameElement).style.height = size.height;\n        const mediaQuery = window.matchMedia(query.join(' and '));\n        if (mediaQuery.matches) {\n          resolve();\n        } else {\n          // Ensure window has resized before executing:\n          mediaQuery.onchange = (ev) => {\n            if (ev.matches) {\n              // Stop listening for changes:\n              mediaQuery.onchange = null;\n              resolve();\n            }\n          };\n          console.log(`Awaiting media query to match: ${mediaQuery.media}`);\n        }\n      }\n    });\n  }\n\n  public static resetTestWindow(): void {\n    if (!window.frameElement) {\n      console.warn('window.frameElement is undefined. Cannot resize test window.');\n      return;\n    }\n    console.log('Resetting test window width');\n    (window.frameElement as HTMLIFrameElement).style.width = null;\n    (window.frameElement as HTMLIFrameElement).style.height = null;\n  }\n\n  public static scrollMainWindowToTop() {\n    if (\n      window.parent &&\n      window.parent.document &&\n      window.parent.document.documentElement &&\n      window.parent.document.documentElement.scrollTop > 0\n    ) {\n      window.parent.document.documentElement.scrollTop = 0;\n    }\n  }\n\n  public static waitForResizeObserver(): Promise<void> {\n    return TestHelper.waitForTimeout();\n  }\n\n  public static waitForTimeout(timeoutInMs?: number): Promise<void> {\n    return new Promise<void>((resolve) => setTimeout(resolve, timeoutInMs));\n  }\n}\n\nexport type ScreenSize = keyof typeof TestHelper.screensize;\n",
      "properties": [
        {
          "name": "_init",
          "defaultValue": "TestHelper.muteIonicReInitializeWarning()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124, 143]
        },
        {
          "name": "ionicModuleForTest",
          "defaultValue": "IonicModule.forRoot({\n    mode: 'ios',\n    _testing: true,\n    get: () => {}, // Prevents Ionic \"config.get is not a function\" errors\n  } as IonicConfig)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [124]
        },
        {
          "name": "screensize",
          "defaultValue": "{\n    phonesmall: { width: '320px', height: '568px' },\n    phone: { width: '375px', height: '667px' },\n    phablet: { width: '575px', height: '767px' },\n    'phablet-landscape': { width: '767px', height: '575px' },\n    tablet: { width: '768px', height: '1024px' },\n    desktop: { width: '1200px', height: '900px' },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "getCssProperty",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "propertyName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propertyName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ionComponentOnReady",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124, 130],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "muteIonicReInitializeWarning",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "resetTestWindow",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "resizeTestWindow",
          "args": [
            {
              "name": "size",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "size",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollMainWindowToTop",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "waitForResizeObserver",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 152,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "waitForTimeout",
          "args": [
            {
              "name": "timeoutInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 156,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "timeoutInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "whenDefined",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124, 130],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "whenReady",
          "args": [
            {
              "name": "elementOrNodeList",
              "type": "Element | NodeListOf<Element> | Element[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124, 130],
          "jsdoctags": [
            {
              "name": "elementOrNodeList",
              "type": "Element | NodeListOf<Element> | Element[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "whenTrue",
          "args": [
            {
              "name": "pollFunc",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            },
            {
              "name": "timeoutInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "2000"
            },
            {
              "name": "pollIntervalInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124, 130],
          "jsdoctags": [
            {
              "name": "pollFunc",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "timeoutInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "2000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "pollIntervalInMs",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UniqueIdGenerator",
      "id": "class-UniqueIdGenerator-ba4c7b96b07e6c7539439260f9655c9e",
      "file": "libs/designsystem/src/lib/helpers/unique-id-generator.helper.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class UniqueIdGenerator {\n  private static registry = new Map<string, UniqueIdGenerator>();\n  private id = 0;\n\n  private constructor(private scope: string) {}\n\n  static scopedTo(scope: string) {\n    let scopedGenerator = UniqueIdGenerator.registry.get(scope);\n    if (!scopedGenerator) {\n      scopedGenerator = new UniqueIdGenerator(scope);\n      UniqueIdGenerator.registry.set(scope, scopedGenerator);\n    }\n    return scopedGenerator;\n  }\n\n  next(): string {\n    return `${this.scope}-${this.id++}`;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "scope",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 3,
        "modifierKind": [121],
        "jsdoctags": [
          {
            "name": "scope",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3,
          "modifierKind": [121]
        },
        {
          "name": "registry",
          "defaultValue": "new Map<string, UniqueIdGenerator>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [121, 124]
        }
      ],
      "methods": [
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "scopedTo",
          "args": [
            {
              "name": "scope",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "scope",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [
    {
      "name": "AccordionDirective",
      "id": "directive-AccordionDirective-f9c878661b828badbc47a628bc3e1dd7",
      "file": "libs/designsystem/src/lib/components/accordion/accordion.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyAccordion], kirby-accordion',\n  exportAs: 'kirby-accordion',\n})\nexport class AccordionDirective {}\n",
      "selector": "[kirbyAccordion], kirby-accordion",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ComponentLoaderDirective",
      "id": "directive-ComponentLoaderDirective-afa6dea10601d4d2697978370b406a04",
      "file": "libs/designsystem/src/lib/components/shared/component-loader.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  Input,\n  ComponentFactoryResolver,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { ComponentConfiguration } from './component-configuration';\nimport { DynamicComponent } from './dynamic-component';\n\n@Directive({\n  selector: '[kirbyLoadComponent]',\n})\nexport class ComponentLoaderDirective implements OnInit {\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyLoadComponent') configuration: ComponentConfiguration;\n  @Input() cssClass: string;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    this.loadCard();\n  }\n\n  loadCard() {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\n      this.configuration.component\n    );\n    this.viewContainerRef.clear();\n    const componentRef = this.viewContainerRef.createComponent(componentFactory);\n    if (componentRef && componentRef.location && componentRef.location.nativeElement) {\n      this.renderer.addClass(componentRef.location.nativeElement, this.cssClass);\n    }\n    (<DynamicComponent>componentRef.instance).data = this.configuration.data;\n  }\n}\n",
      "selector": "[kirbyLoadComponent]",
      "providers": [],
      "inputsClass": [
        {
          "name": "cssClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        },
        {
          "name": "kirbyLoadComponent",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "ComponentConfiguration"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "loadCard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DateInputDirective",
      "id": "directive-DateInputDirective-6c2c512e52501959893a359e4301c165",
      "file": "libs/designsystem/src/lib/components/form-field/directives/date/date-input.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { FormatWidth, getLocaleDateFormat } from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  LOCALE_ID,\n  Renderer2,\n} from '@angular/core';\nimport 'inputmask/lib/extensions/inputmask.date.extensions';\nimport Inputmask from 'inputmask/lib/inputmask';\n\n@Directive({\n  selector: '[kirby-input][type=\"date\"]',\n})\nexport class DateInputDirective implements AfterViewInit {\n  @HostListener('input')\n  onInput() {\n    this.updateMask(this.elementRef.nativeElement.value);\n  }\n\n  private maskingElement: HTMLElement;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Inject(LOCALE_ID) private locale: string\n  ) {\n    // Remove type to avoid user-agent specific behaviour for [type=\"date\"]\n    this.elementRef.nativeElement.removeAttribute('type');\n  }\n\n  ngAfterViewInit(): void {\n    this.initMask();\n  }\n\n  private initMask(): void {\n    const inputFormat = this.getInputFormat();\n    const placeholder = this.getPlaceholder(inputFormat);\n\n    // Set initial placeholder ex. dd/mm/yyyy\n    this.renderer.setAttribute(this.elementRef.nativeElement, 'placeholder', placeholder);\n\n    // Init InputMask\n    new Inputmask('datetime', {\n      inputFormat,\n      placeholder,\n    }).mask(this.elementRef.nativeElement);\n\n    // Append input overlay, so it's possible to style typed date differntly than the date-mask\n    this.appendMaskingElement();\n  }\n\n  // Keeps order and seperator from speficied locale\n  private getInputFormat(): string {\n    const localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);\n    return localeDateFormat\n      .toLowerCase()\n      .replace(/d+/, 'dd')\n      .replace(/m+/, 'mm')\n      .replace(/y+/, 'yyyy');\n  }\n\n  private getPlaceholder(inputFormat: string): string {\n    return this.locale === 'da' ? inputFormat.split('y').join('å') : inputFormat;\n  }\n\n  private appendMaskingElement(): void {\n    const wrapper = this.wrapElement(this.elementRef.nativeElement);\n    this.renderer.addClass(wrapper, 'date-mask-wrapper');\n\n    this.maskingElement = this.renderer.createElement('div');\n    this.renderer.appendChild(wrapper, this.maskingElement);\n\n    this.renderer.addClass(this.maskingElement, 'date-mask');\n  }\n\n  private wrapElement(element: HTMLElement): HTMLElement {\n    const wrapper = this.renderer.createElement('div');\n    const parent = element.parentElement;\n    this.renderer.insertBefore(parent, wrapper, element);\n    this.renderer.appendChild(wrapper, element);\n    return wrapper;\n  }\n\n  private updateMask(value: string): void {\n    if (!this.maskingElement) return;\n    const lastNumber = value.match(/.*?(\\d)[^\\d]*$/); // get last number in string\n    this.maskingElement.innerHTML = value\n      ? value.slice(0, value.lastIndexOf(lastNumber[1]) + 1)\n      : '';\n  }\n}\n",
      "selector": "[kirby-input][type=\"date\"]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "input",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19
        }
      ],
      "propertiesClass": [
        {
          "name": "maskingElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "appendMaskingElement",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getInputFormat",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getPlaceholder",
          "args": [
            {
              "name": "inputFormat",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "inputFormat",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initMask",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'input'"
            }
          ]
        },
        {
          "name": "updateMask",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "wrapElement",
          "args": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "HTMLElement",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["AfterViewInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DecimalMaskDirective",
      "id": "directive-DecimalMaskDirective-2d1701856ba8e8537a6d91eef4df6741",
      "file": "libs/designsystem/src/lib/components/form-field/directives/decimal-mask/decimal-mask.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, LOCALE_ID, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport 'inputmask/lib/extensions/inputmask.numeric.extensions';\nimport Inputmask from 'inputmask/lib/inputmask';\n\ninterface InputMask {\n  unmaskedvalue: () => string;\n  setValue: (val: string) => void;\n}\n\n@Directive({\n  // tslint:disable-next-line\n  selector: '[kirby-decimal-mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: DecimalMaskDirective,\n    },\n  ],\n})\nexport class DecimalMaskDirective implements ControlValueAccessor, OnInit {\n  @Input() min: number;\n  @Input() max: number;\n  @Input() precision = 2;\n  @Input() setMaxOnOverflow = false;\n\n  @Input() set allowMinus(allowMinus: boolean) {\n    this._allowMinus = allowMinus || (this.min || 0) < 0;\n  }\n\n  @Input() set disableGroupSeperator(disabled: string) {\n    this._groupSeperatorDisabled = String(disabled) === '' || String(disabled) === 'true';\n  }\n\n  @Input() set maxlength(maxlength: number) {\n    this._maxlength = maxlength;\n\n    const maxlengthValue = parseInt('9'.repeat(maxlength));\n    this.max = this.getMax(maxlengthValue);\n    this.min = this.getMin(maxlengthValue);\n  }\n\n  groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.Group);\n  radixPoint = getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal);\n  inputmask: InputMask;\n\n  _allowMinus = false;\n  _maxlength: number;\n  _groupSeperatorDisabled: boolean;\n\n  onChange = (_: string) => {};\n\n  constructor(private elementRef: ElementRef, @Inject(LOCALE_ID) private locale: string) {}\n\n  ngOnInit(): void {\n    // Set type=\"text\", because functionality like 'setSelectionRange' are not supported on type=\"number\"\n    this.elementRef.nativeElement.setAttribute('type', 'text');\n\n    // Remove maxlength as this is handled by the mask\n    this.elementRef.nativeElement.removeAttribute('maxlength');\n\n    this.initMask();\n  }\n\n  writeValue(val: number): void {\n    if (!this.inputmask) return;\n    const formattedValue = String(val).replace('.', this.radixPoint);\n    this.inputmask.setValue(formattedValue);\n  }\n\n  registerOnChange(onChange: any): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(_: any): void {}\n\n  private initMask(): void {\n    new Inputmask('decimal', {\n      groupSeparator: this._groupSeperatorDisabled ? '' : this.groupSeparator,\n      radixPoint: this.radixPoint,\n      digits: this._maxlength ? 0 : this.precision,\n      min: this.min,\n      max: this.max,\n      allowMinus: this._allowMinus,\n      negationSymbol: {\n        front: getLocaleNumberSymbol(this.locale, NumberSymbol.MinusSign),\n        back: '',\n      },\n      SetMaxOnOverflow: this.setMaxOnOverflow,\n      showMaskOnFocus: false,\n      showMaskOnHover: false,\n      placeholder: '',\n      onBeforeWrite: () => {\n        if (!this.inputmask) return;\n        const unmaskedValue = this.inputmask.unmaskedvalue();\n        this.onChange(unmaskedValue.replace(this.radixPoint, '.'));\n      },\n    }).mask(this.elementRef.nativeElement);\n    this.inputmask = this.elementRef.nativeElement.inputmask;\n  }\n\n  private getMax(maxlengthValue: number): number {\n    return this.max === undefined ? maxlengthValue : Math.min(this.max, maxlengthValue);\n  }\n\n  private getMin(maxlengthValue: number): number {\n    if (!this.allowMinus) return;\n    maxlengthValue = -Math.abs(maxlengthValue);\n    return this.min === undefined ? maxlengthValue : -Math.abs(Math.max(this.min, maxlengthValue));\n  }\n}\n",
      "selector": "[kirby-decimal-mask]",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: DecimalMaskDirective,\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [
        {
          "name": "allowMinus",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "boolean"
        },
        {
          "name": "disableGroupSeperator",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string"
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number"
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "number"
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "number"
        },
        {
          "name": "precision",
          "defaultValue": "2",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number"
        },
        {
          "name": "setMaxOnOverflow",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_allowMinus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "_groupSeperatorDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "_maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "groupSeparator",
          "defaultValue": "getLocaleNumberSymbol(this.locale, NumberSymbol.Group)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "inputmask",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputMask",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "radixPoint",
          "defaultValue": "getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 46
        }
      ],
      "methodsClass": [
        {
          "name": "getMax",
          "args": [
            {
              "name": "maxlengthValue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "maxlengthValue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMin",
          "args": [
            {
              "name": "maxlengthValue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 108,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "maxlengthValue",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initMask",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "onChange",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "onChange",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "_",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "_",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "val",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "val",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["ControlValueAccessor", "OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 53,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "allowMinus": {
          "name": "allowMinus",
          "setSignature": {
            "name": "allowMinus",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "allowMinus",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "allowMinus",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "disableGroupSeperator": {
          "name": "disableGroupSeperator",
          "setSignature": {
            "name": "disableGroupSeperator",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "disabled",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "disabled",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "maxlength": {
          "name": "maxlength",
          "setSignature": {
            "name": "maxlength",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "maxlength",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "maxlength",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "FitHeadingDirective",
      "id": "directive-FitHeadingDirective-0fb0296abff27f0ba8933045dbc8dae2",
      "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\nimport { DesignTokenHelper } from '@kirbydesign/core';\n\nimport { ResizeObserverService } from '../../components/shared/resize-observer/resize-observer.service';\nimport { LineClampHelper } from '../../helpers/line-clamp-helper';\n\nconst fontSize = DesignTokenHelper.fontSize;\nconst lineHeight = DesignTokenHelper.lineHeight;\n\ninterface HeadingSize {\n  name: string;\n  fontSize: string;\n  lineHeight: string;\n}\n\nexport interface FitHeadingConfig {\n  maxLines: number;\n}\n\n@Directive({\n  selector: `h1[kirbyFitHeading],h2[kirbyFitHeading],h3[kirbyFitHeading]`,\n  providers: [LineClampHelper],\n})\nexport class FitHeadingDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyFitHeading') config?: FitHeadingConfig;\n\n  private isObservingHostElement: boolean;\n  private hostElementClone: Element;\n  private isScalingHeader: boolean; // used to prevent resizeObserver to trigger on font scaling by this.scaleHeader()\n\n  private headingSizes: HeadingSize[] = [\n    {\n      name: 'h1',\n      fontSize: fontSize('xl'),\n      lineHeight: lineHeight('xl'),\n    },\n    {\n      name: 'h2',\n      fontSize: fontSize('l'),\n      lineHeight: lineHeight('l'),\n    },\n    {\n      name: 'h3',\n      fontSize: fontSize('m'),\n      lineHeight: lineHeight('m'),\n    },\n  ];\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private resizeObserverService: ResizeObserverService,\n    private lineClampHelper: LineClampHelper\n  ) {}\n\n  ngOnInit(): void {\n    if (this.config && this.config.maxLines) {\n      this.lineClampHelper.setMaxLines(this.elementRef.nativeElement, this.config.maxLines);\n      this.observeResize();\n      this.isObservingHostElement = true;\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.isObservingHostElement) {\n      this.resizeObserverService.unobserve(this.elementRef);\n      if (this.hostElementClone) {\n        this.renderer.removeChild(this.elementRef.nativeElement, this.hostElementClone);\n      }\n    }\n  }\n\n  private observeResize(): void {\n    this.resizeObserverService.observe(this.elementRef, () => {\n      this.scaleHeader();\n    });\n  }\n\n  private scaleHeader(): void {\n    if (this.isScalingHeader) return;\n\n    this.isScalingHeader = true;\n\n    if (!this.hostElementClone) {\n      this.hostElementClone = this.generateHostElementClone();\n      this.renderer.appendChild(this.elementRef.nativeElement, this.hostElementClone);\n    }\n\n    this.renderer.setStyle(\n      this.hostElementClone,\n      'width',\n      `${this.elementRef.nativeElement.clientWidth}px`\n    );\n\n    const fallbackSize = this.headingSizes[this.headingSizes.length - 1];\n    const fittedSize = this.headingSizes.find(this.canFitHeading.bind(this)) || fallbackSize;\n\n    this.setSize(this.elementRef.nativeElement, fittedSize);\n    this.lineClampHelper.setLineHeight(this.elementRef.nativeElement, fittedSize.lineHeight);\n    this.isScalingHeader = false;\n  }\n\n  private canFitHeading(size: HeadingSize) {\n    this.setSize(this.hostElementClone, size);\n    const lines = this.hostElementClone.clientHeight / parseInt(size.lineHeight);\n    return lines <= this.config.maxLines;\n  }\n\n  private generateHostElementClone(): Element {\n    const clone = this.elementRef.nativeElement.cloneNode(true);\n    this.renderer.setStyle(clone, 'position', 'absolute');\n    this.renderer.setStyle(clone, 'visibility', 'hidden');\n    this.lineClampHelper.removeLineClamp(clone);\n    return clone;\n  }\n\n  private setSize(el: Element, size: HeadingSize): void {\n    this.renderer.setStyle(el, 'font-size', size.fontSize);\n    this.renderer.setStyle(el, 'line-height', size.lineHeight);\n  }\n}\n",
      "selector": "h1[kirbyFitHeading],h2[kirbyFitHeading],h3[kirbyFitHeading]",
      "providers": [
        {
          "name": "LineClampHelper"
        }
      ],
      "inputsClass": [
        {
          "name": "kirbyFitHeading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "FitHeadingConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "headingSizes",
          "defaultValue": "[\n    {\n      name: 'h1',\n      fontSize: fontSize('xl'),\n      lineHeight: lineHeight('xl'),\n    },\n    {\n      name: 'h2',\n      fontSize: fontSize('l'),\n      lineHeight: lineHeight('l'),\n    },\n    {\n      name: 'h3',\n      fontSize: fontSize('m'),\n      lineHeight: lineHeight('m'),\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HeadingSize[]",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [121]
        },
        {
          "name": "hostElementClone",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Element",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [121]
        },
        {
          "name": "isObservingHostElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [121]
        },
        {
          "name": "isScalingHeader",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "canFitHeading",
          "args": [
            {
              "name": "size",
              "type": "HeadingSize",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "size",
              "type": "HeadingSize",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateHostElementClone",
          "args": [],
          "optional": false,
          "returnType": "Element",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observeResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "scaleHeader",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setSize",
          "args": [
            {
              "name": "el",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "size",
              "type": "HeadingSize",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "size",
              "type": "HeadingSize",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "lineClampHelper",
            "type": "LineClampHelper",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "lineClampHelper",
            "type": "LineClampHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "InfiniteScrollDirective",
      "id": "directive-InfiniteScrollDirective-353995a1bdb92f5b1183023c91468e43",
      "file": "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, filter, map, takeUntil } from 'rxjs/operators';\n\nimport { WindowRef } from '../../../types/window-ref';\n\nimport { Scroll } from './scroll.model';\n\n/**\n * Specify debounce duration in ms\n */\nexport const INFINITE_SCROLL_DEBOUNCE = 100;\n\n@Directive({\n  selector: '[kirbyInfiniteScroll]',\n})\nexport class InfiniteScrollDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Event that will be triggered when the user has scrolled to\n   * bottom of the element\n   */\n  @Output() scrollEnd = new EventEmitter<void>();\n\n  /**\n   * If true then {@link scrollEnd} event should NOT be emitted\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits a new value on element scroll event\n   */\n  scroll$: Subject<Scroll> = new Subject<Scroll>();\n\n  /**\n   * Completes on component destroy lifecycle event\n   * used to unsubscribe from infinite observables\n   */\n  private ngUnsubscribe$ = new Subject<void>();\n\n  /**\n   * An offset from the bottom of the element to trigger {@link scrollEnd} event\n   */\n  private offset = 0.8;\n\n  constructor(private elementRef: ElementRef, private windowRef: WindowRef, private zone: NgZone) {}\n\n  ngAfterViewInit(): void {\n    /**\n     * Subscribe to {@link scroll$} observable and emit {@link scrollEnd} event\n     * when element scroll position has surpassed the offset.\n     */\n    this.scroll$\n      .pipe(\n        takeUntil(this.ngUnsubscribe$),\n        debounceTime(INFINITE_SCROLL_DEBOUNCE),\n        filter(() => !this.disabled),\n        filter((scroll) => {\n          return (\n            scroll.elementHeight * (1 - this.offset) >=\n            scroll.distanceToViewBottom - scroll.viewHeight\n          );\n        })\n      )\n      .subscribe(() => {\n        this.scrollEnd.emit();\n      });\n\n    /**\n     * Subscribe to the ionScroll event on the ion-content around the list (if any)\n     * and emit {@link scrollEnd} event when element scroll position has surpassed the offset.\n     */\n    setTimeout(() => {\n      const ionContent: HTMLElement = this.elementRef.nativeElement.closest('ion-content');\n      if (ionContent) {\n        // we run the 'ionScroll' event outside angular, as it would trigger change detection on each scroll\n        this.zone.runOutsideAngular(() => {\n          fromEvent<any>(ionContent, 'ionScroll')\n            .pipe(\n              takeUntil(this.ngUnsubscribe$),\n              debounceTime(INFINITE_SCROLL_DEBOUNCE),\n              filter(() => !this.disabled),\n              map(() => this.getScroll()),\n              filter((scroll) => {\n                return (\n                  scroll.elementHeight * (1 - this.offset) >=\n                  scroll.distanceToViewBottom - scroll.viewHeight\n                );\n              })\n            )\n            .subscribe(() => {\n              // we make sure to emit the event inside angular again. As we want to show the spinner and need change detection for that.\n              this.zone.run(() => this.scrollEnd.emit());\n            });\n        });\n      }\n    });\n  }\n\n  /**\n   * On element scroll event emit next {@link scroll$} observable value\n   */\n  @HostListener('window:scroll')\n  onScroll(): void {\n    if (this.disabled) return;\n    const scroll = this.getScroll();\n    this.scroll$.next(scroll);\n  }\n\n  /**\n   * trigger {@link ngUnsubscribe} complete on component destroy lifecycle hook\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  private getScroll(): Scroll {\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const boundindClientRect = element.getBoundingClientRect();\n\n    const distanceToViewBottom = boundindClientRect.bottom;\n    const elementHeight = boundindClientRect.height;\n    const viewHeight = this.windowRef.nativeWindow.innerHeight;\n\n    return { distanceToViewBottom, elementHeight, viewHeight };\n  }\n}\n",
      "selector": "[kirbyInfiniteScroll]",
      "providers": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "If true then {@link scrollEnd} event should NOT be emitted",
          "description": "<p>If true then {@link scrollEnd} event should NOT be emitted</p>\n",
          "line": 37,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "scrollEnd",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvent that will be triggered when the user has scrolled to\nbottom of the element\n",
          "description": "<p>Event that will be triggered when the user has scrolled to\nbottom of the element</p>\n",
          "line": 32,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:scroll",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOn element scroll event emit next {@link scroll$} observable value\n",
          "description": "<p>On element scroll event emit next {@link scroll$} observable value</p>\n",
          "line": 113
        }
      ],
      "propertiesClass": [
        {
          "name": "ngUnsubscribe$",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Completes on component destroy lifecycle event\nused to unsubscribe from infinite observables</p>\n",
          "line": 48,
          "rawdescription": "\n\nCompletes on component destroy lifecycle event\nused to unsubscribe from infinite observables\n",
          "modifierKind": [121]
        },
        {
          "name": "offset",
          "defaultValue": "0.8",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>An offset from the bottom of the element to trigger {@link scrollEnd} event</p>\n",
          "line": 53,
          "rawdescription": "\n\nAn offset from the bottom of the element to trigger {@link scrollEnd} event\n",
          "modifierKind": [121]
        },
        {
          "name": "scroll$",
          "defaultValue": "new Subject<Scroll>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<Scroll>",
          "optional": false,
          "description": "<p>Emits a new value on element scroll event</p>\n",
          "line": 42,
          "rawdescription": "\n\nEmits a new value on element scroll event\n"
        }
      ],
      "methodsClass": [
        {
          "name": "getScroll",
          "args": [],
          "optional": false,
          "returnType": "Scroll",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\ntrigger {@link ngUnsubscribe} complete on component destroy lifecycle hook\n",
          "description": "<p>trigger {@link ngUnsubscribe} complete on component destroy lifecycle hook</p>\n"
        },
        {
          "name": "onScroll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOn element scroll event emit next {@link scroll$} observable value\n",
          "description": "<p>On element scroll event emit next {@link scroll$} observable value</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:scroll'"
            }
          ]
        }
      ],
      "implements": ["AfterViewInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 53,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "KeyHandlerDirective",
      "id": "directive-KeyHandlerDirective-0ed2cc7daaddc43bcce856e758edfb4a",
      "file": "libs/designsystem/src/lib/directives/key-handler/key-handler.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, HostListener, ElementRef } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: `[keyHandler]`,\n})\nexport class KeyHandlerDirective {\n  constructor(private element: ElementRef) {}\n\n  @HostListener('keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n\n      const hostElement = <HTMLElement>this.element.nativeElement;\n      hostElement.click();\n    }\n  }\n}\n",
      "selector": "[keyHandler]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keyup",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "keyEvent",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keyup', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "element",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "element",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ListFlexItemDirective",
      "id": "directive-ListFlexItemDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListFlexItem]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 17
      }
    },
    {
      "name": "ListFooterDirective",
      "id": "directive-ListFooterDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListFooter], [kirbyListFooterTemplate]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ListHeaderDirective",
      "id": "directive-ListHeaderDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListHeader], [kirbyListHeaderTemplate]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ListItemColorDirective",
      "id": "directive-ListItemColorDirective-d780a4db193f64bf3411e958a1eece52",
      "file": "libs/designsystem/src/lib/components/list/directives/list-item-color.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, HostBinding, Input, OnChanges } from '@angular/core';\n\nimport { ThemeColor } from '@kirbydesign/core';\n\n@Directive({\n  selector: '[kirbyListItemColor]',\n})\nexport class ListItemColorDirective implements OnChanges {\n  @Input()\n  kirbyListItemColor: (item: any) => ThemeColor;\n  @Input() item: any;\n  @HostBinding('class')\n  color: ThemeColor;\n\n  ngOnChanges(): void {\n    this.color = this.getColor();\n  }\n\n  private getColor(): ThemeColor {\n    if (!this.kirbyListItemColor || !this.item) {\n      return;\n    }\n\n    const themeColor = this.kirbyListItemColor(this.item);\n    return themeColor;\n  }\n}\n",
      "selector": "[kirbyListItemColor]",
      "providers": [],
      "inputsClass": [
        {
          "name": "item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "any"
        },
        {
          "name": "kirbyListItemColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "function"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "ThemeColor"
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ThemeColor",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "getColor",
          "args": [],
          "optional": false,
          "returnType": "ThemeColor",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "implements": ["OnChanges"]
    },
    {
      "name": "ListItemDirective",
      "id": "directive-ListItemDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListItem]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 6
      }
    },
    {
      "name": "ListItemTemplateDirective",
      "id": "directive-ListItemTemplateDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListItemTemplate]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ListSectionHeaderDirective",
      "id": "directive-ListSectionHeaderDirective-caaeae9208e36656b5dbdf69e977f005",
      "file": "libs/designsystem/src/lib/components/list/list.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[kirbyListItem]',\n})\nexport class ListItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListFlexItem]',\n})\nexport class ListFlexItemDirective {\n  constructor() {\n    console.warn(\n      '*kirbyListFlexItem directive is deprecated - please use *kirbyListItemTemplate directive instead.'\n    );\n  }\n}\n\n@Directive({\n  selector: '[kirbyListItemTemplate]',\n})\nexport class ListItemTemplateDirective {}\n\n@Directive({\n  selector: '[kirbyListHeader], [kirbyListHeaderTemplate]',\n})\nexport class ListHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]',\n})\nexport class ListSectionHeaderDirective {}\n\n@Directive({\n  selector: '[kirbyListFooter], [kirbyListFooterTemplate]',\n})\nexport class ListFooterDirective {}\n",
      "selector": "[kirbyListSectionHeader], [kirbyListSectionHeaderTemplate]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockFitHeadingDirective",
      "id": "directive-MockFitHeadingDirective-3dd46b752a55935f0b5a6d1ccc12cb60",
      "file": "libs/designsystem/testing-base/src/lib/directives/mock.fit-heading.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, forwardRef, Input } from '@angular/core';\n\nimport { FitHeadingConfig, FitHeadingDirective } from '@kirbydesign/designsystem';\n\n@Directive({\n  selector: `h1[kirbyFitHeading],\n             h2[kirbyFitHeading],\n             h3[kirbyFitHeading]`,\n  providers: [\n    {\n      provide: FitHeadingDirective,\n      useExisting: forwardRef(() => MockFitHeadingDirective),\n    },\n  ],\n})\nexport class MockFitHeadingDirective {\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyFitHeading') config?: FitHeadingConfig;\n}\n",
      "selector": "h1[kirbyFitHeading],\n             h2[kirbyFitHeading],\n             h3[kirbyFitHeading]",
      "providers": [
        {
          "name": "{\n    provide: FitHeadingDirective, useExisting: forwardRef(() => MockFitHeadingDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [
        {
          "name": "kirbyFitHeading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "FitHeadingConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockPageActionsDirective",
      "id": "directive-MockPageActionsDirective-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "selector": "[kirbyPageActions]",
      "providers": [
        {
          "name": "{\n    provide: PageActionsDirective, useExisting: forwardRef(() => MockPageActionsDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [
        {
          "name": "kirbyPageActions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "stickyConfig | fixedConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockPageContentDirective",
      "id": "directive-MockPageContentDirective-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "selector": "[kirbyPageContent]",
      "providers": [
        {
          "name": "{\n    provide: PageContentDirective, useExisting: forwardRef(() => MockPageContentDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [
        {
          "name": "kirbyPageContent",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "fixedConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockPageTitleDirective",
      "id": "directive-MockPageTitleDirective-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "selector": "[kirbyPageTitle]",
      "providers": [
        {
          "name": "{\n    provide: PageTitleDirective, useExisting: forwardRef(() => MockPageTitleDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockPageToolbarTitleDirective",
      "id": "directive-MockPageToolbarTitleDirective-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "selector": "[kirbyPageToolbarTitle]",
      "providers": [
        {
          "name": "{\n    provide: PageToolbarTitleDirective, useExisting: forwardRef(() => MockPageToolbarTitleDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockSlideDirective",
      "id": "directive-MockSlideDirective-a5975070d25c539e01a930b1b55350f6",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.slides.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { forwardRef, Component, Directive, Input } from '@angular/core';\r\n\r\nimport { SlideDirective, SlidesComponent } from '@kirbydesign/designsystem';\r\n\r\n@Directive({\r\n  selector: '[kirbySlide]',\r\n  providers: [\r\n    {\r\n      provide: SlideDirective,\r\n      useExisting: forwardRef(() => MockSlideDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockSlideDirective {}\r\n\r\n@Component({\r\n  selector: 'kirby-slides',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: SlidesComponent,\r\n      useExisting: forwardRef(() => MockSlidesComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockSlidesComponent {\r\n  @Input() slidesOptions: any;\r\n  @Input() slides: any[];\r\n}\r\n",
      "selector": "[kirbySlide]",
      "providers": [
        {
          "name": "{\n    provide: SlideDirective, useExisting: forwardRef(() => MockSlideDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "MockThemeColorDirective",
      "id": "directive-MockThemeColorDirective-04a894d8af8df1ff0ba039fe45453561",
      "file": "libs/designsystem/testing-base/src/lib/directives/mock.theme-color.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, forwardRef, Input } from '@angular/core';\n\nimport { ThemeColor, ThemeColorDirective } from '@kirbydesign/designsystem';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: `kirby-card[themeColor],\n             kirby-icon[themeColor],\n             kirby-empty-state[themeColor]`,\n  providers: [\n    {\n      provide: ThemeColorDirective,\n      useExisting: forwardRef(() => MockThemeColorDirective),\n    },\n  ],\n})\nexport class MockThemeColorDirective {\n  @Input() themeColor: ThemeColor;\n}\n",
      "selector": "kirby-card[themeColor],\n             kirby-icon[themeColor],\n             kirby-empty-state[themeColor]",
      "providers": [
        {
          "name": "{\n    provide: ThemeColorDirective, useExisting: forwardRef(() => MockThemeColorDirective),\n}",
          "type": "directive"
        }
      ],
      "inputsClass": [
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "ThemeColor"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ModalRouterLinkDirective",
      "id": "directive-ModalRouterLinkDirective-f76133aaf66b2e1b064d309b8ec94b3e",
      "file": "libs/designsystem/src/lib/directives/modal-router-link/modal-router-link.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { Params } from '@angular/router';\n\nimport { ModalNavigationService } from '../../components/modal/services/modal-navigation.service';\n\n@Directive({\n  selector: `[kirbyModalRouterLink]`,\n})\nexport class ModalRouterLinkDirective {\n  constructor(private modalNavigationService: ModalNavigationService) {}\n\n  @Input('kirbyModalRouterLink') path: string | string[];\n  // tslint:disable-next-line:no-input-rename\n  @Input('kirbyModalQueryParams') queryParams?: Params;\n\n  @HostListener('click')\n  onClick(): boolean {\n    this.modalNavigationService.navigateToModal(\n      this.path,\n      typeof this.queryParams !== 'string' ? this.queryParams : null\n    );\n    return false;\n  }\n}\n",
      "selector": "[kirbyModalRouterLink]",
      "providers": [],
      "inputsClass": [
        {
          "name": "kirbyModalQueryParams",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "Params"
        },
        {
          "name": "kirbyModalRouterLink",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "string | string[]"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            }
          ]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "PageActionsDirective",
      "id": "directive-PageActionsDirective-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "selector": "[kirbyPageActions]",
      "providers": [],
      "inputsClass": [
        {
          "name": "kirbyPageActions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "stickyConfig | fixedConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "fixedDefault",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [121, 143]
        },
        {
          "name": "stickyDefault",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [121, 143]
        },
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 59,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isSticky": {
          "name": "isSticky",
          "getSignature": {
            "name": "isSticky",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "isFixed": {
          "name": "isFixed",
          "getSignature": {
            "name": "isFixed",
            "type": "boolean",
            "returnType": "boolean",
            "line": 67
          }
        }
      }
    },
    {
      "name": "PageContentDirective",
      "id": "directive-PageContentDirective-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "selector": "[kirbyPageContent]",
      "providers": [],
      "inputsClass": [
        {
          "name": "kirbyPageContent",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "fixedConfig"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 78,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isFixed": {
          "name": "isFixed",
          "getSignature": {
            "name": "isFixed",
            "type": "boolean",
            "returnType": "boolean",
            "line": 80
          }
        }
      }
    },
    {
      "name": "PageTitleDirective",
      "id": "directive-PageTitleDirective-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "selector": "[kirbyPageTitle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "PageToolbarTitleDirective",
      "id": "directive-PageToolbarTitleDirective-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "selector": "[kirbyPageToolbarTitle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "SlideDirective",
      "id": "directive-SlideDirective-8bb57cc9235738de61db219b0a9d785d",
      "file": "libs/designsystem/src/lib/components/slides/slides.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AfterViewInit, EventEmitter } from '@angular/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { IonSlides } from '@ionic/angular';\n\n@Directive({\n  selector: '[kirbySlide]',\n})\nexport class SlideDirective {}\n\n@Component({\n  selector: 'kirby-slides',\n  template: `\n    <ion-slides [options]=\"slidesOptions\" #ionslides (ionSlideDidChange)=\"onSlideChanged()\">\n      <ion-slide *ngFor=\"let slide of slides; let i = index\">\n        <ng-container\n          *ngTemplateOutlet=\"slideTemplate; context: { $implicit: slide, index: i }\"\n        ></ng-container>\n      </ion-slide>\n    </ion-slides>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SlidesComponent implements AfterViewInit {\n  @ViewChild('ionslides', { static: false }) ionSlides: IonSlides;\n  @Input() slidesOptions: any;\n  @Input() slides: any[];\n  @Output() selectedSlide = new EventEmitter<any>();\n\n  @ContentChild(SlideDirective, { static: true, read: TemplateRef })\n  public slideTemplate: TemplateRef<any>;\n\n  ngAfterViewInit() {\n    this.slideTo(0);\n  }\n\n  onSlideChanged() {\n    this.ionSlides.getActiveIndex().then((selectedIndex) => {\n      this.selectedSlide.emit({\n        slide: this.slides[selectedIndex],\n        index: selectedIndex,\n      });\n    });\n  }\n\n  slideTo(index: number) {\n    this.ionSlides.slideTo(index);\n  }\n}\n",
      "selector": "[kirbySlide]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ThemeColorDirective",
      "id": "directive-ThemeColorDirective-e78bfb46d7659de77bdd8fd141f61934",
      "file": "libs/designsystem/src/lib/directives/theme-color/theme-color.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\n\nimport { ColorHelper } from '@kirbydesign/core';\nimport { ThemeColor } from '@kirbydesign/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: `kirby-avatar[themeColor],\n             kirby-card[themeColor],\n             kirby-icon[themeColor],\n             kirby-progress-circle-ring[themeColor],\n             kirby-modal-footer[themeColor],\n             kirby-empty-state[themeColor]`,\n})\nexport class ThemeColorDirective {\n  private _isDefault = true;\n  @HostBinding('class.default')\n  get isDefault() {\n    return this._isDefault;\n  }\n\n  private _isPrimary: boolean;\n  @HostBinding('class.primary')\n  get isPrimary() {\n    return this._isPrimary;\n  }\n\n  private _isSecondary: boolean;\n  @HostBinding('class.secondary')\n  get isSecondary() {\n    return this._isSecondary;\n  }\n\n  private _isTertiary: boolean;\n  @HostBinding('class.tertiary')\n  get isTertiary() {\n    return this._isTertiary;\n  }\n\n  private _isSuccess: boolean;\n  @HostBinding('class.success')\n  get isSuccess() {\n    return this._isSuccess;\n  }\n\n  private _isWarning: boolean;\n  @HostBinding('class.warning')\n  get isWarning() {\n    return this._isWarning;\n  }\n\n  private _isDanger: boolean;\n  @HostBinding('class.danger')\n  get isDanger() {\n    return this._isDanger;\n  }\n\n  private _isLight: boolean;\n  @HostBinding('class.light')\n  get isLight() {\n    return this._isLight;\n  }\n\n  private _isMedium: boolean;\n  @HostBinding('class.medium')\n  get isMedium() {\n    return this._isMedium;\n  }\n\n  private _isDark: boolean;\n  @HostBinding('class.dark')\n  get isDark() {\n    return this._isDark;\n  }\n\n  private _isWhite: boolean;\n  @HostBinding('class.white')\n  get isWhite() {\n    return this._isWhite;\n  }\n\n  private _isBrightnessWhite: boolean;\n  @HostBinding('class.kirby-color-brightness-white')\n  get isBrightnessWhite() {\n    return this._isBrightnessWhite;\n  }\n\n  private _isBrightnessLight: boolean;\n  @HostBinding('class.kirby-color-brightness-light')\n  get isBrightnessLight() {\n    return this._isBrightnessLight;\n  }\n\n  private _isBrightnessDark: boolean;\n  @HostBinding('class.kirby-color-brightness-dark')\n  get isBrightnessDark() {\n    return this._isBrightnessDark;\n  }\n\n  @Input() set themeColor(value: ThemeColor) {\n    this._isDefault = !value;\n    this._isPrimary = value === 'primary';\n    this._isSecondary = value === 'secondary';\n    this._isTertiary = value === 'tertiary';\n    this._isSuccess = value === 'success';\n    this._isWarning = value === 'warning';\n    this._isDanger = value === 'danger';\n    this._isLight = value === 'light';\n    this._isMedium = value === 'medium';\n    this._isDark = value === 'dark';\n    this._isWhite = value === 'white';\n    const colorBrightness = ColorHelper.getColorBrightness(value);\n    this._isBrightnessWhite = colorBrightness === 'white';\n    this._isBrightnessLight = colorBrightness === 'light';\n    this._isBrightnessDark = colorBrightness === 'dark';\n  }\n}\n",
      "selector": "kirby-avatar[themeColor],\n             kirby-card[themeColor],\n             kirby-icon[themeColor],\n             kirby-progress-circle-ring[themeColor],\n             kirby-modal-footer[themeColor],\n             kirby-empty-state[themeColor]",
      "providers": [],
      "inputsClass": [
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": ""
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.danger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean"
        },
        {
          "name": "class.dark",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "boolean"
        },
        {
          "name": "class.default",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "class.kirby-color-brightness-dark",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 96,
          "type": "boolean"
        },
        {
          "name": "class.kirby-color-brightness-light",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 90,
          "type": "boolean"
        },
        {
          "name": "class.kirby-color-brightness-white",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean"
        },
        {
          "name": "class.light",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean"
        },
        {
          "name": "class.medium",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "boolean"
        },
        {
          "name": "class.primary",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "class.secondary",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean"
        },
        {
          "name": "class.success",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean"
        },
        {
          "name": "class.tertiary",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean"
        },
        {
          "name": "class.warning",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean"
        },
        {
          "name": "class.white",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_isBrightnessDark",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 94,
          "modifierKind": [121]
        },
        {
          "name": "_isBrightnessLight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [121]
        },
        {
          "name": "_isBrightnessWhite",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [121]
        },
        {
          "name": "_isDanger",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [121]
        },
        {
          "name": "_isDark",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 70,
          "modifierKind": [121]
        },
        {
          "name": "_isDefault",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [121]
        },
        {
          "name": "_isLight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [121]
        },
        {
          "name": "_isMedium",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 64,
          "modifierKind": [121]
        },
        {
          "name": "_isPrimary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [121]
        },
        {
          "name": "_isSecondary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [121]
        },
        {
          "name": "_isSuccess",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [121]
        },
        {
          "name": "_isTertiary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [121]
        },
        {
          "name": "_isWarning",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [121]
        },
        {
          "name": "_isWhite",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [],
      "accessors": {
        "isDefault": {
          "name": "isDefault",
          "getSignature": {
            "name": "isDefault",
            "type": "",
            "returnType": "",
            "line": 18
          }
        },
        "isPrimary": {
          "name": "isPrimary",
          "getSignature": {
            "name": "isPrimary",
            "type": "",
            "returnType": "",
            "line": 24
          }
        },
        "isSecondary": {
          "name": "isSecondary",
          "getSignature": {
            "name": "isSecondary",
            "type": "",
            "returnType": "",
            "line": 30
          }
        },
        "isTertiary": {
          "name": "isTertiary",
          "getSignature": {
            "name": "isTertiary",
            "type": "",
            "returnType": "",
            "line": 36
          }
        },
        "isSuccess": {
          "name": "isSuccess",
          "getSignature": {
            "name": "isSuccess",
            "type": "",
            "returnType": "",
            "line": 42
          }
        },
        "isWarning": {
          "name": "isWarning",
          "getSignature": {
            "name": "isWarning",
            "type": "",
            "returnType": "",
            "line": 48
          }
        },
        "isDanger": {
          "name": "isDanger",
          "getSignature": {
            "name": "isDanger",
            "type": "",
            "returnType": "",
            "line": 54
          }
        },
        "isLight": {
          "name": "isLight",
          "getSignature": {
            "name": "isLight",
            "type": "",
            "returnType": "",
            "line": 60
          }
        },
        "isMedium": {
          "name": "isMedium",
          "getSignature": {
            "name": "isMedium",
            "type": "",
            "returnType": "",
            "line": 66
          }
        },
        "isDark": {
          "name": "isDark",
          "getSignature": {
            "name": "isDark",
            "type": "",
            "returnType": "",
            "line": 72
          }
        },
        "isWhite": {
          "name": "isWhite",
          "getSignature": {
            "name": "isWhite",
            "type": "",
            "returnType": "",
            "line": 78
          }
        },
        "isBrightnessWhite": {
          "name": "isBrightnessWhite",
          "getSignature": {
            "name": "isBrightnessWhite",
            "type": "",
            "returnType": "",
            "line": 84
          }
        },
        "isBrightnessLight": {
          "name": "isBrightnessLight",
          "getSignature": {
            "name": "isBrightnessLight",
            "type": "",
            "returnType": "",
            "line": 90
          }
        },
        "isBrightnessDark": {
          "name": "isBrightnessDark",
          "getSignature": {
            "name": "isBrightnessDark",
            "type": "",
            "returnType": "",
            "line": 96
          }
        },
        "themeColor": {
          "name": "themeColor",
          "setSignature": {
            "name": "themeColor",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "ThemeColor",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 100,
            "jsdoctags": [
              {
                "name": "value",
                "type": "ThemeColor",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "components": [
    {
      "name": "AccordionItemComponent",
      "id": "component-AccordionItemComponent-b913cc71fb0db5b5d04c93201afc48e5",
      "file": "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-accordion-item",
      "styleUrls": ["./accordion-item.component.scss"],
      "styles": [],
      "templateUrl": ["./accordion-item.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isExpanded",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_contentId",
          "defaultValue": "`kirby-accordion-item-content-${uniqueId}`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "_titleId",
          "defaultValue": "`kirby-accordion-item-title-${++uniqueId}`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n// Counter for generating unique element ids\nlet uniqueId = 0;\n\n@Component({\n  selector: 'kirby-accordion-item',\n  templateUrl: './accordion-item.component.html',\n  styleUrls: ['./accordion-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('isExpanded', [\n      state('true', style({ height: '*', visibility: 'visible' })),\n      state('false', style({ height: '0px', visibility: 'hidden' })),\n      transition('true <=> false', animate('0.2s')),\n    ]),\n  ],\n})\nexport class AccordionItemComponent {\n  @Input() title: string;\n  @Input() isExpanded: boolean = false;\n\n  // IDs used for a11y labelling\n  _titleId = `kirby-accordion-item-title-${++uniqueId}`;\n  _contentId = `kirby-accordion-item-content-${uniqueId}`;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$divider-color: get-color('medium');\n$padding: size('s');\n\n:host {\n  display: block;\n  border-top: 1px solid $divider-color;\n  border-bottom: 1px solid $divider-color;\n}\n.header {\n  display: flex;\n  align-items: center;\n  height: size('xxxl');\n  padding-left: $padding;\n  padding-right: $padding;\n  cursor: pointer;\n  user-select: none;\n}\n.title {\n  flex-grow: 2;\n}\n.kirby-icon {\n  transition: transform get-transition-duration('quick');\n}\n.content {\n  overflow: hidden;\n}\n.content-body {\n  padding: 0 $padding $padding $padding;\n}\n\n.expanded {\n  .title {\n    font-weight: font-weight('bold');\n  }\n  .kirby-icon {\n    transform: rotate(180deg);\n  }\n}\n\n:host-context(kirby-accordion) {\n  &:not(:first-child) {\n    border-top: none;\n  }\n}\n\n:host-context(kirby-card) {\n  border-color: get-color('background-color');\n\n  &:first-child {\n    border-top: none;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n}\n",
          "styleUrl": "./accordion-item.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ng-container>\n  <div\n    (click)=\"isExpanded = !isExpanded\"\n    class=\"header\"\n    role=\"button\"\n    [class.expanded]=\"isExpanded\"\n    [attr.aria-expanded]=\"isExpanded\"\n    [attr.aria-controls]=\"_contentId\"\n    [id]=\"_titleId\"\n  >\n    <div class=\"title\">{{ title }}</div>\n    <kirby-icon name=\"arrow-down\"></kirby-icon>\n  </div>\n  <div\n    class=\"content\"\n    role=\"region\"\n    [attr.aria-labelledby]=\"_titleId\"\n    [id]=\"_contentId\"\n    [@isExpanded]=\"!!isExpanded\"\n  >\n    <div class=\"content-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-container>\n"
    },
    {
      "name": "ActionSheetComponent",
      "id": "component-ActionSheetComponent-ab6ceccb77c0485632059fd1b400fc11",
      "file": "libs/designsystem/src/lib/components/modal/action-sheet/action-sheet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-action-sheet",
      "styleUrls": ["./action-sheet.component.scss"],
      "styles": [],
      "templateUrl": ["./action-sheet.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "cancelButtonText",
          "defaultValue": "'Cancel'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "string"
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "boolean"
        },
        {
          "name": "header",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string"
        },
        {
          "name": "hideCancel",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "boolean"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "Array<ActionSheetItem>"
        },
        {
          "name": "subheader",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "cancel",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "EventEmitter"
        },
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<ActionSheetItem>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter<ActionSheetItem>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onCancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onItemSelect",
          "args": [
            {
              "name": "selection",
              "type": "ActionSheetItem",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "selection",
              "type": "ActionSheetItem",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ActionSheetItem } from './config/action-sheet-item';\n\n@Component({\n  selector: 'kirby-action-sheet',\n  templateUrl: './action-sheet.component.html',\n  styleUrls: ['./action-sheet.component.scss'],\n})\nexport class ActionSheetComponent {\n  @Input() cancelButtonText = 'Cancel';\n  @Input() hideCancel: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() header: string;\n  @Input() subheader: string;\n  @Input() items: Array<ActionSheetItem>;\n  @Output() cancel = new EventEmitter();\n  @Output() itemSelect: EventEmitter<ActionSheetItem> = new EventEmitter<ActionSheetItem>();\n\n  onItemSelect(selection: ActionSheetItem) {\n    this.itemSelect.emit(selection);\n  }\n\n  onCancel() {\n    this.cancel.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$margin-horizontal: size('l');\n$margin-horizontal-narrow: size('s');\n$max-width: 375px;\n\n:host {\n  --kirby_internal_margin_horizontal_default: #{$margin-horizontal};\n  @include media('<small') {\n    --kirby_internal_margin_horizontal_default: #{$margin-horizontal-narrow};\n  }\n\n  --kirby_internal_margin_horizontal_total: calc(\n    2 * var(--kirby-action-sheet-margin-horizontal, var(--kirby_internal_margin_horizontal_default))\n  );\n}\n\n:host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 0 auto;\n  width: calc(100vw - var(--kirby_internal_margin_horizontal_total));\n  max-width: calc(#{$max-width} - var(--kirby_internal_margin_horizontal_total));\n}\n\nkirby-card {\n  align-self: stretch;\n  pointer-events: auto;\n  box-shadow: get-elevation(8);\n\n  button[kirby-button] {\n    margin: 0;\n    border-radius: 0;\n    &:not(:focus) {\n      border-top: 1px solid get-color('background-color');\n    }\n  }\n}\n\n.cancel-btn {\n  font-weight: font-weight('bold');\n  margin-top: size('s');\n  margin-bottom: size('m');\n  pointer-events: auto;\n  box-shadow: get-elevation(8);\n}\n",
          "styleUrl": "./action-sheet.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<kirby-card>\n  <kirby-card-header *ngIf=\"header\" [title]=\"header\" [isTitleBold]=\"true\" [subtitle]=\"subheader\">\n  </kirby-card-header>\n  <button\n    kirby-button\n    expand=\"block\"\n    size=\"lg\"\n    attentionLevel=\"4\"\n    (click)=\"onItemSelect(item)\"\n    *ngFor=\"let item of items\"\n  >\n    {{ item.text }}\n  </button>\n</kirby-card>\n<button\n  *ngIf=\"!hideCancel\"\n  kirby-button\n  class=\"cancel-btn\"\n  size=\"lg\"\n  attentionLevel=\"2\"\n  (click)=\"onCancel()\"\n>\n  {{ cancelButtonText }}\n</button>\n"
    },
    {
      "name": "AlertComponent",
      "id": "component-AlertComponent-2941f6f83a1a8b1634327552fa7a4cb9",
      "file": "libs/designsystem/src/lib/components/modal/alert/alert.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-alert",
      "styleUrls": ["./alert.component.scss"],
      "styles": [],
      "templateUrl": ["./alert.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "cancelBtnText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string"
        },
        {
          "name": "iconName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string"
        },
        {
          "name": "iconThemeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string"
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": ""
        },
        {
          "name": "okBtnIsDestructive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean"
        },
        {
          "name": "okBtnText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "alertWrapper",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'alertWrapper', {static: true}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "BLUR_WRAPPER_DELAY_IN_MS",
          "defaultValue": "50",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [143]
        },
        {
          "name": "message$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string>",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "scrollY",
          "defaultValue": "Math.abs(this.windowRef.nativeWindow.scrollY)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [121]
        },
        {
          "name": "title$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string>",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onCancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFocusChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onOk",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { WindowRef } from '../../../types/window-ref';\n\n@Component({\n  selector: 'kirby-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  // tslint:disable-next-line: no-host-metadata-property\n  host: { '[class.ion-page]': 'false' }, //Ensure ion-page class doesn't get applied by Ionic Modal Controller\n})\nexport class AlertComponent implements AfterViewInit {\n  readonly BLUR_WRAPPER_DELAY_IN_MS = 50;\n  @ViewChild('alertWrapper', { static: true }) private alertWrapper: ElementRef;\n  private scrollY: number = Math.abs(this.windowRef.nativeWindow.scrollY);\n\n  title$: Observable<string>;\n  @Input()\n  set title(title: string | Observable<string>) {\n    this.title$ = typeof title === 'string' ? of(title) : title;\n  }\n\n  message$: Observable<string>;\n  @Input()\n  set message(message: string & Observable<string>) {\n    this.message$ = typeof message === 'string' ? of(message) : message;\n  }\n\n  @Input() iconName: string;\n  @Input() iconThemeColor: string;\n  @Input() okBtnText: string;\n  @Input() okBtnIsDestructive: boolean;\n  @Input() cancelBtnText: string;\n\n  constructor(private elementRef: ElementRef<HTMLElement>, private windowRef: WindowRef) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.alertWrapper.nativeElement.focus();\n      this.alertWrapper.nativeElement.blur();\n    }, this.BLUR_WRAPPER_DELAY_IN_MS);\n  }\n\n  onFocusChange() {\n    // This fixes an undesired scroll behaviour occurring on keyboard-tabbing\n    this.windowRef.nativeWindow.scrollTo({ top: this.scrollY });\n  }\n\n  onCancel() {\n    const ionModalElement = this.elementRef.nativeElement.closest('ion-modal');\n    ionModalElement && ionModalElement.dismiss(false);\n  }\n\n  onOk() {\n    const ionModalElement = this.elementRef.nativeElement.closest('ion-modal');\n    ionModalElement && ionModalElement.dismiss(true);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\narticle {\n  overflow: hidden;\n  padding: size('s');\n  padding-top: size('m');\n  @include media('<small') {\n    padding: size('xxs');\n  }\n}\n\n.buttongroup {\n  display: flex;\n  justify-content: space-around;\n\n  button {\n    width: 50%;\n    margin-left: 6px;\n    margin-right: 6px;\n  }\n}\n",
          "styleUrl": "./alert.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "title": {
          "name": "title",
          "setSignature": {
            "name": "title",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "title",
                "type": "string | Observable<string>",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "title",
                "type": "string | Observable<string>",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "message": {
          "name": "message",
          "setSignature": {
            "name": "message",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "message",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "message",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<article #alertWrapper>\n  <kirby-empty-state\n    [iconName]=\"iconName\"\n    [themeColor]=\"iconThemeColor\"\n    [title]=\"title$ | async\"\n    [subtitle]=\"message$ | async\"\n  ></kirby-empty-state>\n  <div class=\"buttongroup\">\n    <button\n      kirby-button\n      *ngIf=\"cancelBtnText\"\n      attentionLevel=\"3\"\n      class=\"cancel-btn\"\n      (click)=\"onCancel()\"\n    >\n      {{ cancelBtnText }}\n    </button>\n    <button\n      kirby-button\n      [size]=\"cancelBtnText ? null : 'lg'\"\n      attentionLevel=\"1\"\n      class=\"ok-btn\"\n      [isDestructive]=\"okBtnIsDestructive\"\n      (click)=\"onOk()\"\n    >\n      {{ okBtnText }}\n    </button>\n  </div>\n</article>\n"
    },
    {
      "name": "AppComponent",
      "id": "component-AppComponent-bd33ee9f352b1b962efe65327450f9d5",
      "file": "libs/designsystem/src/lib/components/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-app",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "ionAppElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonAppElement>",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonApp, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "routerOutlet",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": true,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "RouterOutletComponent, {static: false, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerInputs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ContentChild, ElementRef, AfterContentInit, ViewChild } from '@angular/core';\nimport { IonApp } from '@ionic/angular';\n\nimport { RouterOutletComponent } from '../router-outlet/router-outlet.component';\nimport { ModalController } from '../modal/services/modal.controller';\n\n@Component({\n  selector: 'kirby-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements AfterContentInit {\n  @ViewChild(IonApp, { static: true, read: ElementRef })\n  private ionAppElement: ElementRef<HTMLIonAppElement>;\n\n  @ContentChild(RouterOutletComponent, { static: false, read: ElementRef })\n  private routerOutlet?: ElementRef<HTMLElement>;\n\n  constructor(private modalController: ModalController) {}\n\n  ngAfterContentInit(): void {\n    if (this.routerOutlet && this.routerOutlet.nativeElement) {\n      this.modalController.registerPresentingElement(this.routerOutlet.nativeElement);\n    }\n\n    this.ionAppElement.nativeElement.componentOnReady().then(() => this.registerInputs());\n  }\n\n  registerInputs() {\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    // There is no Ionic event to hook into, so we'll use a timeout\n    // to ensure ion-device-hacks has run:\n    const ensureIonicDeviceHacksDelay = 250;\n    setTimeout(() => {\n      document.querySelectorAll('kirby-form-field').forEach((formField) => {\n        formField.dispatchEvent(new CustomEvent('kirbyRegisterFormField'));\n      });\n    }, ensureIonicDeviceHacksDelay);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  left: 0px;\n  right: 0px;\n  top: 0px;\n  bottom: 0px;\n  position: absolute;\n  contain: size layout style;\n  z-index: 0;\n  overflow: hidden;\n}\n",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit"],
      "templateData": "<ion-app>\n  <ng-content></ng-content>\n</ion-app>\n"
    },
    {
      "name": "AvatarComponent",
      "id": "component-AvatarComponent-f4a59acd8c3a0e145734e9d11a87cd3e",
      "file": "libs/designsystem/src/lib/components/avatar/avatar.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-avatar",
      "styleUrls": ["./avatar.component.scss"],
      "styles": [],
      "templateUrl": ["./avatar.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "altText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        },
        {
          "name": "imageSrc",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        },
        {
          "name": "overlay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean"
        },
        {
          "name": "shadow",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean"
        },
        {
          "name": "size",
          "defaultValue": "AvatarSize.SM",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "AvatarSize"
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string"
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "NotificationColor | BrandColor | \"medium\" | \"white\" | \"dark\" | \"light\" | \"semi-light\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "any"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\nimport { BrandColor, NotificationColor } from '@kirbydesign/core';\n\nexport enum AvatarSize {\n  XS = 'xs',\n  SM = 'sm',\n  MD = 'md',\n  LG = 'lg',\n}\n\n@Component({\n  selector: 'kirby-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AvatarComponent {\n  @Input() imageSrc: string;\n  @Input() altText: string;\n  @Input() shadow: boolean;\n  @Input() text: string;\n  @Input() overlay: boolean;\n  @Input() size: AvatarSize = AvatarSize.SM;\n  @Input()\n  themeColor: NotificationColor | BrandColor | 'medium' | 'white' | 'dark' | 'light' | 'semi-light';\n\n  @HostBinding('class')\n  get _cssClass() {\n    return [this.themeColor, this.size].filter((cssClass) => !!cssClass);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$diameter-xsmall: map-get($avatar-sizes, 'xs');\n$diameter-small: map-get($avatar-sizes, 's');\n$diameter-medium: map-get($avatar-sizes, 'm');\n$diameter-large: map-get($avatar-sizes, 'l');\n$badge-diameter: $avatar-badge-size;\n\n@function get-badge-position($avatar-diameter) {\n  $cos-to-45-degrees: 0.70710678118;\n  $avatar-radius: $avatar-diameter / 2;\n  $position-from-center: round($cos-to-45-degrees * $avatar-radius);\n  $position-from-edge: $avatar-radius - $position-from-center;\n  $badge-radius: $badge-diameter / 2;\n  $badge-position: $position-from-edge - $badge-radius;\n  @return $badge-position;\n}\n\n:host {\n  --kirby-badge-elevation: #{get-elevation(2)};\n  --kirby-badge-position: absolute;\n  --kirby-badge-right: #{get-badge-position($diameter-small)};\n  --kirby-badge-top: #{get-badge-position($diameter-small)};\n  --kirby-badge-z-index: 2;\n  position: relative;\n}\n\n.avatar {\n  //default to size 'sm'\n  width: $diameter-small;\n  height: $diameter-small;\n  border-radius: 50%;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: get-color('white');\n  color: get-color('light-contrast');\n\n  //default to icon size 'sm'\n  --kirby-icon-font-size: #{icon-font-size('sm')};\n\n  &.shadow {\n    box-shadow: 0px 2px 4px 2px rgba(113, 113, 113, 0.4);\n  }\n\n  &.overlay::before {\n    content: '';\n    background-color: get-color('black');\n    opacity: 0.05;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n\n  img {\n    object-fit: cover;\n    max-width: 100%;\n    height: 100%;\n    width: 100%;\n  }\n}\n\n:host(.xs) {\n  .avatar {\n    width: $diameter-xsmall;\n    height: $diameter-xsmall;\n    border-radius: 8px;\n\n    .avatar-text {\n      font-size: font-size('s');\n    }\n  }\n}\n\n:host-context(kirby-progress-circle.sm),\n:host(.sm) {\n  .avatar {\n    width: $diameter-small;\n    height: $diameter-small;\n\n    .avatar-text {\n      font-size: font-size('s');\n    }\n  }\n}\n\n:host-context(kirby-progress-circle.md),\n:host(.md) {\n  --kirby-badge-right: #{get-badge-position($diameter-medium)};\n  --kirby-badge-top: #{get-badge-position($diameter-medium)};\n\n  .avatar {\n    width: $diameter-medium;\n    height: $diameter-medium;\n\n    --kirby-icon-font-size: #{icon-font-size('md')};\n\n    .avatar-text {\n      font-size: font-size('m');\n    }\n  }\n}\n\n:host-context(kirby-progress-circle.lg),\n:host(.lg) {\n  --kirby-badge-right: #{get-badge-position($diameter-large)};\n  --kirby-badge-top: #{get-badge-position($diameter-large)};\n\n  .avatar {\n    width: $diameter-large;\n    height: $diameter-large;\n\n    --kirby-icon-font-size: #{icon-font-size('lg')};\n\n    .avatar-text {\n      font-size: font-size('xl');\n    }\n  }\n}\n\n:host-context(kirby-item)[slot='start'] {\n  margin-inline-end: size('xs');\n\n  &.xs {\n    margin-inline-end: size('s');\n  }\n}\n\n@each $color-name,\n  $color-value\n    in map-merge(\n      $main-colors,\n      (\n        'white': get-color('white'),\n        'semi-light': get-color('semi-light'),\n      )\n    )\n{\n  :host(.#{$color-name}) {\n    .avatar {\n      background-color: get-color($color-name);\n      color: get-color($color-name + '-contrast');\n    }\n  }\n}\n",
          "styleUrl": "./avatar.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_cssClass": {
          "name": "_cssClass",
          "getSignature": {
            "name": "_cssClass",
            "type": "",
            "returnType": "",
            "line": 29
          }
        }
      },
      "templateData": "<div class=\"avatar\" [ngClass]=\"{ shadow: shadow, overlay: overlay }\">\n  <img *ngIf=\"imageSrc\" [src]=\"imageSrc\" [attr.alt]=\"altText\" />\n  <ng-content *ngIf=\"!text\" select=\"kirby-icon\"></ng-content>\n  <span class=\"avatar-text\" *ngIf=\"text\">{{ text }}</span>\n</div>\n<ng-content select=\"kirby-badge\"></ng-content>\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-440b66b2dc8ac627f9a9f60cbd1ef89c",
      "file": "libs/designsystem/src/lib/components/button/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "button[kirby-button],Button[kirby-button]",
      "styleUrls": ["./button.component.scss"],
      "styles": [],
      "templateUrl": ["./button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": ""
        },
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "\"full\" | \"block\""
        },
        {
          "name": "isDestructive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "boolean"
        },
        {
          "name": "isFloating",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "boolean"
        },
        {
          "name": "size",
          "defaultValue": "ButtonSize.MD",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "ButtonSize"
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "NotificationColor"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_isIconLeft",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [121]
        },
        {
          "name": "_isIconRight",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [121]
        },
        {
          "name": "destructive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.destructive'"
            }
          ]
        },
        {
          "name": "hasText",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [121]
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IconComponent",
          "optional": false,
          "description": "",
          "line": 79,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "IconComponent"
            }
          ]
        },
        {
          "name": "iconElementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 81,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "IconComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "isAttentionLevel1",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.attention-level1'"
            }
          ]
        },
        {
          "name": "isAttentionLevel2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.attention-level2'"
            }
          ]
        },
        {
          "name": "isAttentionLevel3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.attention-level3'"
            }
          ]
        },
        {
          "name": "isAttentionLevel4",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 34,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.attention-level4'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "any"
        },
        {
          "name": "class.attention-level1",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean"
        },
        {
          "name": "class.attention-level2",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean"
        },
        {
          "name": "class.attention-level3",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean"
        },
        {
          "name": "class.attention-level4",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean"
        },
        {
          "name": "class.destructive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean"
        },
        {
          "name": "class.floating",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean"
        },
        {
          "name": "class.icon-left",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean"
        },
        {
          "name": "class.icon-only",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean"
        },
        {
          "name": "class.icon-right",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\nimport { NotificationColor } from '@kirbydesign/core';\n\nimport { IconComponent } from '../icon/icon.component';\n\nexport enum ButtonSize {\n  SM = 'sm',\n  MD = 'md',\n  LG = 'lg',\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[kirby-button],Button[kirby-button]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements AfterContentInit {\n  @HostBinding('class.attention-level1')\n  isAttentionLevel1: boolean = true; // Default\n  @HostBinding('class.attention-level2')\n  isAttentionLevel2: boolean;\n  @HostBinding('class.attention-level3')\n  isAttentionLevel3: boolean;\n  @HostBinding('class.attention-level4')\n  isAttentionLevel4: boolean;\n  @HostBinding('class.destructive')\n  destructive: boolean = false; // Default\n\n  @HostBinding('class.floating')\n  public get isButtonFloating(): boolean {\n    return this.isFloating;\n  }\n\n  @HostBinding('class.icon-only')\n  public get isIconOnly(): boolean {\n    return !!this.icon && !this.hasText;\n  }\n  private _isIconLeft = false;\n  @HostBinding('class.icon-left')\n  public get isIconLeft() {\n    return this._isIconLeft;\n  }\n  private _isIconRight = false;\n  @HostBinding('class.icon-right')\n  public get isIconRight() {\n    return this._isIconRight;\n  }\n\n  @HostBinding('class')\n  get _cssClass() {\n    return [this.themeColor, this.size].filter((cssClass) => !!cssClass);\n  }\n\n  @Input() set attentionLevel(level: '1' | '2' | '3' | '4') {\n    this.isAttentionLevel1 = level === '1';\n    this.isAttentionLevel2 = level === '2';\n    this.isAttentionLevel3 = level === '3';\n    this.isAttentionLevel4 = level === '4';\n  }\n  @Input() set isDestructive(state: boolean) {\n    this.destructive = state;\n  }\n  @Input()\n  themeColor: NotificationColor;\n  @Input() expand: 'full' | 'block';\n  @Input() isFloating: boolean = false;\n  @Input()\n  size: ButtonSize = ButtonSize.MD;\n\n  @ContentChild(IconComponent) icon: IconComponent;\n  @ContentChild(IconComponent, { read: ElementRef })\n  iconElementRef: ElementRef<HTMLElement>;\n  private hasText = false;\n\n  constructor(private elementRef: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit(): void {\n    this.hasText = !!this.elementRef.nativeElement.textContent;\n    if (this.iconElementRef !== undefined && this.hasText) {\n      this._isIconLeft =\n        this.elementRef.nativeElement.firstChild === this.iconElementRef.nativeElement;\n      this._isIconRight = !this._isIconLeft;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$button-width: (\n  sm: 44px,\n  md: 88px,\n  lg: 220px,\n) !default;\n\n@function button-width($key) {\n  @return map-get($button-width, $key);\n}\n\n@mixin button-sm {\n  font-size: font-size('xs');\n  height: size('l');\n  min-width: button-width('sm');\n\n  &:not(.icon-only) {\n    padding-left: size('s');\n    padding-right: size('s');\n  }\n\n  &.icon-only {\n    width: size('l');\n    min-width: unset;\n  }\n\n  &.icon-left,\n  &.icon-right {\n    --kirby-icon-font-size: #{size('s')};\n    min-width: button-width('md');\n  }\n}\n\n@mixin button-lg {\n  font-size: font-size('n');\n  height: size('xxl');\n  min-width: button-width('lg');\n\n  &.icon-only {\n    width: size('xxl');\n    min-width: unset;\n  }\n}\n\n@mixin button-attentionlevel1 {\n  --kirby-button-background-color: #{get-color('primary')};\n  --kirby-button-color: #{get-color('primary-contrast')};\n\n  &.destructive {\n    --kirby-button-background-color: #{get-color('danger')};\n    --kirby-button-color: #{get-color('danger-contrast')};\n  }\n}\n\n@mixin button-attentionlevel2 {\n  --kirby-button-background-color: #{get-color('white')};\n  --kirby-button-color: #{get-color('white-contrast')};\n\n  &.destructive {\n    --kirby-button-background-color: #{get-color('light')};\n    --kirby-button-color: #{get-color('danger')};\n  }\n}\n\n@mixin button-attentionlevel3 {\n  // Expect canvas underneath to be a light color\n  --kirby-button-background-color: transparent;\n  --kirby-button-color: #{get-color('black')};\n  --kirby-button-border-color: #{get-color('medium')};\n\n  &.destructive {\n    --kirby-button-color: #{get-color('danger')};\n  }\n}\n\n@mixin button-attentionlevel4 {\n  // Expect canvas underneath to be a light color\n  --kirby-button-background-color: transparent;\n  --kirby-button-color: #{get-color('black')};\n\n  &.destructive {\n    --kirby-button-color: #{get-color('danger')};\n  }\n}\n\n:host {\n  @include accessible-target-size();\n\n  font-family: var(--kirby-font-family);\n  background-color: var(--kirby-button-background-color, initial);\n  color: var(--kirby-button-color, inherit);\n  border-radius: $border-radius-round;\n  box-sizing: border-box; // Ensure border is not added to button height\n  cursor: pointer;\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 200ms linear;\n  user-select: none;\n  vertical-align: middle;\n  white-space: nowrap;\n\n  // we default to 'md' size.\n  font-size: font-size('s');\n  height: size('xl');\n  min-width: button-width('md');\n  padding: 0 size('m');\n  margin: size('xxxs');\n  line-height: line-height('s');\n\n  // Outline is applied on button border instead,\n  // to keep the rounded shape:\n  outline: none;\n  border: 1px solid var(--kirby-button-border-color, transparent);\n\n  &.icon-left {\n    padding-left: size('xs');\n    padding-right: size('s');\n    --kirby-icon-margin-right: #{size('xxs')};\n  }\n\n  &.icon-right {\n    padding-left: size('s');\n    padding-right: size('xs');\n    --kirby-icon-margin-left: #{size('xxs')};\n  }\n\n  &.icon-only {\n    width: size('xl');\n    padding: 0;\n    min-width: unset;\n  }\n\n  &.sm {\n    @include button-sm;\n  }\n\n  &.lg {\n    @include button-lg;\n  }\n\n  &.attention-level1 {\n    @include button-attentionlevel1;\n  }\n\n  &.attention-level2 {\n    @include button-attentionlevel2;\n  }\n\n  &.attention-level3 {\n    @include button-attentionlevel3;\n  }\n\n  &.attention-level4 {\n    @include button-attentionlevel4;\n  }\n\n  &[expand='block'] {\n    width: 100%;\n  }\n\n  // Only apply focus ring if pointer device can hover\n  // (effectively desktop/mouse devices):\n  @include focus() {\n    --kirby-button-border-color: #{$focus-ring-color};\n  }\n\n  @include hover() {\n    opacity: 0.8;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n\n  &:disabled {\n    background-color: get-color('semi-light');\n    color: get-color('semi-dark-shade');\n    border-color: transparent;\n    pointer-events: none;\n  }\n\n  :host-context(.default),\n  :host-context(.kirby-color-brightness-white) {\n    &.attention-level2 {\n      --kirby-button-background-color: #{get-color('black')};\n      --kirby-button-color: #{get-color('black-contrast')};\n    }\n  }\n\n  :host-context(.kirby-color-brightness-dark) {\n    &.attention-level3 {\n      --kirby-button-border-color: #{get-color('white')};\n      --kirby-button-color: #{get-color('white')};\n    }\n    &.attention-level4 {\n      --kirby-button-color: #{get-color('white')};\n    }\n  }\n\n  &.floating {\n    $fab-size: 64px;\n    width: $fab-size !important;\n    height: $fab-size !important;\n    min-width: unset;\n\n    &:not(:disabled) {\n      box-shadow: get-elevation(8);\n    }\n  }\n}\n\n:host-context(kirby-item)[slot='end'] {\n  margin-inline-start: size('s');\n}\n\n:host-context(kirby-alert).ok-btn {\n  --kirby-button-background-color: #{get-color('success')};\n  --kirby-button-color: #{get-color('success-contrast')};\n}\n\n// Temp fix for https://github.com/angular/angular-cli/issues/13854#issuecomment-470831308\n/* clean-css ignore:start */\n:host-context(ion-toolbar kirby-page-actions) {\n  font-size: font-size('s');\n  margin: 0;\n  height: $fat-finger-size;\n\n  &.icon-only {\n    width: $fat-finger-size;\n  }\n\n  &.attention-level1,\n  &.attention-level2,\n  &.attention-level3,\n  &.attention-level4 {\n    @include button-attentionlevel4;\n  }\n}\n/* clean-css ignore:end */\n\n// Temp fix for https://github.com/angular/angular-cli/issues/13854#issuecomment-470831308\n/* clean-css ignore:start */\n:host-context(.page-title kirby-page-actions) {\n  &.attention-level1,\n  &.attention-level2,\n  &.attention-level3,\n  &.attention-level4 {\n    @include button-attentionlevel2;\n  }\n}\n/* clean-css ignore:end */\n\n// Temp fix for https://github.com/angular/angular-cli/issues/13854#issuecomment-470831308\n/* clean-css ignore:start */\n:host-context(kirby-empty-state .content) {\n  @include button-lg;\n}\n/* clean-css ignore:end */\n\n:host-context(kirby-dropdown) {\n  justify-content: space-between;\n}\n\n:host-context(kirby-toggle-button) {\n  @each $color-name, $color-value in $notification-colors {\n    &.#{$color-name} {\n      --kirby-button-background-color: #{get-color($color-name)};\n      --kirby-button-color: #{get-color($color-name + '-contrast')};\n    }\n  }\n}\n",
          "styleUrl": "./button.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 82,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit"],
      "accessors": {
        "isButtonFloating": {
          "name": "isButtonFloating",
          "getSignature": {
            "name": "isButtonFloating",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        },
        "isIconOnly": {
          "name": "isIconOnly",
          "getSignature": {
            "name": "isIconOnly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "isIconLeft": {
          "name": "isIconLeft",
          "getSignature": {
            "name": "isIconLeft",
            "type": "",
            "returnType": "",
            "line": 49
          }
        },
        "isIconRight": {
          "name": "isIconRight",
          "getSignature": {
            "name": "isIconRight",
            "type": "",
            "returnType": "",
            "line": 54
          }
        },
        "_cssClass": {
          "name": "_cssClass",
          "getSignature": {
            "name": "_cssClass",
            "type": "",
            "returnType": "",
            "line": 59
          }
        },
        "attentionLevel": {
          "name": "attentionLevel",
          "setSignature": {
            "name": "attentionLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "level",
                "type": "\"1\" | \"2\" | \"3\" | \"4\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "level",
                "type": "\"1\" | \"2\" | \"3\" | \"4\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "isDestructive": {
          "name": "isDestructive",
          "setSignature": {
            "name": "isDestructive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "state",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "state",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<ng-content></ng-content>\n"
    },
    {
      "name": "CalendarComponent",
      "id": "component-CalendarComponent-0404f45d49279e72125481c3a349fb95",
      "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "CalendarHelper"
        }
      ],
      "selector": "kirby-calendar",
      "styleUrls": ["./calendar.component.scss"],
      "styles": [],
      "templateUrl": ["./calendar.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "alwaysEnableToday",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "boolean"
        },
        {
          "name": "customLocales",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "literal type"
        },
        {
          "name": "disabledDates",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 125,
          "type": "[]"
        },
        {
          "name": "disableFutureDates",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "boolean"
        },
        {
          "name": "disablePastDates",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "boolean"
        },
        {
          "name": "disableWeekends",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean"
        },
        {
          "name": "maxDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 152,
          "type": ""
        },
        {
          "name": "minDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 141,
          "type": ""
        },
        {
          "name": "selectedDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 111,
          "type": ""
        },
        {
          "name": "timezone",
          "defaultValue": "'local'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "\"local\" | \"UTC\""
        },
        {
          "name": "todayDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 133,
          "type": ""
        },
        {
          "name": "yearNavigatorOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Configuration for the year navigator.\n\nInternally, calendar component:\n- bases yearNavigatorOptions.from and yearNavigatorOptions.to on todayDate if a number is provided\n- prioritizes minDate and maxDate over yearNavigatorOptions.from and yearNavigatorOptions.to",
          "description": "<p>Configuration for the year navigator.</p>\n<p>Internally, calendar component:</p>\n<ul>\n<li>bases yearNavigatorOptions.from and yearNavigatorOptions.to on todayDate if a number is provided</li>\n<li>prioritizes minDate and maxDate over yearNavigatorOptions.from and yearNavigatorOptions.to</li>\n</ul>\n",
          "line": 89,
          "type": "CalendarYearNavigatorConfig"
        }
      ],
      "outputsClass": [
        {
          "name": "dateChange",
          "defaultValue": "new EventEmitter<Date>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "EventEmitter"
        },
        {
          "name": "dateSelect",
          "defaultValue": "new EventEmitter<Date>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "EventEmitter"
        },
        {
          "name": "yearSelect",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabledDates",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date[]",
          "optional": false,
          "description": "",
          "line": 99,
          "modifierKind": [121]
        },
        {
          "name": "_maxDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [121]
        },
        {
          "name": "_minDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [121]
        },
        {
          "name": "_month",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CalendarCell[][]",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "_selectedDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 98,
          "modifierKind": [121]
        },
        {
          "name": "_todayDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [121]
        },
        {
          "name": "_weekDays",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 92
        },
        {
          "name": "activeMonth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 97,
          "modifierKind": [121]
        },
        {
          "name": "calendarContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 72,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'calendarContainer', {static: false}"
            }
          ]
        },
        {
          "name": "includedLocales",
          "defaultValue": "{ da, enGB, enUS }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [121]
        },
        {
          "name": "locale",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Locale",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [121]
        },
        {
          "name": "selectedDay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CalendarCell",
          "optional": false,
          "description": "",
          "line": 93,
          "modifierKind": [121]
        },
        {
          "name": "timeZoneName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 104,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "_changeMonth",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 426,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_changeYear",
          "args": [
            {
              "name": "year",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 430,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "year",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onDateSelected",
          "args": [
            {
              "name": "newDay",
              "type": "CalendarCell",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 401,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "newDay",
              "type": "CalendarCell",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "changeActiveView",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "unit",
              "type": "TimeUnit",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 436,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "unit",
              "type": "TimeUnit",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "chunk",
          "args": [
            {
              "name": "array",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "size",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 380,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "array",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "size",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "formatWithLocale",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "formatString",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 194,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "formatString",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCalendarDay",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "today",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "monthStart",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "CalendarDay",
          "typeParameters": [],
          "line": 337,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "today",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "monthStart",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCell",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 465,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCssClasses",
          "args": [
            {
              "name": "day",
              "type": "CalendarDay",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "isSelectable",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "isSelected",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 361,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "day",
              "type": "CalendarDay",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isSelectable",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isSelected",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDateFromNavigableYear",
          "args": [
            {
              "name": "navigableYear",
              "type": "number | Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Date",
          "typeParameters": [],
          "line": 496,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "navigableYear",
              "type": "number | Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFirstLetterOfWeekDayCapitalized",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 284,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getHelperOptions",
          "args": [],
          "optional": false,
          "returnType": "CalendarOptions",
          "typeParameters": [],
          "line": 480,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getWeekDays",
          "args": [],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 273,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getYearsBetweenDates",
          "args": [
            {
              "name": "startDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "endDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 502,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "startDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "endDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "hasDateChanged",
          "args": [
            {
              "name": "newDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "previousDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 288,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "newDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "previousDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isDisabledDate",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 298,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isSelectable",
          "args": [
            {
              "name": "day",
              "type": "CalendarDay",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 348,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "day",
              "type": "CalendarDay",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mapLocale",
          "args": [
            {
              "name": "locale",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Locale",
          "typeParameters": [],
          "line": 200,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "locale",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 215,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 224,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "normalizeDate",
          "args": [
            {
              "name": "dateLocalOrUTC",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 254,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "dateLocalOrUTC",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onChangeMonth",
          "args": [
            {
              "name": "direction",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 421,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "direction",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectedDateChange",
          "args": [
            {
              "name": "newDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 388,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "newDate",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "refreshActiveMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 304,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setActiveMonth",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "new Date()"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 241,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "new Date()",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "subtractTimezoneOffset",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Date",
          "typeParameters": [],
          "line": 491,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.has-year-navigator",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 185,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport {\n  add,\n  differenceInDays,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  getYear,\n  isAfter,\n  isBefore,\n  isSameDay,\n  isSameMonth,\n  isWeekend,\n  Locale as LocaleDateFns,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n} from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { da, enGB, enUS } from 'date-fns/locale';\n\nimport { capitalizeFirstLetter } from '@kirbydesign/core';\n\nimport { CalendarCell } from './helpers/calendar-cell.model';\nimport { CalendarOptions } from './helpers/calendar-options.model';\nimport { CalendarHelper } from './helpers/calendar.helper';\nimport { CalendarYearNavigatorConfig } from './options/calendar-year-navigator-config';\n\nexport type Locale = LocaleDateFns;\ninterface CalendarDay {\n  isCurrentMonth: boolean;\n  isToday: boolean;\n  isWeekend: boolean;\n  isPast: boolean;\n  isFuture: boolean;\n  isDisabled: boolean;\n}\n\nenum TimeUnit {\n  years = 'years',\n  months = 'months',\n  weeks = 'weeks',\n  days = 'days',\n  hours = 'hours',\n  minutes = 'minutes',\n  seconds = 'seconds',\n  milliseconds = 'milliseconds',\n}\n\n@Component({\n  selector: 'kirby-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n  providers: [CalendarHelper],\n})\nexport class CalendarComponent implements OnInit, AfterViewInit, OnChanges {\n  @ViewChild('calendarContainer', { static: false }) calendarContainer: ElementRef;\n  @Output() dateChange = new EventEmitter<Date>();\n  @Output() dateSelect = new EventEmitter<Date>();\n  @Output() yearSelect = new EventEmitter<number>();\n  @Input() timezone: 'local' | 'UTC' = 'local';\n  @Input() disableWeekends = false;\n  @Input() disablePastDates = false;\n  @Input() disableFutureDates = false;\n  @Input() alwaysEnableToday = false;\n  @Input() customLocales: { [key: string]: Locale } = {};\n  /**\n   * Configuration for the year navigator.\n   *\n   * Internally, calendar component:\n   * - bases yearNavigatorOptions.from and yearNavigatorOptions.to on todayDate if a number is provided\n   * - prioritizes minDate and maxDate over yearNavigatorOptions.from and yearNavigatorOptions.to\n   */\n  @Input() yearNavigatorOptions: CalendarYearNavigatorConfig;\n\n  _month: CalendarCell[][];\n  _weekDays: string[];\n  private selectedDay: CalendarCell;\n  // NOTE: Internally, all Dates\n  // are normalized to point to local timezone midnight, regardless of the timezone\n  // setting.\n  private activeMonth: Date;\n  private _selectedDate: Date;\n  private _disabledDates: Date[] = [];\n  private _todayDate: Date;\n  private _minDate: Date;\n  private _maxDate: Date;\n  private locale: Locale;\n  private timeZoneName: string;\n  private includedLocales = { da, enGB, enUS };\n\n  get selectedDate(): Date {\n    return this._selectedDate;\n  }\n\n  @Input() set selectedDate(valueLocalOrUTC: Date) {\n    const value = this.normalizeDate(valueLocalOrUTC);\n    this.setActiveMonth(value);\n\n    if (this.hasDateChanged(value, this._selectedDate)) {\n      this.onSelectedDateChange(value);\n      this._selectedDate = value;\n    }\n  }\n\n  get disabledDates(): Date[] {\n    return this._disabledDates;\n  }\n\n  @Input() set disabledDates(value: Date[]) {\n    this._disabledDates = (value || []).map((date) => this.normalizeDate(date));\n  }\n\n  get todayDate(): Date {\n    return this._todayDate;\n  }\n\n  @Input() set todayDate(value: Date) {\n    this._todayDate = this.normalizeDate(value);\n  }\n\n  get minDate(): Date {\n    return this._minDate;\n  }\n\n  @Input() set minDate(value: Date) {\n    if (value && this.activeMonth && isBefore(this.activeMonth, value)) {\n      this.setActiveMonth(value);\n    }\n    this._minDate = this.normalizeDate(value);\n  }\n\n  get maxDate(): Date {\n    return this._maxDate;\n  }\n\n  @Input() set maxDate(value: Date) {\n    if (value && this.activeMonth && isAfter(this.activeMonth, value)) {\n      this.setActiveMonth(value);\n    }\n    this._maxDate = this.normalizeDate(value);\n  }\n\n  get activeMonthName(): string {\n    return capitalizeFirstLetter(this.formatWithLocale(this.activeMonth, 'MMMM'));\n  }\n\n  get activeYear(): string {\n    return this.formatWithLocale(this.activeMonth, 'yyyy');\n  }\n\n  /**\n   * Gets navigable years for year navigator based on yearNavigatorOptions.\n   */\n  get navigableYears(): string[] {\n    const dateOfFirstNavigableYear =\n      this.minDate || this.getDateFromNavigableYear(this.yearNavigatorOptions.from);\n\n    const dateOfLastNavigableYear =\n      this.maxDate || this.getDateFromNavigableYear(this.yearNavigatorOptions.to);\n\n    return this.getYearsBetweenDates(dateOfFirstNavigableYear, dateOfLastNavigableYear);\n  }\n\n  get navigatedYear(): number {\n    return this.navigableYears.indexOf(this.activeYear);\n  }\n\n  @HostBinding('class.has-year-navigator')\n  get _hasYearNavigator() {\n    return !!this.yearNavigatorOptions;\n  }\n\n  constructor(private calendarHelper: CalendarHelper, @Inject(LOCALE_ID) locale: string) {\n    this.locale = this.mapLocale(locale);\n    this.timeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  private formatWithLocale(date: Date, formatString: string): string {\n    return format(date, formatString, {\n      locale: this.locale,\n    });\n  }\n\n  private mapLocale(locale: string): Locale {\n    if (locale === 'en') {\n      locale = 'enGB'; // if english locale is provided without region, we default to GB\n    }\n    locale = locale.replace('-', '');\n    const availableLocales = { ...this.includedLocales, ...this.customLocales };\n\n    return availableLocales[locale] || this.includedLocales.enGB; // Default to enGB if injected locale doesnt exist\n  }\n\n  ngOnInit() {\n    this._weekDays = this.getWeekDays();\n    this.setActiveMonth(this.selectedDate);\n  }\n\n  ngAfterViewInit() {\n    this.calendarHelper.init(\n      this.calendarContainer,\n      this.getHelperOptions(),\n      this._onDateSelected.bind(this),\n      this.onChangeMonth.bind(this)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.activeMonth) return;\n    if (\n      changes.disableWeekends ||\n      changes.disablePastDates ||\n      changes.disableFutureDates ||\n      changes.disabledDates ||\n      changes.minDate ||\n      changes.maxDate ||\n      changes.todayDate ||\n      changes.timezone\n    ) {\n      this.refreshActiveMonth();\n      this.calendarHelper.update(this.getHelperOptions());\n    }\n  }\n\n  private setActiveMonth(date: Date = new Date()) {\n    if (!this.activeMonth || !isSameMonth(this.activeMonth, date)) {\n      this.activeMonth = startOfMonth(date);\n      this.refreshActiveMonth();\n      this.calendarHelper.update(this.getHelperOptions());\n    }\n  }\n\n  // For leniency, the component will accept any Date that points to either UTC midnight\n  // or to local timezone midnight although we will internally normalize the representation\n  // of all received dates to point to local timezone midnight.\n  // We currently log no warnings if the date doesn't match the timezone setting or\n  // if it doesn't point to midnight.\n  private normalizeDate(dateLocalOrUTC: Date) {\n    if (!dateLocalOrUTC) return;\n\n    if (startOfDay(dateLocalOrUTC).getTime() === dateLocalOrUTC.getTime()) {\n      // date is local timezone midnight\n      return dateLocalOrUTC;\n    }\n    if (\n      startOfDay(utcToZonedTime(dateLocalOrUTC, this.timeZoneName)).getTime() ===\n      utcToZonedTime(dateLocalOrUTC, this.timeZoneName).getTime()\n    ) {\n      // the date is a UTC midnight; create the equivalent local timezone midnight date\n      const normalizedUTCdate = utcToZonedTime(dateLocalOrUTC, this.timeZoneName);\n      return normalizedUTCdate;\n    }\n    // does not point to midnight so we make it\n    return startOfDay(dateLocalOrUTC);\n  }\n\n  private getWeekDays(): string[] {\n    const now = new Date();\n\n    const week = eachDayOfInterval({\n      start: startOfWeek(now, { locale: this.locale }),\n      end: endOfWeek(now, { locale: this.locale }),\n    });\n\n    return week.map((date) => this.getFirstLetterOfWeekDayCapitalized(date));\n  }\n\n  private getFirstLetterOfWeekDayCapitalized(date: Date) {\n    return this.formatWithLocale(date, 'EEEEE');\n  }\n\n  private hasDateChanged(newDate: Date, previousDate: Date): boolean {\n    if (!newDate && !previousDate) {\n      return false;\n    }\n    if (newDate instanceof Date && !previousDate) {\n      return true;\n    }\n    return !isSameDay(newDate, previousDate);\n  }\n\n  private isDisabledDate(date: Date): boolean {\n    return this.disabledDates.some((disabledDate) => {\n      return isSameDay(disabledDate, date);\n    });\n  }\n\n  refreshActiveMonth() {\n    if (!this.activeMonth) return;\n\n    const monthStart = startOfMonth(this.activeMonth);\n    const monthEnd = endOfMonth(this.activeMonth);\n    const startOfFirstWeek = startOfWeek(monthStart, { locale: this.locale });\n    const endOfLastWeek = endOfWeek(monthEnd, { locale: this.locale });\n    const totalDayCount = differenceInDays(endOfLastWeek, startOfFirstWeek) + 1;\n    const today = this.todayDate ? startOfDay(this.todayDate) : startOfDay(new Date());\n\n    const daysArray = Array.from(Array(totalDayCount).keys());\n\n    const days: CalendarCell[] = daysArray.map((number) => {\n      const cellDate = add(startOfFirstWeek, { [TimeUnit.days]: number });\n      const day = this.getCalendarDay(cellDate, today, monthStart);\n\n      const isSelectable = this.isSelectable(day, cellDate);\n      const isSelected = isSameDay(this.selectedDate, cellDate);\n      const cell = {\n        date: cellDate.getDate(),\n        isCurrentMonth: day.isCurrentMonth,\n        isSelectable,\n        isSelected,\n        cssClasses: this.getCssClasses(day, isSelectable, isSelected),\n      };\n      if (isSelected) {\n        this.selectedDay = cell;\n      }\n      return cell;\n    });\n    this._month = this.chunk(days, 7);\n  }\n\n  private getCalendarDay(date: Date, today: Date, monthStart: Date): CalendarDay {\n    return {\n      isToday: isSameDay(today, date),\n      isPast: isBefore(date, today),\n      isFuture: isAfter(date, today),\n      isWeekend: isWeekend(date),\n      isCurrentMonth: isSameMonth(date, monthStart),\n      isDisabled: this.isDisabledDate(date),\n    };\n  }\n\n  private isSelectable(day: CalendarDay, date: Date) {\n    return (\n      (this.alwaysEnableToday && day.isToday) ||\n      (!day.isDisabled &&\n        day.isCurrentMonth &&\n        !(this.disableWeekends && day.isWeekend) &&\n        !(this.disablePastDates && day.isPast) &&\n        !(this.disableFutureDates && day.isFuture) &&\n        !(this.minDate && isBefore(date, this.minDate)) &&\n        !(this.maxDate && isAfter(date, this.maxDate)))\n    );\n  }\n\n  private getCssClasses(day: CalendarDay, isSelectable: boolean, isSelected: boolean) {\n    const cssClasses = {\n      'current-month': day.isCurrentMonth,\n      weekend: day.isWeekend,\n      today: day.isToday,\n      selectable: isSelectable,\n      selected: isSelected,\n      past: day.isPast,\n      disabled: day.isDisabled,\n    };\n    let cssClassString = 'day';\n    for (const key in cssClasses) {\n      if (cssClasses[key]) {\n        cssClassString += ' ' + key;\n      }\n    }\n    return cssClassString;\n  }\n\n  private chunk(array: any[], size: number) {\n    const results = [];\n    while (array.length) {\n      results.push(array.splice(0, size));\n    }\n    return results;\n  }\n\n  private onSelectedDateChange(newDate: Date): void {\n    if (this.selectedDay) {\n      this.selectedDay.isSelected = false;\n    }\n\n    const newDay = this.getCell(newDate);\n    if (newDay) {\n      newDay.isSelected = true;\n      this.selectedDay = newDay;\n    }\n    this.calendarHelper.setSelectedDay(newDate.getDate());\n  }\n\n  _onDateSelected(newDay: CalendarCell) {\n    if (newDay.isSelectable && newDay.date) {\n      let newDate = new Date(this.activeMonth);\n\n      if (this.timezone === 'UTC') {\n        newDate = zonedTimeToUtc(this.subtractTimezoneOffset(newDate), this.timeZoneName);\n      }\n\n      newDate.setDate(newDay.date);\n      const dateToEmit = newDate;\n\n      if (this.hasDateChanged(newDate, this._selectedDate)) {\n        this.onSelectedDateChange(newDate);\n        this._selectedDate = newDate;\n        this.dateChange.emit(dateToEmit);\n      }\n      this.dateSelect.emit(dateToEmit);\n    }\n  }\n\n  private onChangeMonth(direction: number) {\n    this._changeMonth(direction);\n    this.calendarHelper.update(this.getHelperOptions());\n  }\n\n  _changeMonth(index: number) {\n    this.changeActiveView(index, TimeUnit.months);\n  }\n\n  _changeYear(year: string) {\n    const yearNumeric = Number(year);\n    this.changeActiveView(yearNumeric - getYear(this.activeMonth), TimeUnit.years);\n    this.yearSelect.emit(yearNumeric);\n  }\n\n  private changeActiveView(index: number, unit: TimeUnit) {\n    if (index === 0) return;\n    this.activeMonth = add(this.activeMonth, { [unit]: index });\n\n    this.refreshActiveMonth();\n  }\n\n  get _canNavigateBack(): boolean {\n    const reachedPastDatesLimit =\n      this.disablePastDates && isSameMonth(this.activeMonth, this.todayDate);\n\n    const reachedOrExceededMinDate =\n      this.minDate &&\n      (isSameMonth(this.activeMonth, this.minDate) || isBefore(this.activeMonth, this.minDate));\n\n    return !reachedPastDatesLimit && !reachedOrExceededMinDate;\n  }\n\n  get _canNavigateForward(): boolean {\n    const reachedFutureDatesLimit =\n      this.disableFutureDates && isSameMonth(this.activeMonth, this.todayDate);\n\n    const reachedOrExceededMaxDate =\n      this.maxDate &&\n      (isSameMonth(this.activeMonth, this.maxDate) || isAfter(this.activeMonth, this.maxDate));\n\n    return !reachedFutureDatesLimit && !reachedOrExceededMaxDate;\n  }\n\n  private getCell(date: Date) {\n    let foundDay = null;\n    if (date) {\n      for (let week of this._month) {\n        foundDay = week.find((day) => {\n          return day.isCurrentMonth && day.date === date.getDate();\n        });\n        if (foundDay) {\n          break;\n        }\n      }\n    }\n    return foundDay;\n  }\n\n  private getHelperOptions(): CalendarOptions {\n    return {\n      canNavigateBack: this._canNavigateBack,\n      canNavigateForward: this._canNavigateForward,\n      year: this.activeYear,\n      monthName: this.activeMonthName,\n      weekDays: this._weekDays,\n      month: this._month,\n    };\n  }\n\n  private subtractTimezoneOffset(date: Date): Date {\n    const timezoneOffsetInMs = date.getTimezoneOffset() * 60 * 1000;\n    return new Date(date.getTime() - timezoneOffsetInMs);\n  }\n\n  private getDateFromNavigableYear(navigableYear: number | Date): Date {\n    if (navigableYear instanceof Date) return navigableYear;\n    const today = this.todayDate || new Date();\n    return new Date(today.getFullYear() + navigableYear, 0, 1);\n  }\n\n  private getYearsBetweenDates(startDate: Date, endDate: Date): string[] {\n    // Ensure years are ordered correctly if parameters are switched:\n    const [startYear, endYear] = [startDate.getFullYear(), endDate.getFullYear()].sort();\n    const numberOfYears = endYear - startYear;\n    return Array.from({ length: numberOfYears + 1 }, (_, i) => (startYear + i).toString());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n$month-navigator-width: 80px;\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  user-select: none;\n  margin-bottom: size('xxs');\n}\n\nth,\ntd {\n  text-align: center;\n  padding: 0;\n\n  &:first-child {\n    padding-left: size('xxs');\n  }\n\n  &:last-child {\n    padding-right: size('xxs');\n  }\n}\n\nth {\n  height: 50px;\n  border-bottom: 1px solid get-color('background-color');\n}\n\n.header,\nth,\ntd {\n  background-color: transparent;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  margin: size('xxs');\n  margin-bottom: 0;\n}\n\n.month-navigator {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    background-color: transparent;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    height: size('xl');\n    width: size('xl');\n    padding: 0;\n  }\n\n  button:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n}\n\n.month-and-year {\n  user-select: none;\n\n  .month {\n    font-weight: font-weight('bold');\n    margin-right: size('xxs');\n  }\n}\n\n:host(.has-year-navigator) {\n  .month-navigator {\n    flex-grow: 0;\n  }\n\n  .month-and-year {\n    width: $month-navigator-width;\n    margin: 0 size('xxs');\n    text-align: center;\n  }\n\n  .month {\n    margin-right: 0;\n  }\n}\n\n.day {\n  $dayWidth: size('xl');\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: $dayWidth / 2;\n  width: $dayWidth;\n  height: $dayWidth;\n  margin: size('xxxs') 0;\n}\n\n.day.selectable,\n.day.selected {\n  cursor: pointer;\n}\n\n.day.disabled,\n.day:not(.selectable) {\n  color: get-text-color('semi-dark');\n}\n\n.day.today {\n  color: get-color('medium-contrast');\n  background-color: get-color('medium');\n}\n\n.day.selected {\n  color: get-color('black-contrast');\n  background-color: get-color('black');\n}\n\n.day:not(.current-month) {\n  visibility: hidden;\n  pointer-events: none;\n}\n\n.day.selectable:not(.selected):hover {\n  color: get-color('light-contrast');\n  background-color: get-color('light');\n}\n",
          "styleUrl": "./calendar.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "calendarHelper",
            "type": "CalendarHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 187,
        "jsdoctags": [
          {
            "name": "calendarHelper",
            "type": "CalendarHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "AfterViewInit", "OnChanges"],
      "accessors": {
        "selectedDate": {
          "name": "selectedDate",
          "setSignature": {
            "name": "selectedDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "valueLocalOrUTC",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 111,
            "jsdoctags": [
              {
                "name": "valueLocalOrUTC",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedDate",
            "type": "",
            "returnType": "Date",
            "line": 107
          }
        },
        "disabledDates": {
          "name": "disabledDates",
          "setSignature": {
            "name": "disabledDates",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 125,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledDates",
            "type": "[]",
            "returnType": "Date[]",
            "line": 121
          }
        },
        "todayDate": {
          "name": "todayDate",
          "setSignature": {
            "name": "todayDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 133,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "todayDate",
            "type": "",
            "returnType": "Date",
            "line": 129
          }
        },
        "minDate": {
          "name": "minDate",
          "setSignature": {
            "name": "minDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 141,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "minDate",
            "type": "",
            "returnType": "Date",
            "line": 137
          }
        },
        "maxDate": {
          "name": "maxDate",
          "setSignature": {
            "name": "maxDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 152,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "maxDate",
            "type": "",
            "returnType": "Date",
            "line": 148
          }
        },
        "activeMonthName": {
          "name": "activeMonthName",
          "getSignature": {
            "name": "activeMonthName",
            "type": "string",
            "returnType": "string",
            "line": 159
          }
        },
        "activeYear": {
          "name": "activeYear",
          "getSignature": {
            "name": "activeYear",
            "type": "string",
            "returnType": "string",
            "line": 163
          }
        },
        "navigableYears": {
          "name": "navigableYears",
          "getSignature": {
            "name": "navigableYears",
            "type": "[]",
            "returnType": "string[]",
            "line": 170,
            "rawdescription": "Gets navigable years for year navigator based on yearNavigatorOptions.",
            "description": "<p>Gets navigable years for year navigator based on yearNavigatorOptions.</p>\n"
          }
        },
        "navigatedYear": {
          "name": "navigatedYear",
          "getSignature": {
            "name": "navigatedYear",
            "type": "number",
            "returnType": "number",
            "line": 180
          }
        },
        "_hasYearNavigator": {
          "name": "_hasYearNavigator",
          "getSignature": {
            "name": "_hasYearNavigator",
            "type": "",
            "returnType": "",
            "line": 185
          }
        },
        "_canNavigateBack": {
          "name": "_canNavigateBack",
          "getSignature": {
            "name": "_canNavigateBack",
            "type": "boolean",
            "returnType": "boolean",
            "line": 443
          }
        },
        "_canNavigateForward": {
          "name": "_canNavigateForward",
          "getSignature": {
            "name": "_canNavigateForward",
            "type": "boolean",
            "returnType": "boolean",
            "line": 454
          }
        }
      },
      "templateData": "<div class=\"header\">\n  <div class=\"month-navigator\">\n    <button [disabled]=\"!_canNavigateBack\" (click)=\"_changeMonth(-1)\">\n      <kirby-icon name=\"arrow-back\"></kirby-icon>\n    </button>\n\n    <div class=\"month-and-year\">\n      <span class=\"month\">{{ activeMonthName }}</span\n      ><span *ngIf=\"!_hasYearNavigator\" class=\"year\">{{ activeYear }}</span>\n    </div>\n\n    <button [disabled]=\"!_canNavigateForward\" (click)=\"_changeMonth(1)\">\n      <kirby-icon name=\"arrow-more\"></kirby-icon>\n    </button>\n  </div>\n  <kirby-dropdown\n    *ngIf=\"_hasYearNavigator\"\n    [selectedIndex]=\"navigatedYear\"\n    [items]=\"navigableYears\"\n    popout=\"left\"\n    (change)=\"_changeYear($event)\"\n  >\n  </kirby-dropdown>\n</div>\n\n<table>\n  <thead>\n    <tr>\n      <th *ngFor=\"let weekDay of _weekDays\">{{ weekDay }}</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr *ngFor=\"let week of _month\">\n      <td *ngFor=\"let day of week\">\n        <div\n          (click)=\"_onDateSelected(day)\"\n          class=\"{{ day.cssClasses }}\"\n          [class.selected]=\"day.isSelected\"\n        >\n          {{ day.date }}\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- <iframe src=\"kirby/components/calendar/calendar.webview.html\" #calendarContainer style=\"width: 320px; height: 304px; border: 0\"> -->\n"
    },
    {
      "name": "CardComponent",
      "id": "component-CardComponent-257ee31f971ac5e2bec84899d1d2118e",
      "file": "libs/designsystem/src/lib/components/card/card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-card",
      "styleUrls": ["./card.component.scss"],
      "styles": [],
      "templateUrl": ["./card.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasPadding",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": ""
        },
        {
          "name": "sizes",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "literal type"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "flat",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 43,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.flat'"
            }
          ]
        },
        {
          "name": "highlighted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.highlighted'"
            }
          ]
        },
        {
          "name": "sizesSortedByBreakpoint",
          "defaultValue": "this.sortSizesByBreakpoint({\n    small: 360,\n    medium: 720,\n    large: 1024,\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "compareSizesByBreakpoint",
          "args": [
            {
              "name": "a",
              "type": "[string, number]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "b",
              "type": "[string, number]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "a",
              "type": "[string, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "[string, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleResize",
          "args": [
            {
              "name": "entry",
              "type": "ResizeObserverEntry",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "entry",
              "type": "ResizeObserverEntry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "sortSizesByBreakpoint",
          "args": [
            {
              "name": "sizes",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[]",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "sizes",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.flat",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean"
        },
        {
          "name": "class.highlighted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ElementRef,\n  Renderer2,\n  OnDestroy,\n  HostBinding,\n} from '@angular/core';\n\nimport { ResizeObserverService } from '../shared/resize-observer/resize-observer.service';\nimport { ResizeObserverEntry } from '../shared/resize-observer/types/resize-observer-entry';\n\n@Component({\n  selector: 'kirby-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit, OnDestroy {\n  @Input() title: string;\n  @Input() subtitle: string;\n\n  @Input()\n  hasPadding: boolean;\n\n  private sizesSortedByBreakpoint = this.sortSizesByBreakpoint({\n    small: 360,\n    medium: 720,\n    large: 1024,\n  });\n\n  @Input()\n  set sizes(value: { [size: string]: number }) {\n    if (typeof value === 'string') {\n      console.error(\n        'Sizes property cannot be a string. Please ensure the size property is bound as an expression:\\n[sizes]=\"{...}\"'\n      );\n    }\n    this.sizesSortedByBreakpoint = this.sortSizesByBreakpoint(value);\n  }\n\n  @HostBinding('class.flat')\n  flat: boolean = false;\n  @HostBinding('class.highlighted')\n  highlighted: boolean = false;\n  @Input() set mode(value: 'flat' | 'highlighted') {\n    this.flat = value === 'flat';\n    this.highlighted = value === 'highlighted';\n  }\n\n  constructor(\n    private elementRef: ElementRef,\n    private resizeObserverService: ResizeObserverService,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    this.resizeObserverService.observe(this.elementRef, (entry) => this.handleResize(entry));\n  }\n\n  ngOnDestroy() {\n    this.resizeObserverService.unobserve(this.elementRef);\n  }\n\n  private sortSizesByBreakpoint(sizes: { [size: string]: number }): [string, number][] {\n    return Object.entries(sizes).sort(this.compareSizesByBreakpoint);\n  }\n\n  private compareSizesByBreakpoint(a: [string, number], b: [string, number]): number {\n    return a[1] > b[1] ? 1 : b[1] > a[1] ? -1 : 0;\n  }\n\n  private handleResize(entry: ResizeObserverEntry) {\n    const sizeAttributeName = 'size';\n    const smallestBreakpointName = this.sizesSortedByBreakpoint[0][0];\n    const smallestBreakpointWidth = this.sizesSortedByBreakpoint[0][1];\n    if (entry.contentRect.width < smallestBreakpointWidth) {\n      this.renderer.setAttribute(entry.target, sizeAttributeName, `<${smallestBreakpointName}`);\n    } else {\n      this.sizesSortedByBreakpoint.forEach(([size, width]) => {\n        if (entry.contentRect.width >= width) {\n          this.renderer.setAttribute(entry.target, sizeAttributeName, size);\n        }\n      });\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  --kirby-card-main-background-color: #{get-color('white')};\n  --kirby-card-main-color: #{get-color('white-contrast')};\n  --kirby-card-footer-background-color: #{get-color('white')};\n  --kirby-card-footer-color: #{get-color('white-contrast')};\n\n  border-radius: $border-radius;\n  box-shadow: get-elevation(2);\n  color: var(--kirby-card-main-color);\n  background-color: var(--kirby-card-main-background-color);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: hidden;\n  position: relative;\n  z-index: z('default');\n  width: var(--kirby-card-width, auto);\n\n  .content-wrapper {\n    &.padding {\n      padding: size('s');\n    }\n  }\n\n  &.highlighted {\n    box-shadow: get-elevation(4);\n  }\n\n  &.flat {\n    box-shadow: none;\n  }\n}\n\n:host-context(.swiper-slide-active) {\n  box-shadow: get-elevation(4);\n  transition: all 0.5s;\n  transform: translateY(-3px);\n}\n\n@each $color-name, $color-value in $main-colors {\n  :host(.#{$color-name}) {\n    --kirby-card-main-background-color: #{get-color($color-name)};\n    --kirby-card-main-color: #{get-color($color-name + '-contrast')};\n  }\n}\n",
          "styleUrl": "./card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "sizes": {
          "name": "sizes",
          "setSignature": {
            "name": "sizes",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "literal type",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "literal type",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "mode": {
          "name": "mode",
          "setSignature": {
            "name": "mode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"flat\" | \"highlighted\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"flat\" | \"highlighted\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<ng-content select=\"kirby-card-header\"></ng-content>\n<div class=\"content-wrapper\" [class.padding]=\"hasPadding\">\n  <ng-content></ng-content>\n</div>\n<ng-content select=\"kirby-card-footer\"></ng-content>\n"
    },
    {
      "name": "CardFooterComponent",
      "id": "component-CardFooterComponent-d533ca311b3c4d0878343fb3bcf51a4c",
      "file": "libs/designsystem/src/lib/components/card/card-footer/card-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-card-footer",
      "styleUrls": ["./card-footer.component.scss"],
      "styles": [],
      "templateUrl": ["./card-footer.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kirby-card-footer',\n  templateUrl: './card-footer.component.html',\n  styleUrls: ['./card-footer.component.scss'],\n})\nexport class CardFooterComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: block;\n  padding: size('s');\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n  overflow: hidden;\n  // backface-visibility and transform, to fix clipping issue\n  // on Safari see https://stackoverflow.com/a/16681137\n  backface-visibility: hidden;\n  transform: translate3d(0, 0, 0);\n}\n\nfooter {\n  display: inherit;\n  flex: inherit;\n}\n",
          "styleUrl": "./card-footer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<footer>\n  <ng-content></ng-content>\n</footer>\n"
    },
    {
      "name": "CardHeaderComponent",
      "id": "component-CardHeaderComponent-334b12a9bff472e2da0b1477f2485a58",
      "file": "libs/designsystem/src/lib/components/card/card-header/card-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-card-header",
      "styleUrls": ["./card-header.component.scss"],
      "styles": [],
      "templateUrl": ["./card-header.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "flagged",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "CardFlagLevel"
        },
        {
          "name": "isTitleBold",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\nimport { NotificationColor } from '@kirbydesign/core';\n\nexport type CardFlagLevel = NotificationColor | 'info' | null;\n\n@Component({\n  selector: 'kirby-card-header',\n  templateUrl: './card-header.component.html',\n  styleUrls: ['./card-header.component.scss'],\n})\nexport class CardHeaderComponent {\n  @Input() title: string;\n  @Input() subtitle: string;\n  @Input() isTitleBold: boolean;\n  @HostBinding('class')\n  @Input()\n  flagged: CardFlagLevel = null;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: block;\n  border-top-left-radius: $border-radius;\n  border-top-right-radius: $border-radius;\n  text-align: center;\n  padding: var(--kirby_internal_card-header-padding, size('s'));\n  color: var(--kirby-card-header-color);\n  background-color: var(--kirby-card-header-background-color);\n}\n\nh2 {\n  font-size: font-size('n');\n  font-weight: font-weight('normal');\n  margin: 0 0 var(--kirby_internal_card-header-margin-bottom, size('xxs'));\n  line-height: var(--kirby_internal_card-header-line-height, line-height('l'));\n\n  &.bold {\n    font-weight: font-weight('bold');\n  }\n}\n\nh4 {\n  font-size: font-size('s');\n  margin: 0;\n  font-weight: font-weight('normal');\n}\n\n// Flagged card headers\n\n// key = level, value = color-name\n$notification-levels: (\n  'info': 'semi-light',\n);\n\n@each $color-name, $color-value in $notification-colors {\n  $notification-levels: map-merge(\n    (\n      $color-name: $color-name,\n    ),\n    $notification-levels\n  );\n}\n\n@each $level, $color-name in $notification-levels {\n  :host(.#{$level}) {\n    --kirby-card-header-background-color: #{get-color($color-name)};\n    --kirby-card-header-color: #{get-color($color-name + '-contrast')};\n  }\n}\n\n$notification-levels-class-selectors: keys-to-classes($notification-levels);\n\n:host(#{$notification-levels-class-selectors}) {\n  --kirby_internal_card-header-padding: #{size('xxxxs')} #{size('xxs')};\n\n  h2 {\n    --kirby_internal_card-header-line-height: #{line-height('n')};\n    --kirby_internal_card-header-margin-bottom: 0;\n  }\n}\n",
          "styleUrl": "./card-header.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<header>\n  <h2 *ngIf=\"title\" [class.bold]=\"isTitleBold\">{{ title }}</h2>\n  <h4 *ngIf=\"subtitle\">{{ subtitle }}</h4>\n  <ng-content></ng-content>\n</header>\n"
    },
    {
      "name": "ChartComponent",
      "id": "component-ChartComponent-ad3148a681b3eb837b0bbf0e007167c6",
      "file": "libs/designsystem/src/lib/components/chart/chart.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ChartJSService"
        }
      ],
      "selector": "kirby-chart",
      "styleUrls": ["./chart.component.scss"],
      "styles": [],
      "templateUrl": ["./chart.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "annotations",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "AnnotationOptions[]"
        },
        {
          "name": "customOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "ChartOptions"
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "ChartDataset[] | number[]"
        },
        {
          "name": "dataLabels",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string[] | string[][]"
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": ""
        },
        {
          "name": "highlightedElements",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "ChartHighlightedElements"
        },
        {
          "name": "type",
          "defaultValue": "'column'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "ChartType"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_height",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'style.--kirby-chart-height'"
            }
          ]
        },
        {
          "name": "canvasElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLCanvasElement>",
          "optional": false,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'chartCanvas'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "simpleChanges",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "simpleChanges",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "redrawChart",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "renderChart",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateAnnotations",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateCustomOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateDataLabels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateHighlightedElements",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "updateType",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "style.--kirby-chart-height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { ChartOptions } from 'chart.js';\nimport { AnnotationOptions } from 'chartjs-plugin-annotation';\n\nimport { ChartJSService } from './chart-js/chart-js.service';\nimport { ChartDataset, ChartHighlightedElements, ChartType } from './chart.types';\n\n@Component({\n  selector: 'kirby-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss'],\n  providers: [ChartJSService],\n})\nexport class ChartComponent implements AfterViewInit, OnChanges {\n  @Input() type: ChartType = 'column';\n  @Input() data: ChartDataset[] | number[];\n  @Input() dataLabels?: string[] | string[][];\n  @Input() customOptions?: ChartOptions;\n  @Input() annotations?: AnnotationOptions[];\n  @Input() highlightedElements?: ChartHighlightedElements;\n\n  @HostBinding('style.--kirby-chart-height')\n  _height: string;\n  @Input() set height(value: string | number) {\n    this._height = typeof value === 'number' ? `${value}px` : value;\n  }\n\n  @ViewChild('chartCanvas')\n  canvasElement: ElementRef<HTMLCanvasElement>;\n\n  constructor(private chartJSService: ChartJSService) {}\n\n  ngAfterViewInit() {\n    this.renderChart();\n  }\n\n  ngOnChanges(simpleChanges: SimpleChanges) {\n    let shouldRedrawChart = false;\n\n    const keyUpdateFnPairs = {\n      data: () => this.updateData(),\n      dataLabels: () => this.updateDataLabels(),\n      type: () => this.updateType(),\n      customOptions: () => this.updateCustomOptions(),\n      annotations: () => this.updateAnnotations(),\n      highlightedElements: () => this.updateHighlightedElements(),\n    };\n\n    Object.entries(simpleChanges).forEach(([key]) => {\n      if (simpleChanges[key].firstChange || !keyUpdateFnPairs[key]) return;\n      shouldRedrawChart = true;\n      keyUpdateFnPairs[key]();\n    });\n\n    if (shouldRedrawChart) this.redrawChart();\n  }\n\n  private renderChart() {\n    this.chartJSService.renderChart({\n      targetElement: this.canvasElement,\n      type: this.type,\n      data: this.data,\n      dataLabels: this.dataLabels,\n      customOptions: this.customOptions,\n      annotations: this.annotations,\n      highlightedElements: this.highlightedElements,\n    });\n  }\n\n  private updateData() {\n    this.chartJSService.updateData(this.data);\n  }\n\n  private updateDataLabels() {\n    this.chartJSService.updateDataLabels(this.dataLabels);\n  }\n\n  private updateType() {\n    this.chartJSService.updateType(this.type, this.customOptions);\n  }\n\n  private updateCustomOptions() {\n    this.chartJSService.updateOptions(this.customOptions, this.type);\n  }\n\n  private updateAnnotations() {\n    this.chartJSService.updateAnnotations(this.annotations);\n  }\n\n  private updateHighlightedElements() {\n    this.chartJSService.updateHighlightedElements(this.highlightedElements);\n  }\n\n  private redrawChart() {\n    this.chartJSService.redrawChart();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  div {\n    height: var(--kirby-chart-height, 300px);\n    position: relative;\n  }\n}\n",
          "styleUrl": "./chart.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "chartJSService",
            "type": "ChartJSService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "chartJSService",
            "type": "ChartJSService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit", "OnChanges"],
      "accessors": {
        "height": {
          "name": "height",
          "setSignature": {
            "name": "height",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<div class=\"chart-container\">\n  <canvas #chartCanvas>\n    <!-- Slotted content makes it possible to insert fallback content for screen readers \n    https://www.chartjs.org/docs/latest/general/accessibility.html-->\n    <ng-content></ng-content>\n  </canvas>\n</div>\n"
    },
    {
      "name": "ChartDeprecatedComponent",
      "id": "component-ChartDeprecatedComponent-e05143317adb62b82f59b6cae03e4351",
      "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ChartDeprecatedHelper"
        },
        {
          "name": "{ provide: DONUT_OPTIONS, useValue: DonutOptions }"
        },
        {
          "name": "{ provide: AREASPLINE_OPTIONS, useValue: AreaSplineOptions }"
        },
        {
          "name": "{ provide: TIMESERIES_OPTIONS, useValue: TimeSeriesOptions }"
        },
        {
          "name": "{ provide: ACTIVITYGAUGE_OPTIONS, useValue: ActivityGaugeOptions }"
        }
      ],
      "selector": "kirby-chart-deprecated",
      "styleUrls": ["./chart-deprecated.component.scss"],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "breaks",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "Array<XAxisBreaksOptions>"
        },
        {
          "name": "categories",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string[]"
        },
        {
          "name": "data",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "{}"
        },
        {
          "name": "description",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string"
        },
        {
          "name": "height",
          "defaultValue": "300",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "number"
        },
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "Options"
        },
        {
          "name": "showDataLabels",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean"
        },
        {
          "name": "type",
          "defaultValue": "ChartDeprecatedType.PIE",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "ChartDeprecatedType"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "activitygaugeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 52,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "ACTIVITYGAUGE_OPTIONS"
            }
          ],
          "modifierKind": [123]
        },
        {
          "name": "areasplineOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "AREASPLINE_OPTIONS"
            }
          ],
          "modifierKind": [123]
        },
        {
          "name": "donutOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 49,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "DONUT_OPTIONS"
            }
          ],
          "modifierKind": [123]
        },
        {
          "name": "mergedOptions",
          "defaultValue": "{\n    accessibility: {},\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "timeSeriesOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "TIMESERIES_OPTIONS"
            }
          ],
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setActivitygaugeInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 193,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setBarInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 148,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setColumnInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setPieInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setSeries",
          "args": [
            {
              "name": "type",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 225,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "type",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setTimeseriesInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "setupChartType",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "updateProperties",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  Options,\n  PlotSeriesDataLabelsOptions,\n  XAxisBreaksOptions,\n  XAxisOptions,\n  YAxisOptions,\n} from 'highcharts';\n\nimport { mergeDeep } from '../../helpers/merge-deep';\n\nimport { ChartDeprecatedHelper } from './chart-deprecated-helper';\nimport { ChartDeprecatedType } from './chart-deprecated-type';\nimport { ActivityGaugeOptions, ACTIVITYGAUGE_OPTIONS } from './options/activitygauge';\nimport { AreaSplineOptions, AREASPLINE_OPTIONS } from './options/areaspline';\nimport { barOptions } from './options/bar';\nimport { columnOptions } from './options/column';\nimport { DonutOptions, DONUT_OPTIONS } from './options/donut';\nimport { TimeSeriesOptions, TIMESERIES_OPTIONS } from './options/timeseries';\n\n@Component({\n  selector: 'kirby-chart-deprecated',\n  template: '',\n  styleUrls: ['./chart-deprecated.component.scss'],\n  providers: [\n    ChartDeprecatedHelper,\n    { provide: DONUT_OPTIONS, useValue: DonutOptions },\n    { provide: AREASPLINE_OPTIONS, useValue: AreaSplineOptions },\n    { provide: TIMESERIES_OPTIONS, useValue: TimeSeriesOptions },\n    { provide: ACTIVITYGAUGE_OPTIONS, useValue: ActivityGaugeOptions },\n  ],\n})\nexport class ChartDeprecatedComponent implements OnChanges {\n  @Input() data = [];\n  @Input() categories: string[] = [];\n  @Input() breaks: Array<XAxisBreaksOptions> = [];\n  @Input() height = 300;\n  @Input() type: ChartDeprecatedType = ChartDeprecatedType.PIE;\n  @Input() description = '';\n  @Input() showDataLabels = true;\n  @Input() options: Options;\n  mergedOptions: Options = {\n    accessibility: {},\n  };\n\n  constructor(\n    private chartHelper: ChartDeprecatedHelper,\n    private hostElement: ElementRef,\n    @Inject(DONUT_OPTIONS) public donutOptions: Options,\n    @Inject(AREASPLINE_OPTIONS) public areasplineOptions: Options,\n    @Inject(TIMESERIES_OPTIONS) public timeSeriesOptions: Options,\n    @Inject(ACTIVITYGAUGE_OPTIONS) public activitygaugeOptions: Options\n  ) {\n    this.chartHelper.init(this.hostElement);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.type) {\n      this.setupChartType();\n    }\n    this.updateProperties();\n    this.chartHelper.renderChart(this.mergedOptions);\n  }\n\n  setupChartType() {\n    switch (this.type) {\n      case ChartDeprecatedType.DONUT: {\n        this.mergedOptions = this.donutOptions;\n        this.mergedOptions.chart.type = ChartDeprecatedType.PIE;\n        this.mergedOptions.plotOptions.pie.innerSize = '50%';\n        break;\n      }\n      case ChartDeprecatedType.PIE: {\n        this.mergedOptions = this.donutOptions;\n        this.mergedOptions.chart.type = this.type;\n        this.mergedOptions.plotOptions.pie.innerSize = '0%';\n        break;\n      }\n      case ChartDeprecatedType.AREASPLINE: {\n        this.mergedOptions = this.areasplineOptions;\n        this.mergedOptions.chart.type = this.type;\n        break;\n      }\n      case ChartDeprecatedType.TIMESERIES: {\n        this.mergedOptions = this.timeSeriesOptions;\n        this.mergedOptions.chart.type = this.type;\n        break;\n      }\n      case ChartDeprecatedType.ACTIVITYGAUGE: {\n        this.mergedOptions = this.activitygaugeOptions;\n        this.mergedOptions.chart.type = this.type;\n        break;\n      }\n      case ChartDeprecatedType.COLUMN: {\n        this.mergedOptions = columnOptions;\n        this.mergedOptions.chart.type = this.type;\n        break;\n      }\n      case ChartDeprecatedType.BAR: {\n        this.mergedOptions = barOptions;\n        this.mergedOptions.chart.type = this.type;\n        break;\n      }\n    }\n  }\n\n  updateProperties() {\n    this.mergedOptions.chart.height = this.height;\n    this.mergedOptions.accessibility.description = this.description;\n    switch (this.mergedOptions.chart.type) {\n      case ChartDeprecatedType.PIE:\n      case ChartDeprecatedType.DONUT: {\n        this.setPieInput();\n        break;\n      }\n      case ChartDeprecatedType.AREASPLINE: {\n        this.setSeries('areaspline');\n        break;\n      }\n      case ChartDeprecatedType.TIMESERIES: {\n        this.setTimeseriesInput();\n        break;\n      }\n      case ChartDeprecatedType.ACTIVITYGAUGE: {\n        this.setActivitygaugeInput();\n        break;\n      }\n      case ChartDeprecatedType.COLUMN: {\n        this.setColumnInput();\n        break;\n      }\n      case ChartDeprecatedType.BAR: {\n        this.setBarInput();\n        break;\n      }\n    }\n    if (!!this.options) {\n      this.mergedOptions = mergeDeep(this.mergedOptions, this.options);\n    }\n  }\n\n  private setPieInput() {\n    (this.mergedOptions.plotOptions.pie\n      .dataLabels as PlotSeriesDataLabelsOptions).enabled = this.showDataLabels;\n    this.setSeries('pie');\n  }\n\n  private setBarInput() {\n    const dataMaxValue = Math.max(...this.data);\n    this.mergedOptions.series = [\n      {\n        type: 'bar',\n        name: 'InvisibleClickReceiver',\n        data: this.data.map((dataEntry) => dataMaxValue - dataEntry),\n        edgeColor: 'rgb(255, 255, 255, 0)',\n        opacity: 0,\n      },\n      {\n        type: 'bar',\n        data: this.data,\n      },\n    ];\n    (this.mergedOptions.xAxis as XAxisOptions).categories = this.categories;\n  }\n\n  private setColumnInput() {\n    this.mergedOptions.series = [\n      {\n        type: 'column',\n        data: this.data,\n      },\n    ];\n    const dataMaxValue = Math.max(...this.data);\n    ((this.mergedOptions.yAxis as YAxisOptions).tickPositioner = () => {\n      var positions = [0, dataMaxValue];\n      return positions;\n    }),\n      (this.mergedOptions.series = [\n        {\n          type: 'column',\n          name: 'InvisibleClickReceiver',\n          data: this.data.map((_, idx) => dataMaxValue - this.data[idx]),\n          opacity: 0,\n        },\n        {\n          type: 'column',\n          data: this.data,\n        },\n      ]);\n    (this.mergedOptions.xAxis as XAxisOptions).categories = this.categories;\n  }\n\n  private setActivitygaugeInput() {\n    const data = this.data[0];\n    this.mergedOptions.title.text = data.title;\n    this.mergedOptions.subtitle.text = data.subtitle;\n    if (data.paneBackgroundColor) {\n      this.mergedOptions.pane.background = [\n        {\n          ...this.mergedOptions.pane.background[0],\n          backgroundColor: data.paneBackgroundColor,\n        },\n      ];\n    }\n    if (data.color) {\n      this.mergedOptions.title.style.color = data.color;\n      this.mergedOptions.subtitle.style.color = data.color;\n    }\n    this.mergedOptions.series = [\n      {\n        type: 'solidgauge',\n        data: data.series,\n      },\n    ];\n  }\n\n  private setTimeseriesInput() {\n    this.setSeries('area');\n    this.mergedOptions.xAxis = {\n      ...this.mergedOptions.xAxis,\n      breaks: this.breaks,\n    };\n  }\n\n  private setSeries(type) {\n    this.mergedOptions.series = [\n      {\n        type,\n        data: this.data,\n      },\n    ];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: block;\n}\n",
          "styleUrl": "./chart-deprecated.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "chartHelper",
            "type": "ChartDeprecatedHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "donutOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "areasplineOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "timeSeriesOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "activitygaugeOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "chartHelper",
            "type": "ChartDeprecatedHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "donutOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "areasplineOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "timeSeriesOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "activitygaugeOptions",
            "type": "Options",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnChanges"]
    },
    {
      "name": "CheckboxComponent",
      "id": "component-CheckboxComponent-13c513f670641dbae1334f4e62e81c7a",
      "file": "libs/designsystem/src/lib/components/checkbox/checkbox.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-checkbox",
      "styleUrls": ["./checkbox.component.scss"],
      "styles": [],
      "templateUrl": ["./checkbox.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "defaultValue": "'2'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "\"1\" | \"2\""
        },
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "checkedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_labelId",
          "defaultValue": "UniqueIdGenerator.scopedTo('kirby-checkbox-label').next()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55
        }
      ],
      "methodsClass": [
        {
          "name": "onChecked",
          "args": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string"
        },
        {
          "name": "class.attention-level1",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean"
        },
        {
          "name": "class.attention-level2",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n} from '@angular/core';\n\nimport { UniqueIdGenerator } from '../../helpers/unique-id-generator.helper';\n\n@Component({\n  selector: 'kirby-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboxComponent {\n  @Input() checked: boolean = false;\n  @Input() attentionLevel: '1' | '2' = '2';\n\n  @HostBinding('class.has-label')\n  @Input()\n  text: string;\n\n  @HostBinding('class')\n  @Input()\n  size?: 'xs' | 'sm' | 'md';\n\n  @HostBinding('class.error')\n  @Input()\n  hasError: boolean = false;\n\n  @Input() disabled = false;\n  @HostBinding('attr.disabled')\n  get _isDisabled() {\n    return this.disabled ? 'disabled' : null;\n  }\n\n  @HostBinding('class.attention-level1') get isAttentionLevel1() {\n    return this.attentionLevel === '1';\n  }\n  @HostBinding('class.attention-level2') get isAttentionLevel2() {\n    return this.attentionLevel === '2';\n  }\n\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  onChecked(checked: boolean): void {\n    this.checked = checked;\n    this.checkedChange.emit(this.checked);\n  }\n\n  // IDs used for a11y labelling\n  _labelId = UniqueIdGenerator.scopedTo('kirby-checkbox-label').next();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$border-radius: 6px;\n$checkbox-icon-size: size('m');\n$spacing-to-edge: map-get($checkbox-radio-spacing, 'to-edge');\n$spacing-to-label: map-get($checkbox-radio-spacing, 'to-label');\n$default-checkbox-radio-size: map-get($checkbox-radio-sizes, 'md');\n\n@function getVerticalPadding($target-height) {\n  @return ($target-height - $checkbox-icon-size) / 2;\n}\n\n:host {\n  display: inline-block;\n\n  &.attention-level1 ion-checkbox {\n    --checkmark-color: #{get-color('black')};\n    --background-checked: #{get-color('success')};\n    --border-color-checked: #{get-color('success')};\n\n    &:active {\n      --background-checked: #{get-color('success-shade')};\n      --border-color-checked: #{get-color('success-shade')};\n    }\n  }\n\n  &.attention-level2 ion-checkbox {\n    --checkmark-color: #{get-color('white')};\n    --background-checked: #{get-color('black')};\n    --border-color-checked: #{get-color('black')};\n\n    &:active {\n      --checkmark-color: #{get-color('white-shade')};\n      --background-checked: #{get-color('black-tint')};\n      --border-color-checked: #{get-color('black-tint')};\n    }\n  }\n\n  &.error ion-checkbox {\n    --border-color: #{get-color('danger')};\n  }\n\n  &[disabled] {\n    color: #{get-text-color('semi-dark')};\n\n    ion-checkbox {\n      opacity: 1;\n      --checkmark-color: #{get-color('semi-dark')};\n      --background: #{get-color('semi-light')};\n      --background-checked: #{get-color('semi-light')};\n      --border-color: #{get-color('medium')};\n      --border-color-checked: #{get-color('semi-light')};\n    }\n  }\n\n  ion-checkbox {\n    --size: #{$checkbox-icon-size};\n    --checkmark-width: #{size('xxxs')};\n    --background: #{get-color('white')};\n    --border-width: 1px;\n    --border-color: #{get-color('semi-dark')};\n    --border-radius: #{$border-radius};\n\n    margin-left: $spacing-to-edge;\n    margin-right: $spacing-to-label;\n\n    &::part(container) {\n      padding: size('xxxs'); // Spacing between checkmark and container box\n    }\n\n    &:focus-within::part(container) {\n      @media (hover: hover) {\n        box-shadow: 0 0 0 1px var(--kirby-background-color), 0 0 0 2px #{$focus-ring-color};\n        border-radius: $border-radius;\n      }\n    }\n    &:active {\n      --background: #{get-color('white-shade')};\n    }\n  }\n\n  &.has-label {\n    display: block;\n    line-height: line-height('n');\n    white-space: pre-line;\n\n    .wrapper {\n      position: relative;\n      display: inline-flex;\n      align-items: flex-start;\n      vertical-align: top;\n      padding: getVerticalPadding($default-checkbox-radio-size) 0;\n      padding-right: $spacing-to-label; // Ensure same padding on right side of label\n    }\n\n    @each $size, $height in $checkbox-radio-sizes {\n      :host-context(.checkbox-#{$size}),\n      &.#{$size} {\n        .wrapper {\n          $verticalPadding: getVerticalPadding($height);\n          padding-top: $verticalPadding;\n          padding-bottom: $verticalPadding;\n        }\n      }\n    }\n\n    ion-checkbox {\n      position: static;\n      flex-shrink: 0;\n      flex-grow: 0;\n    }\n  }\n}\n\n:host-context(kirby-item) {\n  z-index: z('default'); // Makes whole kirby-item clickable above item-inner.\n\n  ion-checkbox {\n    margin: 0;\n  }\n\n  &[slot='start'] {\n    margin-inline-end: $spacing-to-label;\n  }\n}\n",
          "styleUrl": "./checkbox.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_isDisabled": {
          "name": "_isDisabled",
          "getSignature": {
            "name": "_isDisabled",
            "type": "",
            "returnType": "",
            "line": 36
          }
        },
        "isAttentionLevel1": {
          "name": "isAttentionLevel1",
          "getSignature": {
            "name": "isAttentionLevel1",
            "type": "",
            "returnType": "",
            "line": 40
          }
        },
        "isAttentionLevel2": {
          "name": "isAttentionLevel2",
          "getSignature": {
            "name": "isAttentionLevel2",
            "type": "",
            "returnType": "",
            "line": 43
          }
        }
      },
      "templateData": "<div class=\"wrapper\">\n  <ion-checkbox\n    mode=\"md\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    (ionChange)=\"onChecked($event.detail.checked)\"\n    [attr.aria-labelledby]=\"text ? _labelId : null\"\n  ></ion-checkbox>\n  <span [id]=\"_labelId\" *ngIf=\"text\">{{ text }}</span>\n</div>\n"
    },
    {
      "name": "ChipComponent",
      "id": "component-ChipComponent-a6fa2bc0492c2e7f4d60ab79f37a6eb2",
      "file": "libs/designsystem/src/lib/components/chip/chip.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-chip",
      "styleUrls": ["./chip.component.scss"],
      "styles": [],
      "templateUrl": ["./chip.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean"
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'kirby-chip',\n  templateUrl: './chip.component.html',\n  styleUrls: ['./chip.component.scss'],\n})\nexport class ChipComponent {\n  @Input() text: string;\n\n  @Input()\n  @HostBinding('attr.aria-selected')\n  @HostBinding('class.is-selected')\n  isSelected: boolean;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n@mixin selected-and-hover($background-color) {\n  &.is-selected {\n    @include theme-background($background-color);\n  }\n\n  @include hover() {\n    @include theme-background($background-color);\n  }\n}\n\n:host {\n  @include theme-background('white');\n  @include selected-and-hover('black');\n  @include accessible-target-size();\n\n  white-space: nowrap;\n  padding: 0 var(--inline-padding, size('s'));\n  height: size('l');\n  font-size: font-size('xs');\n  line-height: 1;\n  display: inline-flex;\n  align-items: center;\n  border-radius: $border-radius-round;\n  margin: size('xxxs') var(--inline-margin, size('xxxs'));\n  cursor: pointer;\n  user-select: none;\n\n  :host-context(.kirby-color-brightness-dark) {\n    @include theme-background(transparent, 'white');\n    @include selected-and-hover('white');\n  }\n\n  :host-context(kirby-segmented-control.compact) {\n    min-width: 44px;\n    flex-shrink: 0;\n    justify-content: center;\n    --inline-margin: #{size('xxxxs')};\n    --inline-padding: #{13px};\n    @include theme-background(transparent);\n    @include selected-and-hover('black');\n\n    @include media('<=small') {\n      --inline-margin: 0;\n    }\n  }\n}\n",
          "styleUrl": "./chip.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<span>{{ text }}</span>\n"
    },
    {
      "name": "DividerComponent",
      "id": "component-DividerComponent-16cbb5c11421b4cc749b50465733694a",
      "file": "libs/designsystem/src/lib/components/divider/divider.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-divider",
      "styleUrls": ["./divider.component.scss"],
      "styles": [],
      "templateUrl": ["./divider.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasMargin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'kirby-divider',\n  templateUrl: './divider.component.html',\n  styleUrls: ['./divider.component.scss'],\n})\nexport class DividerComponent {\n  @Input()\n  hasMargin: boolean;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host-context(kirby-card),\n:host-context(.kirby-color-brightness-white) {\n  --kirby-divider-color: #{get-color('background-color')};\n}\n\n:host-context(.kirby-color-brightness-light) {\n  --kirby-divider-color: #{get-color('medium')};\n}\n\nhr {\n  margin-top: size('xxs');\n  margin-bottom: size('xxs');\n  border: 0;\n  border-top: 1px solid var(--kirby-divider-color, get-color('medium'));\n\n  &.no-margin {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n}\n",
          "styleUrl": "./divider.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<hr [class.no-margin]=\"!hasMargin\" />\n"
    },
    {
      "name": "DropdownComponent",
      "id": "component-DropdownComponent-743715dfccc7a7e09f63f79c1cf4b24a",
      "file": "libs/designsystem/src/lib/components/dropdown/dropdown.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DropdownComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-dropdown",
      "styleUrls": ["./dropdown.component.scss"],
      "styles": [],
      "templateUrl": ["./dropdown.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "defaultValue": "'3'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "\"1\" | \"2\" | \"3\" | \"4\""
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 98,
          "type": "boolean"
        },
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": ""
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 107,
          "type": "boolean"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": ""
        },
        {
          "name": "itemTextProperty",
          "defaultValue": "'text'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "string"
        },
        {
          "name": "placeholder",
          "defaultValue": "'Please select:'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "string"
        },
        {
          "name": "popout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": ""
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "number"
        },
        {
          "name": "size",
          "defaultValue": "'md'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 110,
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "tabindex",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 113,
          "type": "number"
        },
        {
          "name": "usePopover",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 117,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string | any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmitted when an item is selected (tap on mobile, click/keypress on web)\n",
          "description": "<p>Emitted when an item is selected (tap on mobile, click/keypress on web)</p>\n",
          "line": 133,
          "type": "EventEmitter<string | any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_items",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[] | any[]",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [121]
        },
        {
          "name": "_onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 354,
          "modifierKind": [121]
        },
        {
          "name": "_onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 355,
          "modifierKind": [121]
        },
        {
          "name": "_role",
          "defaultValue": "'listbox'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 150,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'attr.role'"
            }
          ]
        },
        {
          "name": "_selectedIndex",
          "defaultValue": "-1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 64,
          "modifierKind": [121]
        },
        {
          "name": "_value",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | any",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [121]
        },
        {
          "name": "attentionLevelOpen",
          "defaultValue": "'2'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [143]
        },
        {
          "name": "buttonElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 181,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ButtonComponent, {static: true, read: ElementRef}"
            }
          ]
        },
        {
          "name": "cardElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 177,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "CardComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "hasConfiguredSlottedItems",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [121]
        },
        {
          "name": "horizontalDirection",
          "defaultValue": "HorizontalDirection.right",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [121]
        },
        {
          "name": "intersectionObserverRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IntersectionObserver",
          "optional": false,
          "description": "",
          "line": 188,
          "modifierKind": [121]
        },
        {
          "name": "itemClickUnlisten",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "(function)[]",
          "optional": false,
          "description": "",
          "line": 187,
          "modifierKind": [121]
        },
        {
          "name": "itemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 173,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListItemTemplateDirective, {static: true, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "kirbyItemsDefault",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef<HTMLElement>>",
          "optional": false,
          "description": "",
          "line": 183,
          "decorators": [
            {
              "name": "ViewChildren",
              "stringifiedArguments": "ItemComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "kirbyItemsSlotted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef<HTMLElement>>",
          "optional": false,
          "description": "",
          "line": 185,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ItemComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "OPEN_DELAY_IN_MS",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [124, 143]
        },
        {
          "name": "popover",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "PopoverComponent",
          "optional": true,
          "description": "",
          "line": 179,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "PopoverComponent"
            }
          ]
        },
        {
          "name": "showDropdownTimeoutId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ReturnType<>",
          "optional": false,
          "description": "",
          "line": 189,
          "modifierKind": [121]
        },
        {
          "name": "slottedItems",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef<HTMLElement>>",
          "optional": false,
          "description": "",
          "line": 175,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ListItemTemplateDirective, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "state",
          "defaultValue": "OpenState.closed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [121]
        },
        {
          "name": "verticalDirection",
          "defaultValue": "VerticalDirection.down",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "_onArrowKeys",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 503,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.arrowup', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.arrowdown', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.arrowleft', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.arrowright', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onBlur",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 473,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.enter'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.escape'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'blur', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onEnter",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 493,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.enter', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 459,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'focus'"
            }
          ]
        },
        {
          "name": "_onHomeEndKeys",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 518,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.home', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.end', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onMouseDown",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 451,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'mousedown', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onPopoverWillHide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 465,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "_onSpace",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 484,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.space', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onTab",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 443,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.tab', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_selectItemByValue",
          "args": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 408,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 337,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getTextFromItem",
          "args": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 412,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeAlignment",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 254,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 218,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 527,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onButtonMouseEvent",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 213,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onItemSelect",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 349,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onToggle",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 198,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 314,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 374,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSaves a callback function to be invoked when the select's value\nchanges from user input. Part of the ControlValueAccessor interface\nrequired to integrate with Angular's core forms API.\n\n",
          "description": "<p>Saves a callback function to be invoked when the select&#39;s value\nchanges from user input. Part of the ControlValueAccessor interface\nrequired to integrate with Angular&#39;s core forms API.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10625,
                "end": 10627,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "fn"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10619,
                "end": 10624,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Callback to be triggered when the value changes.</p>\n"
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 385,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSaves a callback function to be invoked when the select is blurred\nby the user. Part of the ControlValueAccessor interface required\nto integrate with Angular's core forms API.\n\n",
          "description": "<p>Saves a callback function to be invoked when the select is blurred\nby the user. Part of the ControlValueAccessor interface required\nto integrate with Angular&#39;s core forms API.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10963,
                "end": 10965,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "fn"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10957,
                "end": 10962,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Callback to be triggered when the component has been touched.</p>\n"
            }
          ]
        },
        {
          "name": "scrollItemIntoView",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 419,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectItem",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 399,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": true,
          "returnType": "void",
          "typeParameters": [],
          "line": 395,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDisables the select. Part of the ControlValueAccessor interface required\nto integrate with Angular's core forms API.\n\n",
          "description": "<p>Disables the select. Part of the ControlValueAccessor interface required\nto integrate with Angular&#39;s core forms API.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 11252,
                "end": 11262,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "isDisabled"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 11246,
                "end": 11251,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Sets whether the component is disabled.</p>\n"
            }
          ]
        },
        {
          "name": "setHorizontalDirection",
          "args": [
            {
              "name": "entry",
              "type": "IntersectionObserverEntry",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 282,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "entry",
              "type": "IntersectionObserverEntry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPopoverCardStyle",
          "args": [
            {
              "name": "style",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 233,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "style",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setVerticalDirection",
          "args": [
            {
              "name": "entry",
              "type": "IntersectionObserverEntry",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 296,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "entry",
              "type": "IntersectionObserverEntry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showDropdown",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 206,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 363,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSets the select's value. Part of the ControlValueAccessor interface\nrequired to integrate with Angular's core forms API.\n\n",
          "description": "<p>Sets the select&#39;s value. Part of the ControlValueAccessor interface\nrequired to integrate with Angular&#39;s core forms API.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10278,
                "end": 10283,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "value"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10272,
                "end": 10277,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>New value to be written to the model.</p>\n"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 101,
          "type": "string"
        },
        {
          "name": "attr.no-blur",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 126,
          "type": "boolean"
        },
        {
          "name": "attr.role",
          "defaultValue": "'listbox'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 150,
          "type": "string"
        },
        {
          "name": "attr.tabindex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 120,
          "type": "number"
        },
        {
          "name": "class.expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 145,
          "type": "boolean"
        },
        {
          "name": "class.is-open",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 158,
          "type": "boolean"
        },
        {
          "name": "class.is-opening",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 153,
          "type": "boolean"
        },
        {
          "name": "class.popout-left",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 163,
          "type": "boolean"
        },
        {
          "name": "class.popout-up",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 168,
          "type": "boolean"
        }
      ],
      "hostListeners": [
        {
          "name": "blur",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 473
        },
        {
          "name": "focus",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 459
        },
        {
          "name": "keydown.arrowdown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 503
        },
        {
          "name": "keydown.arrowleft",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 503
        },
        {
          "name": "keydown.arrowright",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 503
        },
        {
          "name": "keydown.arrowup",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 503
        },
        {
          "name": "keydown.end",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 518
        },
        {
          "name": "keydown.enter",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 473
        },
        {
          "name": "keydown.enter",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 493
        },
        {
          "name": "keydown.escape",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 473
        },
        {
          "name": "keydown.home",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 518
        },
        {
          "name": "keydown.space",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 484
        },
        {
          "name": "keydown.tab",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 443
        },
        {
          "name": "mousedown",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 451
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  RendererStyleFlags2,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ButtonComponent } from '../button/button.component';\nimport { CardComponent } from '../card/card.component';\nimport { ItemComponent } from '../item/item.component';\nimport { ListItemTemplateDirective } from '../list/list.directive';\nimport { HorizontalDirection, PopoverComponent } from '../popover/popover.component';\n\nimport { OpenState, VerticalDirection } from './dropdown.types';\nimport { KeyboardHandlerService } from './keyboard-handler.service';\n\n@Component({\n  selector: 'kirby-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DropdownComponent),\n      multi: true,\n    },\n  ],\n})\nexport class DropdownComponent\n  implements AfterContentChecked, AfterViewInit, OnDestroy, ControlValueAccessor {\n  static readonly OPEN_DELAY_IN_MS = 100;\n  private state = OpenState.closed;\n  private hasConfiguredSlottedItems = false;\n  private horizontalDirection = HorizontalDirection.right;\n  private verticalDirection = VerticalDirection.down;\n\n  private _items: string[] | any[] = [];\n  get items(): string[] | any[] {\n    return this._items;\n  }\n\n  @Input() set items(value: string[] | any[]) {\n    this._items = value;\n    this._value = this.items[this.selectedIndex] || null;\n  }\n\n  private _selectedIndex: number = -1;\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n\n  @Input() set selectedIndex(value: number) {\n    if (this._selectedIndex != value) {\n      this._selectedIndex = value;\n      this._value = this.items[this.selectedIndex] || null;\n    }\n  }\n\n  @Input()\n  itemTextProperty = 'text';\n\n  @Input()\n  placeholder = 'Please select:';\n\n  @Input() set popout(direction: HorizontalDirection) {\n    this.horizontalDirection = direction || HorizontalDirection.right;\n  }\n\n  get popout() {\n    return this.horizontalDirection;\n  }\n\n  @Input()\n  attentionLevel: '1' | '2' | '3' | '4' = '3';\n  readonly attentionLevelOpen = '2';\n\n  @Input()\n  expand?: 'block';\n\n  @Input()\n  disabled = false;\n\n  @HostBinding('attr.disabled')\n  get _isDisabled() {\n    return this.disabled ? 'disabled' : null;\n  }\n\n  @HostBinding('class.error')\n  @Input()\n  hasError: boolean;\n\n  @Input()\n  size: 'sm' | 'md' = 'md';\n\n  @Input()\n  tabindex = 0;\n\n  @HostBinding('class.with-popover')\n  @Input()\n  usePopover = false;\n\n  @HostBinding('attr.tabindex')\n  get _tabindex() {\n    return this.disabled ? -1 : this.tabindex;\n  }\n\n  // Prevent Ionic blur on scroll\n  @HostBinding('attr.no-blur')\n  get _noBlurOnScroll() {\n    return true;\n  }\n\n  /**\n   * Emitted when an item is selected (tap on mobile, click/keypress on web)\n   */\n  @Output() change: EventEmitter<string | any> = new EventEmitter<string | any>();\n\n  private _value: string | any = null;\n  get value(): string | any {\n    return this._value;\n  }\n\n  get selectedText(): string {\n    return this.getTextFromItem(this.value);\n  }\n\n  @HostBinding('class.expand')\n  get _isBlockLevel() {\n    return this.expand === 'block';\n  }\n\n  @HostBinding('attr.role')\n  _role = 'listbox';\n\n  @HostBinding('class.is-opening')\n  get _isOpening(): boolean {\n    return this.state === OpenState.opening;\n  }\n\n  @HostBinding('class.is-open')\n  get isOpen(): boolean {\n    return this.state === OpenState.open;\n  }\n\n  @HostBinding('class.popout-left')\n  get _popoutLeft() {\n    return this.horizontalDirection === HorizontalDirection.left;\n  }\n\n  @HostBinding('class.popout-up')\n  get _popoutUp() {\n    return this.verticalDirection === VerticalDirection.up;\n  }\n\n  @ContentChild(ListItemTemplateDirective, { static: true, read: TemplateRef })\n  itemTemplate: TemplateRef<any>;\n  @ContentChildren(ListItemTemplateDirective, { read: ElementRef })\n  slottedItems: QueryList<ElementRef<HTMLElement>>;\n  @ViewChild(CardComponent, { read: ElementRef })\n  cardElement: ElementRef<HTMLElement>;\n  @ViewChild(PopoverComponent)\n  popover?: PopoverComponent;\n  @ViewChild(ButtonComponent, { static: true, read: ElementRef })\n  buttonElement: ElementRef<HTMLElement>;\n  @ViewChildren(ItemComponent, { read: ElementRef })\n  kirbyItemsDefault: QueryList<ElementRef<HTMLElement>>;\n  @ContentChildren(ItemComponent, { read: ElementRef })\n  kirbyItemsSlotted: QueryList<ElementRef<HTMLElement>>;\n\n  private itemClickUnlisten: (() => void)[] = [];\n  private intersectionObserverRef: IntersectionObserver;\n  private showDropdownTimeoutId: ReturnType<typeof setTimeout>;\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef<HTMLElement>,\n    private changeDetectorRef: ChangeDetectorRef,\n    private keyboardHandlerService: KeyboardHandlerService\n  ) {}\n\n  onToggle(event: MouseEvent) {\n    event.stopPropagation();\n    if (!this.isOpen) {\n      this.elementRef.nativeElement.focus();\n    }\n    this.toggle();\n  }\n\n  toggle() {\n    if (this.disabled) {\n      return;\n    }\n    this.isOpen ? this.close() : this.open();\n  }\n\n  onButtonMouseEvent(event: Event) {\n    // Prevent button focus;\n    event.preventDefault();\n  }\n\n  ngAfterContentChecked() {\n    if (!this.hasConfiguredSlottedItems && this.kirbyItemsSlotted.length) {\n      this.kirbyItemsSlotted.forEach((kirbyItem, index) => {\n        this.renderer.setAttribute(kirbyItem.nativeElement, 'role', 'option');\n        const unlisten = this.renderer.listen(kirbyItem.nativeElement, 'click', () => {\n          this.onItemSelect(index);\n        });\n        this.itemClickUnlisten.push(unlisten);\n      });\n      this.hasConfiguredSlottedItems = true;\n    }\n  }\n\n  /* Utility that makes it easier to set styles on card element \n  when using popover*/\n  private setPopoverCardStyle(style: string, value: string) {\n    if (!this.usePopover) return;\n\n    this.renderer.setStyle(\n      this.cardElement.nativeElement,\n      style,\n      value,\n      RendererStyleFlags2.DashCase\n    );\n  }\n\n  ngAfterViewInit() {\n    if (this.usePopover && this.expand === 'block') {\n      const { width } = this.elementRef.nativeElement.getBoundingClientRect();\n      this.setPopoverCardStyle('--kirby-card-width', `${width}px`);\n      this.setPopoverCardStyle('max-width', 'initial');\n      this.setPopoverCardStyle('min-width', 'initial');\n    }\n    this.initializeAlignment();\n  }\n\n  private initializeAlignment() {\n    if (this.usePopover) return;\n    if (!this.intersectionObserverRef) {\n      const options = {\n        rootMargin: '0px',\n      };\n      const callback: IntersectionObserverCallback = (entries) => {\n        // Only apply alignment when opening:\n        if (this.state !== OpenState.opening) {\n          return;\n        }\n\n        // Cancel any pending timer to show dropdown:\n        clearTimeout(this.showDropdownTimeoutId);\n        const entry = entries[0];\n        const isVisible = entry.boundingClientRect.width > 0;\n        if (isVisible && entry.intersectionRatio < 1) {\n          this.setHorizontalDirection(entry);\n          this.setVerticalDirection(entry);\n        }\n        this.showDropdown();\n        this.changeDetectorRef.detectChanges();\n      };\n      this.intersectionObserverRef = new IntersectionObserver(callback, options);\n      this.intersectionObserverRef.observe(this.cardElement.nativeElement);\n    }\n  }\n\n  private setHorizontalDirection(entry: IntersectionObserverEntry) {\n    // If popout direction is set to right, and the entry is cut off to the right by ${entry.boundingClientRect.right - entry.intersectionRect.right}px\n    // it is set to popout left instead, and vice versa for popout direction left\n    if (this.horizontalDirection === HorizontalDirection.right) {\n      if (entry.boundingClientRect.right > entry.rootBounds.right) {\n        this.horizontalDirection = HorizontalDirection.left;\n      }\n    } else {\n      if (entry.boundingClientRect.left < entry.rootBounds.left) {\n        this.horizontalDirection = HorizontalDirection.right;\n      }\n    }\n  }\n\n  private setVerticalDirection(entry: IntersectionObserverEntry) {\n    if (entry.boundingClientRect.top < 0) {\n      // entry is cut off at the top by ${entry.boundingClientRect.top}px\n      // open downwards:\n      this.verticalDirection = VerticalDirection.down;\n    }\n    if (entry.boundingClientRect.bottom > entry.rootBounds.bottom) {\n      // entry is cut off at the bottom by ${entry.boundingClientRect.bottom - entry.intersectionRect.bottom}px\n      const containerOffsetTop = this.elementRef.nativeElement.getBoundingClientRect().top;\n      const SPACING = 5; //TODO: Get from SCSS\n      // Check if the card can fit on top of button:\n      if (containerOffsetTop > entry.target.clientHeight + SPACING) {\n        // open upwards:\n        this.verticalDirection = VerticalDirection.up;\n      }\n    }\n  }\n\n  open() {\n    if (this.disabled) {\n      return;\n    }\n    if (!this.isOpen) {\n      this.state = OpenState.opening;\n      // ensures that the dropdown is opened in case the IntersectionObserverCallback isn't invoked\n      this.showDropdownTimeoutId = setTimeout(\n        () => this.showDropdown(),\n        DropdownComponent.OPEN_DELAY_IN_MS\n      );\n    }\n  }\n\n  private showDropdown() {\n    if (this.state === OpenState.opening) {\n      this.state = OpenState.open;\n      this.popover?.show();\n      this.scrollItemIntoView(this.selectedIndex);\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  close() {\n    if (this.disabled) {\n      return;\n    }\n    if (this.isOpen) {\n      this.state = OpenState.closed;\n      // Reset vertical direction to default\n      this.verticalDirection = VerticalDirection.down;\n      this.popover?.hide();\n    }\n  }\n\n  onItemSelect(index: number) {\n    this.selectItem(index);\n    this.close();\n  }\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched = () => {};\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this._selectItemByValue(value);\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private selectItem(index: number) {\n    if (index != this.selectedIndex) {\n      this.selectedIndex = index;\n      this.change.emit(this.value);\n      this._onChange(this.value);\n      this.scrollItemIntoView(index);\n    }\n  }\n\n  private _selectItemByValue(value: string | any) {\n    this.selectedIndex = this.items.indexOf(value);\n  }\n\n  getTextFromItem(item: string | any) {\n    if (!item) {\n      return null;\n    }\n    return typeof item === 'string' ? item : item[this.itemTextProperty];\n  }\n\n  scrollItemIntoView(index: number) {\n    const kirbyItems =\n      this.kirbyItemsSlotted && this.kirbyItemsSlotted.length\n        ? this.kirbyItemsSlotted\n        : this.kirbyItemsDefault;\n    if (kirbyItems && kirbyItems.length) {\n      const selectedKirbyItem = kirbyItems.toArray()[index];\n      if (selectedKirbyItem && selectedKirbyItem.nativeElement) {\n        const itemElement = selectedKirbyItem.nativeElement;\n        const scrollContainer = this.cardElement.nativeElement;\n        const itemTop = itemElement.offsetTop;\n        const itemBottom = itemElement.offsetTop + itemElement.offsetHeight;\n        const containerVisibleTop = scrollContainer.scrollTop;\n        const containerVisibleBottom = scrollContainer.clientHeight + scrollContainer.scrollTop;\n        if (itemTop < containerVisibleTop) {\n          scrollContainer.scrollTop = itemTop;\n        } else if (itemBottom > containerVisibleBottom) {\n          scrollContainer.scrollTop = itemBottom - scrollContainer.clientHeight;\n        }\n      }\n    }\n  }\n\n  @HostListener('keydown.tab', ['$event'])\n  _onTab(event: KeyboardEvent) {\n    if (this.isOpen) {\n      event.preventDefault();\n      this.close();\n    }\n  }\n\n  @HostListener('mousedown', ['$event'])\n  _onMouseDown(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n\n  @HostListener('focus')\n  _onFocus() {\n    if (this.disabled) {\n      this.elementRef.nativeElement.blur();\n    }\n  }\n\n  _onPopoverWillHide() {\n    this.state = OpenState.closed;\n    this.elementRef.nativeElement.focus();\n  }\n\n  @HostListener('keydown.enter')\n  @HostListener('keydown.escape')\n  @HostListener('blur', ['$event'])\n  _onBlur(event?: FocusEvent) {\n    if (this.disabled) return;\n    if (this.isOpen) {\n      if (!this.cardElement.nativeElement.contains(event?.relatedTarget as HTMLElement)) {\n        this.close();\n      }\n    }\n    this._onTouched();\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  _onSpace(event: KeyboardEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (!this.isOpen) {\n      this.open();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  _onEnter(event: KeyboardEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.toggle();\n  }\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.arrowleft', ['$event'])\n  @HostListener('keydown.arrowright', ['$event'])\n  _onArrowKeys(event: KeyboardEvent) {\n    if (this.disabled) return;\n    // Mirror default HTML5 select behaviour - prevent left/right arrows when open:\n    if (this.isOpen && (event.key === 'ArrowLeft' || event.key === 'ArrowRight')) {\n      return;\n    }\n    const newIndex = this.keyboardHandlerService.handle(event, this.items, this.selectedIndex);\n    if (newIndex > -1) {\n      this.selectItem(newIndex);\n    }\n    return false;\n  }\n\n  @HostListener('keydown.home', ['$event'])\n  @HostListener('keydown.end', ['$event'])\n  _onHomeEndKeys(event: KeyboardEvent) {\n    if (this.disabled) return;\n    const newIndex = this.keyboardHandlerService.handle(event, this.items, this.selectedIndex);\n    if (newIndex > -1) {\n      this.selectItem(newIndex);\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    let unlisten: () => void;\n    while ((unlisten = this.itemClickUnlisten.pop()) !== undefined) {\n      unlisten();\n    }\n    if (this.intersectionObserverRef) {\n      this.intersectionObserverRef.disconnect();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$dropdown-max-height: 8 * $dropdown-item-height;\n$margin-horizontal-total: 2 * size('s');\n$min-screen-width-small: 320px;\n$min-screen-width: 375px;\n\n:host {\n  display: inline-block;\n  position: relative;\n  max-width: calc(100vw - #{$margin-horizontal-total});\n\n  &.expand {\n    display: block;\n\n    kirby-card {\n      width: 100%;\n      min-width: initial;\n      max-width: initial;\n    }\n  }\n\n  // Outline is applied on button border instead,\n  // to keep the rounded shape:\n  outline: none;\n\n  // Only apply focus ring if pointer device can hover\n  // (effectively desktop/mouse devices):\n  @include focus() {\n    > button,\n    > button.attention-level3 {\n      border-color: $focus-ring-color;\n    }\n  }\n\n  &.error,\n  &.ng-touched.ng-invalid {\n    > button {\n      border-color: get-color('danger');\n    }\n  }\n}\n\n:host > button {\n  position: relative;\n  margin: 0;\n  outline: none;\n  width: 100%;\n  transition: box-shadow 0.2s, border-color 0.2s;\n\n  // Temporary fix for button-width as attention level 3 has border,\n  // and attention level 2 does not:\n  &.attention-level2 {\n    border: 1px solid transparent;\n  }\n\n  .text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n\nkirby-popover {\n  --max-height: #{$dropdown-max-height};\n}\n\nkirby-card {\n  max-height: $dropdown-max-height;\n  margin-top: size('xxxs');\n  margin-bottom: size('xxxs');\n  overflow-y: auto;\n  box-shadow: get-elevation(8);\n  min-width: $min-screen-width-small - $margin-horizontal-total;\n  @include media('>=small') {\n    min-width: $min-screen-width - $margin-horizontal-total;\n  }\n  max-width: calc(100vw - #{$margin-horizontal-total});\n}\n\n:host(:not(.with-popover)) {\n  kirby-card {\n    display: none;\n    opacity: 0;\n    position: absolute;\n    z-index: z('dropdown');\n  }\n\n  &.is-opening {\n    kirby-card {\n      display: block;\n    }\n  }\n\n  &.is-open {\n    kirby-card {\n      display: block;\n      opacity: 1;\n    }\n  }\n\n  &.popout-left {\n    kirby-card {\n      right: 0;\n    }\n  }\n\n  &.popout-up {\n    kirby-card {\n      top: 0;\n      margin-top: -#{size('xxxs')};\n      transform: translateY(-100%);\n    }\n\n    &.is-open {\n      > button {\n        //Move button on top of card's shadow:\n        z-index: z('dropdown') + 1;\n      }\n    }\n  }\n}\n\n:host(.is-open) {\n  & > button {\n    box-shadow: get-elevation(8);\n  }\n}\n\n:host-context(kirby-calendar) {\n  > button {\n    border-color: transparent;\n    font-weight: font-weight('bold');\n    font-size: initial;\n  }\n\n  &.is-open {\n    & > button {\n      box-shadow: none;\n    }\n  }\n}\n",
          "styleUrl": "./dropdown.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "keyboardHandlerService",
            "type": "KeyboardHandlerService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 189,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "keyboardHandlerService",
            "type": "KeyboardHandlerService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentChecked", "AfterViewInit", "OnDestroy", "ControlValueAccessor"],
      "accessors": {
        "items": {
          "name": "items",
          "setSignature": {
            "name": "items",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string[] | any[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string[] | any[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "items",
            "type": "",
            "returnType": "[] | []",
            "line": 55
          }
        },
        "selectedIndex": {
          "name": "selectedIndex",
          "setSignature": {
            "name": "selectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedIndex",
            "type": "number",
            "returnType": "number",
            "line": 65
          }
        },
        "popout": {
          "name": "popout",
          "setSignature": {
            "name": "popout",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "direction",
                "type": "HorizontalDirection",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "direction",
                "type": "HorizontalDirection",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "popout",
            "type": "",
            "returnType": "",
            "line": 86
          }
        },
        "_isDisabled": {
          "name": "_isDisabled",
          "getSignature": {
            "name": "_isDisabled",
            "type": "",
            "returnType": "",
            "line": 101
          }
        },
        "_tabindex": {
          "name": "_tabindex",
          "getSignature": {
            "name": "_tabindex",
            "type": "",
            "returnType": "",
            "line": 120
          }
        },
        "_noBlurOnScroll": {
          "name": "_noBlurOnScroll",
          "getSignature": {
            "name": "_noBlurOnScroll",
            "type": "",
            "returnType": "",
            "line": 126
          }
        },
        "value": {
          "name": "value",
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | any",
            "line": 136
          }
        },
        "selectedText": {
          "name": "selectedText",
          "getSignature": {
            "name": "selectedText",
            "type": "string",
            "returnType": "string",
            "line": 140
          }
        },
        "_isBlockLevel": {
          "name": "_isBlockLevel",
          "getSignature": {
            "name": "_isBlockLevel",
            "type": "",
            "returnType": "",
            "line": 145
          }
        },
        "_isOpening": {
          "name": "_isOpening",
          "getSignature": {
            "name": "_isOpening",
            "type": "boolean",
            "returnType": "boolean",
            "line": 153
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 158
          }
        },
        "_popoutLeft": {
          "name": "_popoutLeft",
          "getSignature": {
            "name": "_popoutLeft",
            "type": "",
            "returnType": "",
            "line": 163
          }
        },
        "_popoutUp": {
          "name": "_popoutUp",
          "getSignature": {
            "name": "_popoutUp",
            "type": "",
            "returnType": "",
            "line": 168
          }
        }
      },
      "templateData": "<button\n  kirby-button\n  [size]=\"size\"\n  [attentionLevel]=\"isOpen ? attentionLevelOpen : attentionLevel\"\n  tabindex=\"-1\"\n  (click)=\"onToggle($event)\"\n  (mousedown)=\"onButtonMouseEvent($event)\"\n  [disabled]=\"disabled\"\n>\n  <span class=\"text\">{{ selectedText || placeholder }}</span>\n  <kirby-icon [name]=\"isOpen ? 'arrow-up' : 'arrow-down'\"></kirby-icon>\n</button>\n\n<ng-container *ngTemplateOutlet=\"usePopover ? popoverTemplate : itemWrapperTemplate\"></ng-container>\n\n<ng-template #popoverTemplate>\n  <kirby-popover [target]=\"buttonElement\" [popout]=\"popout\" (willHide)=\"_onPopoverWillHide()\">\n    <ng-container *ngTemplateOutlet=\"itemWrapperTemplate\"></ng-container>\n  </kirby-popover>\n</ng-template>\n\n<ng-template #itemWrapperTemplate>\n  <kirby-card>\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          itemTemplate || defaultItemTemplate;\n          context: { $implicit: item, selected: i === selectedIndex, index: i }\n        \"\n      ></ng-container>\n    </ng-container>\n  </kirby-card>\n</ng-template>\n\n<ng-template #defaultItemTemplate let-item let-selected=\"selected\" let-index=\"index\">\n  <kirby-item [selectable]=\"true\" [selected]=\"selected\" (click)=\"onItemSelect(index)\" role=\"option\">\n    <!-- Tabindex fixes issue with popover dropdown not working in safari -->\n    <h3 tabindex=\"0\">{{ getTextFromItem(item) }}</h3>\n    <kirby-icon *ngIf=\"selected\" name=\"checkmark-selected\" slot=\"end\"></kirby-icon>\n  </kirby-item>\n</ng-template>\n"
    },
    {
      "name": "DynamicFooterEmbeddedComponent",
      "id": "component-DynamicFooterEmbeddedComponent-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<div>DynamicFooterEmbeddedComponent - Some test content</div>\n<kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n  <button kirby-button>Test</button>\n</kirby-modal-footer>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isEnabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 149
        },
        {
          "name": "showFooter",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 148
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "DynamicPageProgressEmbeddedComponent",
      "id": "component-DynamicPageProgressEmbeddedComponent-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "showPageProgress",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 174
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "EmptyStateComponent",
      "id": "component-EmptyStateComponent-b1c92a2be585db9dabca5ce6454606d8",
      "file": "libs/designsystem/src/lib/components/empty-state/empty-state.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-empty-state",
      "styleUrls": ["./empty-state.component.scss"],
      "styles": [],
      "templateUrl": ["./empty-state.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "customIconName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "string"
        },
        {
          "name": "iconName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "string"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "slottedButtons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ButtonComponent>",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ButtonComponent"
            }
          ],
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "enforceAttentionLevelRules",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nEnforces that all slotted buttons will have their attention\nlevel set to 3, except the first button if it has\nlevel 1.\n",
          "description": "<p>Enforces that all slotted buttons will have their attention\nlevel set to 3, except the first button if it has\nlevel 1.</p>\n",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { AfterContentInit, Component, ContentChildren, Input, QueryList } from '@angular/core';\n\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'kirby-empty-state',\n  templateUrl: './empty-state.component.html',\n  styleUrls: ['./empty-state.component.scss'],\n})\nexport class EmptyStateComponent implements AfterContentInit {\n  @Input() iconName: string;\n  @Input() customIconName: string;\n  @Input() title: string;\n  @Input() subtitle: string;\n\n  @ContentChildren(ButtonComponent)\n  private slottedButtons: QueryList<ButtonComponent>;\n\n  ngAfterContentInit() {\n    this.enforceAttentionLevelRules();\n\n    /* setTimeout prevents ExpressionChangedAfterItHasBeenCheckedError when changing attention \n    levels of slotted buttons in this.enforceAttentionLevelRules */\n    this.slottedButtons.changes.subscribe(() => {\n      setTimeout(() => this.enforceAttentionLevelRules());\n    });\n  }\n\n  /** Enforces that all slotted buttons will have their attention\n   * level set to 3, except the first button if it has\n   * level 1.\n   */\n  private enforceAttentionLevelRules() {\n    this.slottedButtons.forEach((button, index) => {\n      if (index === 0 && button.isAttentionLevel1) return;\n\n      if (!button.isAttentionLevel3) {\n        button.attentionLevel = '3';\n      }\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\narticle {\n  max-width: 330px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n}\n\n.icon-outline {\n  $icon-size: size('xxl') * 2;\n  width: $icon-size;\n  height: $icon-size;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: size('m');\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border: size('xxxs') solid get-color('medium');\n  border-radius: 50%;\n}\n\nkirby-icon {\n  color: get-color('medium');\n}\n\nh3.title {\n  margin-bottom: size('xxs');\n}\n\np.subtitle {\n  margin-bottom: size('m');\n  white-space: pre-wrap;\n}\n\n@each $color-name, $color-value in $main-colors {\n  :host(.#{$color-name}) {\n    .icon-outline {\n      border-color: #{get-color($color-name)};\n    }\n    kirby-icon {\n      color: #{get-color($color-name)};\n    }\n  }\n}\n",
          "styleUrl": "./empty-state.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["AfterContentInit"],
      "templateData": "<article>\n  <div *ngIf=\"iconName || customIconName\" class=\"icon-outline\">\n    <kirby-icon [name]=\"iconName\" [customName]=\"customIconName\" size=\"lg\"></kirby-icon>\n  </div>\n  <h3 *ngIf=\"title\" class=\"title\">{{ title }}</h3>\n  <p *ngIf=\"subtitle\" class=\"subtitle\">{{ subtitle }}</p>\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n</article>\n"
    },
    {
      "name": "FabSheetComponent",
      "id": "component-FabSheetComponent-4f60ced17d35c0be4c5ce92f42cae50e",
      "file": "libs/designsystem/src/lib/components/fab-sheet/fab-sheet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-fab-sheet",
      "styleUrls": ["./fab-sheet.component.scss"],
      "styles": [],
      "templateUrl": ["./fab-sheet.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean"
        },
        {
          "name": "horizontalAlignment",
          "defaultValue": "'right'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "\"left\" | \"center\" | \"right\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_isBackdropVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [121]
        },
        {
          "name": "_isFabSheetOpen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [121]
        },
        {
          "name": "actionSheet",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActionSheetComponent",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ActionSheetComponent, {static: false}"
            }
          ]
        },
        {
          "name": "ionFabButton",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 43,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonFabButton, {static: true, read: ElementRef}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "hideActions",
          "args": [
            {
              "name": "fab",
              "type": "IonFab",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fab",
              "type": "IonFab",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFabClick",
          "args": [
            {
              "name": "fab",
              "type": "IonFab",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fab",
              "type": "IonFab",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setCloseIcon",
          "args": [
            {
              "name": "kirbyCloseIcon",
              "type": "Icon",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "retryCount",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "0"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "kirbyCloseIcon",
              "type": "Icon",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "retryCount",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "0",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.backdrop-visible",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean"
        },
        {
          "name": "class.is-open",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ContentChild,\n  HostBinding,\n  Input,\n  AfterContentInit,\n  AfterViewInit,\n  ViewChild,\n  ElementRef,\n  Renderer2,\n  Inject,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { IonFab, IonFabButton, IonIcon } from '@ionic/angular';\n\nimport { ActionSheetComponent } from '../modal/action-sheet/action-sheet.component';\nimport { kirbyIconSettings } from '../icon/kirby-icon-settings';\nimport { Icon } from '../icon/icon-settings';\n\n@Component({\n  selector: 'kirby-fab-sheet',\n  templateUrl: './fab-sheet.component.html',\n  styleUrls: ['./fab-sheet.component.scss'],\n})\nexport class FabSheetComponent implements AfterContentInit, AfterViewInit {\n  @Input() disabled: boolean = false;\n  @Input() horizontalAlignment: 'left' | 'center' | 'right' = 'right';\n\n  private _isFabSheetOpen: boolean = false;\n  @HostBinding('class.is-open')\n  get isFabSheetOpen() {\n    return this._isFabSheetOpen;\n  }\n\n  private _isBackdropVisible: boolean = false;\n  @HostBinding('class.backdrop-visible')\n  get isBackdropVisible() {\n    return this._isBackdropVisible;\n  }\n\n  @ContentChild(ActionSheetComponent, { static: false }) actionSheet: ActionSheetComponent;\n\n  @ViewChild(IonFabButton, { static: true, read: ElementRef }) ionFabButton: ElementRef<\n    HTMLElement\n  >;\n\n  constructor(private renderer: Renderer2, @Inject(DOCUMENT) private document: any) {}\n\n  ngAfterViewInit(): void {\n    const kirbyCloseIcon = kirbyIconSettings.icons.find((icon) => icon.name === 'close');\n    this.setCloseIcon(kirbyCloseIcon);\n  }\n\n  private setCloseIcon(kirbyCloseIcon: Icon, retryCount = 0) {\n    const maxRetryCount = 20;\n    const retryDelayInMs = 20;\n    const fabButtonElement = this.ionFabButton.nativeElement;\n    if (!fabButtonElement || !kirbyCloseIcon || retryCount >= maxRetryCount) {\n      return;\n    }\n    if (fabButtonElement.shadowRoot && fabButtonElement.shadowRoot.innerHTML) {\n      const closeIcon = fabButtonElement.shadowRoot.querySelector('.close-icon ion-icon');\n      if (closeIcon) {\n        const closeIconSvgLoaded = closeIcon.shadowRoot.querySelector('.icon-inner svg');\n        const ionCloseIcon = (closeIcon as unknown) as IonIcon;\n        if (ionCloseIcon && closeIconSvgLoaded) {\n          ionCloseIcon.src = kirbyCloseIcon.svg;\n          return;\n        }\n      }\n    }\n    retryCount++;\n    setTimeout(() => this.setCloseIcon(kirbyCloseIcon, retryCount), retryDelayInMs);\n  }\n\n  ngAfterContentInit(): void {\n    if (this.actionSheet) {\n      this.actionSheet.hideCancel = true;\n    }\n  }\n\n  hideActions(fab: IonFab) {\n    fab.close();\n    this._isFabSheetOpen = false;\n    this._isBackdropVisible = false;\n    this.renderer.removeClass(this.document.body, 'fab-sheet-active');\n  }\n\n  onFabClick(fab: IonFab) {\n    this._isFabSheetOpen = !fab.activated;\n    if (this._isFabSheetOpen) {\n      this.renderer.addClass(this.document.body, 'fab-sheet-active');\n    } else {\n      this.renderer.removeClass(this.document.body, 'fab-sheet-active');\n    }\n    setTimeout(() => (this._isBackdropVisible = this.isFabSheetOpen));\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$fab-sheet-margin: size('s');\n\n:host {\n  --kirby-action-sheet-margin-horizontal: #{$fab-sheet-margin};\n}\n\n// Ionic fab can be customized by using the css properties listed in the CSS Custom Properties section of the below docs page:\n// https://ionicframework.com/docs/api/fab-button\nion-fab-button {\n  --box-shadow: #{get-elevation(8)};\n  width: 64px;\n  height: 64px;\n  user-select: none;\n\n  // Outline is applied on button border instead,\n  // to keep the rounded shape:\n  outline: none;\n\n  // Only apply focus ring if pointer device can hover\n  // (effectively desktop/mouse devices):\n  @include focus() {\n    --border-width: 1px;\n    --border-style: solid;\n    --border-color: #{$focus-ring-color};\n  }\n\n  &[disabled] {\n    --background: #{get-color('semi-light')};\n    --box-shadow: none;\n    opacity: 1;\n  }\n}\n\nion-fab {\n  position: fixed;\n  bottom: $fab-sheet-margin;\n  right: $fab-sheet-margin;\n}\n\n:host-context(.fixed-content) ion-fab {\n  position: absolute;\n}\n\nion-backdrop {\n  opacity: 0;\n  transition: opacity 750ms;\n  position: fixed;\n  z-index: 999;\n}\n\n:host(.backdrop-visible) ion-backdrop {\n  opacity: 0.4;\n\n  @include media('>=medium') {\n    opacity: 0;\n  }\n}\n\nion-fab-list {\n  margin-top: 76px;\n  margin-bottom: 76px;\n  right: 0;\n}\n",
          "styleUrl": "./fab-sheet.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "document",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 45,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "AfterViewInit"],
      "accessors": {
        "isFabSheetOpen": {
          "name": "isFabSheetOpen",
          "getSignature": {
            "name": "isFabSheetOpen",
            "type": "",
            "returnType": "",
            "line": 31
          }
        },
        "isBackdropVisible": {
          "name": "isBackdropVisible",
          "getSignature": {
            "name": "isBackdropVisible",
            "type": "",
            "returnType": "",
            "line": 37
          }
        }
      },
      "templateData": "<ion-backdrop\n  *ngIf=\"actionSheet && isFabSheetOpen\"\n  (ionBackdropTap)=\"hideActions(fab)\"\n  (click)=\"hideActions(fab)\"\n></ion-backdrop>\n<ion-fab #fab (click)=\"disabled || onFabClick(fab)\">\n  <ion-fab-button [disabled]=\"disabled\" [attr.disabled]=\"disabled ? true : null\" tabindex=\"-1\">\n    <ng-content select=\"kirby-icon\"></ng-content>\n  </ion-fab-button>\n  <ion-fab-list *ngIf=\"actionSheet\" side=\"top\" class=\"{{ horizontalAlignment }}\">\n    <ng-content select=\"kirby-action-sheet\"></ng-content>\n  </ion-fab-list>\n</ion-fab>\n"
    },
    {
      "name": "FlagComponent",
      "id": "component-FlagComponent-28d0298ddfa6b7495ffa4cdc261be8e1",
      "file": "libs/designsystem/src/lib/components/flag/flag.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-flag",
      "styleUrls": ["./flag.component.scss"],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "size",
          "defaultValue": "'md'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "themeColor",
          "defaultValue": "'transparent'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "\"success\" | \"warning\" | \"danger\" | \"semi-light\" | \"transparent\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "{}"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, ChangeDetectionStrategy, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'kirby-flag',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['./flag.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlagComponent {\n  @Input() size: 'xs' | 'sm' | 'md' = 'md';\n  @Input() themeColor: 'success' | 'warning' | 'danger' | 'semi-light' | 'transparent' =\n    'transparent';\n\n  @HostBinding('class')\n  get _cssClass() {\n    return [this.themeColor, this.size];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: inline-block;\n  background-color: var(--kirby-flag-background-color, transparent);\n  color: var(--kirby-flag-color, get-color('white-contrast'));\n  border: 1px solid var(--kirby-flag-border-color, get-color('medium'));\n  border-radius: size('xxxs');\n\n  font-size: font-size('n');\n\n  padding-top: size('xxxxs');\n  padding-bottom: size('xxxxs');\n  padding-left: size('xxs');\n  padding-right: size('xxs');\n\n  &.sm {\n    font-size: font-size('s');\n  }\n\n  &.xs {\n    font-size: font-size('xs');\n    padding-left: size('xxxs');\n    padding-right: size('xxxs');\n  }\n}\n\n@each $color-name,\n  $color-value\n    in map-merge(\n      $notification-colors,\n      (\n        'semi-light': get-color('semi-light'),\n      )\n    )\n{\n  :host(.#{$color-name}) {\n    --kirby-flag-background-color: #{get-color($color-name)};\n    --kirby-flag-color: #{get-color($color-name + '-contrast')};\n    --kirby-flag-border-color: #{get-color($color-name)};\n  }\n}\n",
          "styleUrl": "./flag.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_cssClass": {
          "name": "_cssClass",
          "getSignature": {
            "name": "_cssClass",
            "type": "",
            "returnType": "",
            "line": 17
          }
        }
      }
    },
    {
      "name": "FormFieldComponent",
      "id": "component-FormFieldComponent-fffb9f6e1a3ad60edfd35411ee36ecbb",
      "file": "libs/designsystem/src/lib/components/form-field/form-field.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-form-field",
      "styleUrls": ["./form-field.component.scss"],
      "styles": [],
      "templateUrl": ["./form-field.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string"
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_labelId",
          "defaultValue": "UniqueIdGenerator.scopedTo('kirby-form-field-label').next()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "counter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputCounterComponent",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "InputCounterComponent, {static: false}"
            }
          ]
        },
        {
          "name": "element",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [121]
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "InputComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "inputElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLInputElement | HTMLTextAreaElement",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [121]
        },
        {
          "name": "isRegistered",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [121]
        },
        {
          "name": "isTouch",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [121]
        },
        {
          "name": "radioGroupComponent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RadioGroupComponent",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "RadioGroupComponent"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "radioGroupElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 43,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "RadioGroupComponent, {read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "textarea",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLTextAreaElement>",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TextareaComponent, {read: ElementRef}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "_onRegisterFormField",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'kirbyRegisterFormField'"
            }
          ]
        },
        {
          "name": "dispatchLoadEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onLabelClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "kirbyRegisterFormField",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\n\nimport { PlatformService } from '../../helpers/platform.service';\nimport { UniqueIdGenerator } from '../../helpers/unique-id-generator.helper';\nimport { WindowRef } from '../../types/window-ref';\nimport { RadioGroupComponent } from '../radio/radio-group/radio-group.component';\n\nimport { InputCounterComponent } from './input-counter/input-counter.component';\nimport { InputComponent } from './input/input.component';\nimport { TextareaComponent } from './textarea/textarea.component';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'kirby-form-field',\n  styleUrls: ['./form-field.component.scss'],\n  templateUrl: './form-field.component.html',\n})\nexport class FormFieldComponent\n  implements AfterContentChecked, AfterContentInit, OnInit, OnDestroy {\n  private isRegistered = false;\n  private element: HTMLElement;\n  private inputElement: HTMLInputElement | HTMLTextAreaElement;\n  private isTouch: boolean;\n  _labelId = UniqueIdGenerator.scopedTo('kirby-form-field-label').next();\n\n  @Input() label: string;\n  @Input() message: string;\n\n  @ContentChild(InputCounterComponent, { static: false }) counter: InputCounterComponent;\n  @ContentChild(RadioGroupComponent) private radioGroupComponent: RadioGroupComponent;\n  @ContentChild(RadioGroupComponent, { read: ElementRef }) private radioGroupElement: ElementRef<\n    HTMLElement\n  >;\n\n  @ContentChild(InputComponent, { read: ElementRef }) input: ElementRef<HTMLInputElement>;\n  @ContentChild(TextareaComponent, { read: ElementRef }) textarea: ElementRef<HTMLTextAreaElement>;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    private platform: PlatformService,\n    private renderer: Renderer2,\n    private windowRef: WindowRef\n  ) {\n    this.element = elementRef.nativeElement;\n  }\n\n  get _wrapContentInLabel(): boolean {\n    return !!this.label && (!!this.input || !!this.textarea);\n  }\n\n  private dispatchLoadEvent() {\n    // Dispatch an `ionInputDidLoad` event to register\n    // form field + input/textarea with Ionic input shims\n    // See: https://github.com/ionic-team/ionic-framework/blob/master/core/src/utils/input-shims/input-shims.ts\n    this.windowRef.nativeWindow.document.dispatchEvent(\n      new CustomEvent('ionInputDidLoad', {\n        detail: this.element,\n      })\n    );\n  }\n\n  @HostListener('kirbyRegisterFormField')\n  _onRegisterFormField() {\n    this.dispatchLoadEvent();\n  }\n\n  onLabelClick() {\n    this.radioGroupComponent && this.radioGroupComponent.focus();\n  }\n\n  public focus() {\n    if (!this.inputElement) return;\n\n    if (this.isTouch) {\n      // Trigger Ionic's input shims to ensure input is scrolled into view.\n      // See: https://github.com/ionic-team/ionic-framework/blob/master/core/src/utils/input-shims/hacks/scroll-assist.ts\n      const touchStart = new TouchEvent('touchstart');\n      const touchEnd = new TouchEvent('touchend');\n      this.inputElement.dispatchEvent(touchStart);\n      this.inputElement.dispatchEvent(touchEnd);\n    } else {\n      this.inputElement.focus();\n    }\n  }\n\n  ngOnInit() {\n    this.isTouch = this.platform.isTouch();\n  }\n\n  ngAfterContentInit(): void {\n    if (this.label && this.radioGroupElement) {\n      this.renderer.setAttribute(\n        this.radioGroupElement.nativeElement,\n        'aria-labelledby',\n        this._labelId\n      );\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.inputElement) {\n      this.inputElement = this.element.querySelector('input, textarea');\n    }\n\n    // TODO: remove \"!this.inputElement.readOnly\" when ionic has fixed input click issue\n    // https://github.com/ionic-team/ionic-framework/issues/22740\n    if (\n      !this.isRegistered &&\n      this.element.isConnected &&\n      !!this.inputElement &&\n      !this.inputElement.readOnly\n    ) {\n      // Host is connected to dom and slotted input/textarea is present:\n      this.isRegistered = true;\n      this.dispatchLoadEvent();\n    }\n  }\n\n  ngOnDestroy(): void {\n    // Dispatch an `ionInputDidUnload` event to unregister\n    // form field + input/textarea from Ionic input shims\n    // See: https://github.com/ionic-team/ionic-framework/blob/master/core/src/utils/input-shims/input-shims.ts\n    this.windowRef.nativeWindow.document.dispatchEvent(\n      new CustomEvent('ionInputDidUnload', {\n        detail: this.element,\n      })\n    );\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: block;\n  position: relative; // Ensures correct position of cloned child input when Ionic scrollAssist is enabled\n  margin-bottom: size('s');\n}\n\n:host-context(kirby-item) {\n  margin-bottom: 0;\n}\n\n.texts {\n  display: flex;\n  justify-content: space-between;\n  padding: 2px size('s') 0 size('s');\n\n  .message {\n    flex: 75%;\n\n    &:only-child {\n      flex-basis: auto;\n    }\n  }\n\n  .counter {\n    flex: 25%;\n    text-align: right;\n  }\n}\n\nlabel {\n  display: block;\n}\n\n.text {\n  display: block;\n  font-size: font-size('s');\n  font-weight: font-weight('light');\n  line-height: line-height('s');\n  margin-bottom: size('xxxs');\n  padding: 0 size('s');\n}\n",
          "styleUrl": "./form-field.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 48,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentChecked", "AfterContentInit", "OnInit", "OnDestroy"],
      "accessors": {
        "_wrapContentInLabel": {
          "name": "_wrapContentInLabel",
          "getSignature": {
            "name": "_wrapContentInLabel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 59
          }
        }
      },
      "templateData": "<label *ngIf=\"_wrapContentInLabel\">\n  <ng-container *ngTemplateOutlet=\"labelTextTemplate\"></ng-container>\n  <ng-container *ngTemplateOutlet=\"slottedInputTemplate\"></ng-container>\n</label>\n\n<ng-container *ngIf=\"!_wrapContentInLabel\">\n  <ng-container *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n  <ng-container *ngTemplateOutlet=\"slottedInputTemplate\"></ng-container>\n</ng-container>\n\n<div *ngIf=\"message || counter\" class=\"texts\">\n  <kirby-form-field-message\n    *ngIf=\"message\"\n    class=\"message\"\n    [text]=\"message\"\n  ></kirby-form-field-message>\n\n  <div *ngIf=\"counter\" class=\"counter\">\n    <ng-content select=\"kirby-input-counter\"></ng-content>\n  </div>\n</div>\n\n<ng-template #slottedInputTemplate>\n  <ng-content select=\"input[kirby-input]\"></ng-content>\n  <ng-content select=\"textarea[kirby-textarea]\"></ng-content>\n  <ng-content select=\"kirby-radio-group\"></ng-content>\n</ng-template>\n\n<ng-template #labelTextTemplate>\n  <ng-container *ngIf=\"label\">\n    <span class=\"text\">{{ label }}</span>\n  </ng-container>\n</ng-template>\n\n<ng-template #labelTemplate>\n  <ng-container *ngIf=\"label\">\n    <label class=\"text\" [id]=\"_labelId\" (click)=\"onLabelClick()\">{{ label }}</label>\n  </ng-container>\n</ng-template>\n"
    },
    {
      "name": "FormFieldMessageComponent",
      "id": "component-FormFieldMessageComponent-9c9172a7d3fbb1c131b5d821197ce82f",
      "file": "libs/designsystem/src/lib/components/form-field/form-field-message/form-field-message.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-form-field-message",
      "styleUrls": ["./form-field-message.component.scss"],
      "styles": [],
      "templateUrl": ["./form-field-message.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "position",
          "defaultValue": "'left'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "\"left\" | \"right\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'kirby-form-field-message',\n  styleUrls: ['./form-field-message.component.scss'],\n  templateUrl: './form-field-message.component.html',\n})\nexport class FormFieldMessageComponent {\n  @Input() text: string;\n  @Input() position: 'left' | 'right' = 'left';\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  font-style: italic;\n  font-size: font-size('xs');\n  font-weight: font-weight('normal');\n  font-stretch: normal;\n  line-height: line-height('xs');\n  letter-spacing: normal;\n  color: get-text-color('black');\n}\n",
          "styleUrl": "./form-field-message.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "{{ text }}<ng-content></ng-content>\n"
    },
    {
      "name": "GridComponent",
      "id": "component-GridComponent-cbd7f0dd0574aa1591fbd91bb9ef0c85",
      "file": "libs/designsystem/src/lib/components/grid/grid.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-grid",
      "styleUrls": ["./grid.component.scss"],
      "styles": [],
      "templateUrl": ["./grid.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "cardConfigurations",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "[]"
        },
        {
          "name": "maxColumns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "breakpointSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [121]
        },
        {
          "name": "cardConfigs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GridCardConfiguration[]",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "cards",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GridCard[]",
          "optional": false,
          "description": "",
          "line": 31
        }
      ],
      "methodsClass": [
        {
          "name": "configureGrid",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ScssHelper } from '../../scss/scss-helper';\nimport { BreakpointHelperService } from './breakpoint-helper.service';\nimport { GridCardConfiguration } from './grid-card-configuration';\n\nclass GridCard {\n  configuration: GridCardConfiguration;\n  row: number;\n  col: number;\n  colSpan: number;\n\n  constructor(configuration: GridCardConfiguration, row: number, col: number, colSpan: number) {\n    this.configuration = configuration;\n    this.row = row;\n    this.col = col;\n    this.colSpan = colSpan;\n  }\n}\n\n@Component({\n  selector: 'kirby-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  // tslint:disable-next-line\n  host: { '[attr.max-columns]': 'maxColumns' },\n})\nexport class GridComponent implements OnInit, OnDestroy {\n  cardConfigs: GridCardConfiguration[];\n  cards: GridCard[] = [];\n  private breakpointSubscription: Subscription;\n\n  @Input() maxColumns: number;\n\n  @Input()\n  set cardConfigurations(cardConfigurations: GridCardConfiguration[]) {\n    this.cardConfigs = cardConfigurations;\n    // TODO TRM/JEO Remove this when breakpoint observe something something...\n    this.configureGrid();\n  }\n\n  constructor(private breakpointHelper: BreakpointHelperService) {}\n\n  configureGrid() {\n    let calculatedMaxColumns = 0;\n    if (this.maxColumns === undefined) {\n      calculatedMaxColumns =\n        this.breakpointHelper.currentScreenWidth >= ScssHelper.BREAKPOINT_SCREEN_L ? 2 : 1;\n    } else {\n      calculatedMaxColumns = this.maxColumns;\n    }\n    this.cards = [];\n    let columnCounter = 0;\n    let currentRow = 0;\n    let currentColumn = 0;\n\n    this.cardConfigs.forEach((card, index) => {\n      // Cards colspan is added to the column counter\n      columnCounter += card.preferredSize;\n      // If only maxColumns are set to 1, just add all cards with a colspan of 1\n      if (calculatedMaxColumns === 1) {\n        this.cards.push(new GridCard(card, currentRow, currentColumn, 1));\n        currentRow += 1;\n        return;\n      }\n      // If we are below maxColumns, then add the card to the array\n      if (columnCounter <= calculatedMaxColumns) {\n        this.cards.push(new GridCard(card, currentRow, currentColumn, card.preferredSize));\n        // Update currentColumn, so the next card will be placed correctly\n        currentColumn += card.preferredSize;\n      } else {\n        // The new card didn't fit - Calculate remaining columns for previous card\n        const restColumns = calculatedMaxColumns - (columnCounter - card.preferredSize);\n        const prevCard = this.cards[index - 1];\n        // Add the restColumns to the previous cards colspan, to make it span out\n        prevCard.colSpan = restColumns + prevCard.colSpan;\n        // We are now on a new row\n        currentRow += 1;\n        currentColumn = 0;\n        this.cards.push(new GridCard(card, currentRow, currentColumn, card.preferredSize));\n        // Update currentColumn to match the size of the new card and reset columnCounter\n        currentColumn = card.preferredSize;\n        columnCounter = card.preferredSize;\n      }\n      // If we on the last card, make sure it spans all the rest of the columns\n      if (this.cardConfigs.length - 1 === index) {\n        const restColumns = calculatedMaxColumns - columnCounter;\n        const currentCard = this.cards[index];\n        currentCard.colSpan += restColumns;\n      }\n    });\n  }\n\n  ngOnInit() {\n    // this.breakpointSubscription = this.breakpointHelper.observe().subscribe(() => {\n    //   this.configureGrid();\n    // });\n  }\n\n  ngOnDestroy() {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-auto-rows: minmax(var(--kirby-grid-item-min-height, auto), auto);\n  gap: size('m');\n  max-width: var(--kirby-page-max-width);\n  margin: 0 auto;\n\n  @include media('>=medium') {\n    @for $i from 1 through 10 {\n      &[max-columns='#{$i}'] {\n        grid-template-columns: repeat($i, 1fr);\n      }\n    }\n  }\n}\n\n@for $i from 1 through 10 {\n  ::ng-deep .grid-item--col-#{$i} {\n    @include media('>=medium') {\n      grid-column: span $i;\n    }\n  }\n}\n",
          "styleUrl": "./grid.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "breakpointHelper",
            "type": "BreakpointHelperService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 41,
        "jsdoctags": [
          {
            "name": "breakpointHelper",
            "type": "BreakpointHelperService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "cardConfigurations": {
          "name": "cardConfigurations",
          "setSignature": {
            "name": "cardConfigurations",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "cardConfigurations",
                "type": "GridCardConfiguration[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "cardConfigurations",
                "type": "GridCardConfiguration[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<ng-container *ngFor=\"let card of cards\">\n  <ng-template\n    [kirbyLoadComponent]=\"card.configuration\"\n    [cssClass]=\"'grid-item--col-' + card.colSpan\"\n  ></ng-template>\n</ng-container>\n"
    },
    {
      "name": "IconComponent",
      "id": "component-IconComponent-005529d40d38f0d33776db0c45f98939",
      "file": "libs/designsystem/src/lib/components/icon/icon.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-icon",
      "styleUrls": ["./icon.component.scss"],
      "styles": [],
      "templateUrl": ["./icon.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "customName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string"
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "IconSize"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_icon",
          "defaultValue": "(this.icon = this.defaultIcon)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [121]
        },
        {
          "name": "defaultIcon",
          "defaultValue": "this.findIcon(kirbyIconSettings.icons, 'cog')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Icon",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "methodsClass": [
        {
          "name": "findIcon",
          "args": [
            {
              "name": "icons",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Icon",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "icons",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "warnAboutMissingIcon",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { IconRegistryService } from './icon-registry.service';\nimport { Icon } from './icon-settings';\nimport { kirbyIconSettings } from './kirby-icon-settings';\n\nexport enum IconSize {\n  XS = 'xs',\n  SM = 'sm',\n  MD = 'md',\n  LG = 'lg',\n}\n\n@Component({\n  selector: 'kirby-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  // tslint:disable-next-line: no-host-metadata-property\n  host: { '[class.kirby-icon]': 'true' },\n})\nexport class IconComponent implements OnChanges {\n  defaultIcon: Icon = this.findIcon(kirbyIconSettings.icons, 'cog');\n  private _icon = (this.icon = this.defaultIcon);\n  @HostBinding('class')\n  @Input()\n  size: IconSize;\n\n  @Input() name: string;\n  @Input() customName: string;\n\n  get icon(): Icon {\n    return this._icon;\n  }\n\n  set icon(icon: Icon) {\n    // If icon are not found, set default icon\n    if (!icon && (this.name || this.customName)) {\n      this.warnAboutMissingIcon();\n\n      icon = this.defaultIcon;\n\n      // If default icon are not found\n      if (!icon) {\n        console.warn('Default icon was not found.');\n        return;\n      }\n    }\n\n    // Set icon if it's found\n    if (icon) {\n      this._icon = icon;\n    }\n  }\n\n  private warnAboutMissingIcon(): void {\n    if (this.customName) {\n      console.warn(`Custom icon with name \"${this.customName}\" was not found. \n        Do you have a typo in 'customName' or\n        forgot to configure the custom icon through the 'IconRegistryService'?`);\n    } else {\n      console.warn(`Built-in icon with name \"${this.name}\" was not found. \n        Do you have a typo in 'name' or\n        did you mean to use a custom icon? If so, please use: \n        <kirby-icon customName=\"${this.name}\"></kirby-icon>`);\n    }\n  }\n\n  constructor(private iconRegistryService: IconRegistryService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.name && changes.name.currentValue) {\n      this.icon = this.findIcon(kirbyIconSettings.icons, changes.name.currentValue);\n    } else if (changes.customName && changes.customName.currentValue) {\n      this.icon = this.iconRegistryService.getIcon(changes.customName.currentValue);\n    }\n  }\n\n  private findIcon(icons, name: string): Icon {\n    return icons.find((icon) => icon.name === name);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--kirby-icon-font-size, icon-font-size('sm'));\n  margin-left: var(--kirby-icon-margin-left, unset);\n  margin-right: var(--kirby-icon-margin-right, unset);\n\n  svg path {\n    fill: currentColor;\n    stroke: currentColor;\n  }\n}\n\n:host(.xs) {\n  --kirby-icon-font-size: #{icon-font-size('xs')};\n}\n\n:host(.sm) {\n  --kirby-icon-font-size: #{icon-font-size('sm')};\n}\n\n:host(.md) {\n  --kirby-icon-font-size: #{icon-font-size('md')};\n}\n\n:host(.lg) {\n  --kirby-icon-font-size: #{icon-font-size('lg')};\n}\n\n@each $color-name, $color-value in $main-colors {\n  :host(.#{$color-name}) {\n    color: get-color($color-name);\n  }\n}\n\n:host-context(kirby-item) {\n  &[slot='start'] {\n    margin-inline-end: size('xxs');\n  }\n  &[slot='end'] {\n    margin-inline-start: size('xxs');\n  }\n}\n",
          "styleUrl": "./icon.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "iconRegistryService",
            "type": "IconRegistryService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 66,
        "jsdoctags": [
          {
            "name": "iconRegistryService",
            "type": "IconRegistryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnChanges"],
      "accessors": {
        "icon": {
          "name": "icon",
          "setSignature": {
            "name": "icon",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "icon",
                "type": "Icon",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "icon",
                "type": "Icon",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "icon",
            "type": "",
            "returnType": "Icon",
            "line": 31
          }
        }
      },
      "templateData": "<ion-icon [src]=\"icon?.svg\"></ion-icon>\n"
    },
    {
      "name": "InputComponent",
      "id": "component-InputComponent-81c47661db2391df838c1c6e0e02641c",
      "file": "libs/designsystem/src/lib/components/form-field/input/input.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "input[kirby-input]",
      "styleUrls": ["./input.component.scss"],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "autocorrect",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Removes padding, width, rounded borders and drop-shadow when set to `true`.",
          "description": "<p>Removes padding, width, rounded borders and drop-shadow when set to <code>true</code>.</p>\n",
          "line": 48,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean"
        },
        {
          "name": "inputmode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "string"
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "number"
        },
        {
          "name": "size",
          "defaultValue": "InputSize.large",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "InputSize"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "kirbyChange",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "typeToInputmodeMap",
          "defaultValue": "{\n    number: 'decimal',\n    search: 'search',\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [121, 124]
        }
      ],
      "methodsClass": [
        {
          "name": "_onCutPaste",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'paste', ['$event.target']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'cut', ['$event.target']"
            }
          ],
          "jsdoctags": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onKeyUp",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keyup', ['$event.target.value']"
            }
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "cut",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81
        },
        {
          "name": "keyup",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target.value"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75
        },
        {
          "name": "paste",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\nexport enum InputSize {\n  medium = 'md',\n  large = 'lg',\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line:component-selector\n  selector: 'input[kirby-input]',\n  styleUrls: ['./input.component.scss'],\n  template: '',\n})\nexport class InputComponent implements OnChanges {\n  private static typeToInputmodeMap = {\n    number: 'decimal',\n    search: 'search',\n  };\n\n  kirbyChange = new EventEmitter<string>();\n\n  @Input() set type(value: string) {\n    const mappedValue = InputComponent.typeToInputmodeMap[value];\n    if (mappedValue && !this.inputmode) {\n      this.inputmode = mappedValue;\n    }\n  }\n\n  @HostBinding('class')\n  @Input()\n  size: InputSize = InputSize.large;\n\n  /**\n   * Removes padding, width, rounded borders and drop-shadow when set to `true`.\n   */\n  @HostBinding('class.borderless')\n  @Input()\n  borderless: boolean;\n\n  @HostBinding('class.error')\n  @Input()\n  hasError: boolean;\n\n  @HostBinding('attr.autocomplete')\n  @Input()\n  autocomplete: 'on' | 'off' = 'off';\n\n  @HostBinding('attr.autocorrect')\n  @Input()\n  autocorrect: 'on' | 'off' = 'off';\n\n  @HostBinding('attr.value')\n  @Input()\n  value: string;\n\n  @HostBinding('attr.maxlength')\n  @Input()\n  maxlength: number;\n\n  @HostBinding('attr.inputmode')\n  @Input()\n  inputmode: string;\n\n  @HostListener('keyup', ['$event.target.value'])\n  _onKeyUp(value: string) {\n    this.kirbyChange.emit(value);\n  }\n\n  @HostListener('paste', ['$event.target'])\n  @HostListener('cut', ['$event.target'])\n  _onCutPaste(target: HTMLInputElement) {\n    //Value of input element is updated after cut/paste:\n    setTimeout(() => this.kirbyChange.emit(target.value));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.value) {\n      this.kirbyChange.emit(changes.value.currentValue);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../form-field-inputs.shared';\n\n:host {\n  &[type='number'] {\n    //fallback\n    appearance: textfield;\n    //Firefox\n    -moz-appearance: textfield;\n  }\n\n  //Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  height: size('xxxl');\n}\n\n:host(.md) {\n  height: size('xl');\n  border-radius: size('m');\n}\n\n/* clean-css ignore:start */\n:host-context(kirby-item kirby-form-field[slot='end']) {\n  &[type='number'] {\n    font-weight: font-weight('bold');\n  }\n}\n/* clean-css ignore:end */\n\n/*\n * Date-mask\n */\n.date-mask-wrapper {\n  position: relative;\n}\n\n:host-context(.date-mask-wrapper) {\n  color: var(--kirby-text-color-semi-dark);\n}\n\n.date-mask {\n  font-family: $form-field-input-font-family;\n  font-size: $form-field-input-font-size;\n  line-height: $form-field-input-line-height;\n  color: var(--kirby-white-contrast);\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: $form-field-input-padding;\n}\n",
          "styleUrl": "./input.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnChanges"],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "InputCounterComponent",
      "id": "component-InputCounterComponent-ea86cd1f8ea49947744bc3dff0543aec",
      "file": "libs/designsystem/src/lib/components/form-field/input-counter/input-counter.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-input-counter",
      "styleUrls": ["./input-counter.component.scss"],
      "styles": [],
      "templateUrl": ["./input-counter.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "listenTo",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "InputComponent | TextareaComponent"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_inputChangeSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [121]
        },
        {
          "name": "length",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TextareaComponent } from './../textarea/textarea.component';\nimport { InputComponent } from '../input/input.component';\n\n@Component({\n  selector: 'kirby-input-counter',\n  templateUrl: './input-counter.component.html',\n  styleUrls: ['./input-counter.component.scss'],\n})\nexport class InputCounterComponent implements OnInit, OnDestroy {\n  @Input() listenTo: InputComponent | TextareaComponent;\n  length: number;\n  maxlength: number;\n  private _inputChangeSubscription: Subscription;\n\n  get text(): string {\n    if (this.length === undefined) {\n      return undefined;\n    }\n    const ofMaxlength = this.maxlength ? `/${this.maxlength}` : '';\n    return `${this.length}${ofMaxlength}`;\n  }\n\n  ngOnInit(): void {\n    if (this.listenTo) {\n      this.length = this.listenTo.value ? this.listenTo.value.length : 0;\n      this.maxlength = this.listenTo.maxlength;\n      this._inputChangeSubscription = this.listenTo.kirbyChange.subscribe((value) => {\n        this.length = value.length;\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._inputChangeSubscription) {\n      this._inputChangeSubscription.unsubscribe();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./input-counter.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "text": {
          "name": "text",
          "getSignature": {
            "name": "text",
            "type": "string",
            "returnType": "string",
            "line": 18
          }
        }
      },
      "templateData": "<kirby-form-field-message [text]=\"text\"></kirby-form-field-message>\n"
    },
    {
      "name": "InputEmbeddedComponent",
      "id": "component-InputEmbeddedComponent-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<h2>Embedded Input</h2>\n<input />\n<textarea></textarea>\n<button>Test Button</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ItemComponent",
      "id": "component-ItemComponent-269a97a48fdb1d2eb6bfaff35ac35c0f",
      "file": "libs/designsystem/src/lib/components/item/item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-item",
      "styleUrls": ["./item.component.scss"],
      "styles": [],
      "templateUrl": ["./item.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean"
        },
        {
          "name": "reorderable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "selectable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "size",
          "defaultValue": "ItemSize.MD",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "ItemSize"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onMouseDown",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\nexport enum ItemSize {\n  XS = 'xs',\n  SM = 'sm',\n  MD = 'md',\n}\n\n@Component({\n  selector: 'kirby-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss'],\n})\nexport class ItemComponent {\n  @Input() disabled: boolean;\n  @HostBinding('class.selected')\n  @Input()\n  selected: boolean;\n  @Input()\n  selectable: boolean;\n  @Input()\n  reorderable: boolean;\n  @HostBinding('class')\n  @Input()\n  size: ItemSize = ItemSize.MD;\n\n  // Prevent default when inside kirby-dropdown to avoid blurring dropdown:\n  onMouseDown(event: MouseEvent) {\n    if (\n      event.currentTarget instanceof HTMLElement &&\n      event.currentTarget.closest('kirby-dropdown')\n    ) {\n      event.preventDefault();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n@import 'item.utils';\n\n:host {\n  display: block;\n  position: relative;\n\n  ion-item {\n    font-size: font-size('s');\n    --min-height: #{map-get($item-heights, 'm')};\n    --padding-start: #{size('s')};\n    --inner-padding-top: #{size('xxs')};\n    --inner-padding-bottom: #{size('xxs')};\n    --inner-padding-end: #{size('s')};\n\n    --background: var(--kirby-item-background, #{get-color('white')});\n    --background-activated: var(--kirby-item-background-activated, #{get-color('white-shade')});\n    // WORKAROUND: Needed to fix ignored click on scrollend\n    // https://github.com/ionic-team/ionic-framework/issues/21871\n    --background-activated-opacity: 0.99;\n    --background-focused: var(--kirby-item-background-focused, #{get-color('background-color')});\n    --background-focused-opacity: 1;\n    --background-hover: var(--kirby-item-background-hover, #{get-color('background-color')});\n    --background-hover-opacity: 1;\n\n    // Prevent additional padding in iOS Safari on devices with \"screen notch\"\n    // by removing horizontal safe area when rotated to landscape orientation.\n    // See https://github.com/kirbydesign/designsystem/issues/1689\n    @media screen and (orientation: landscape) {\n      --ion-safe-area-left: 0px;\n      --ion-safe-area-right: 0px;\n    }\n\n    @include slotted('[slot=\"end\"]') {\n      margin-inline-start: 0;\n      margin-inline-end: 0;\n      text-align: right;\n    }\n\n    @include slotted('time[slot=\"end\"]') {\n      margin-inline-start: size('xs');\n    }\n\n    @include slotted('data[slot=\"end\"]', '[detail][slot=\"end\"], ion-reorder[slot=\"end\"]') {\n      margin-inline-start: size('s');\n    }\n\n    @include item-typography();\n\n    @include slotted(':not([slot])') {\n      width: 100%;\n    }\n\n    @include slotted('input[slot=\"end\"], kirby-form-field[slot=\"end\"] input') {\n      margin-inline-start: size('s');\n      width: auto;\n      text-align: right;\n    }\n  }\n\n  &.sm ion-item {\n    --min-height: #{map-get($item-heights, 's')};\n  }\n\n  &.xs ion-item {\n    --min-height: #{map-get($item-heights, 'xs')};\n    --inner-padding-top: #{size('xxxs')};\n    --inner-padding-bottom: #{size('xxxs')};\n  }\n\n  .outside {\n    left: size('xxxs');\n    margin: 0;\n    position: absolute;\n    width: size('s');\n    z-index: 1;\n  }\n}\n\n:host-context(kirby-dropdown) ion-item,\n:host-context(kirby-popover) ion-item {\n  --min-height: #{$dropdown-item-height};\n}\n\n/* clean-css ignore:start */\n// Fixes https://github.com/kirbydesign/designsystem/issues/1745\nion-item {\n  :host-context(kirby-list-item:first-of-type) & {\n    --padding-top: #{size('xxs')};\n  }\n\n  :host-context(kirby-list-item:first-of-type kirby-card) & {\n    --padding-top: 0;\n  }\n\n  :host-context(kirby-list-item:last-of-type) & {\n    --padding-bottom: #{size('xxs')};\n  }\n\n  :host-context(kirby-list-item:last-of-type kirby-card) & {\n    --padding-bottom: 0;\n  }\n}\n/* clean-css ignore:end */\n\n:host(.selected),\n:host-context(kirby-list .selected) {\n  ion-item {\n    @include slotted(h1, h2, h3, h4, h5, h6, p, data) {\n      font-weight: font-weight('bold');\n    }\n  }\n}\n\n// Fixes https://github.com/kirbydesign/designsystem/issues/1711\n:host-context(.shape-rounded .is-single) {\n  ion-item {\n    --border-radius: #{$border-radius};\n  }\n}\n\n// Fixes https://github.com/kirbydesign/designsystem/issues/1711\n:host-context(.has-header .is-single) {\n  ion-item::part(native) {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n}\n\n// Fixes https://github.com/kirbydesign/designsystem/issues/1711\n:host-context(.has-footer .is-single) {\n  ion-item::part(native) {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n}\n\n// Fixes https://github.com/kirbydesign/designsystem/issues/1711\n:host-context(.shape-rounded.has-sections .list-items kirby-list-item:first-of-type) {\n  ion-item::part(native) {\n    border-top-left-radius: $border-radius;\n    border-top-right-radius: $border-radius;\n  }\n}\n",
          "styleUrl": "./item.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ion-item\n  lines=\"none\"\n  [attr.disabled]=\"disabled\"\n  [attr.button]=\"selectable ? true : null\"\n  [attr.tabindex]=\"selectable ? null : 0\"\n  detail=\"false\"\n  (mousedown)=\"onMouseDown($event)\"\n>\n  <div class=\"outside\" slot=\"start\">\n    <ng-content select=\"[slot='outside']\"></ng-content>\n  </div>\n  <ng-content></ng-content>\n  <ion-reorder slot=\"end\" *ngIf=\"reorderable\">\n    <kirby-icon name=\"reorder\"></kirby-icon>\n  </ion-reorder>\n</ion-item>\n"
    },
    {
      "name": "KirbyBadge",
      "id": "component-KirbyBadge-223298ed369706b7999b8673ec28f8c5",
      "file": "libs/designsystem/src/lib/components/web-component-proxies.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": ["size", "text", "themeColor"],
      "outputs": [],
      "providers": [],
      "selector": "kirby-badge",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "propertiesClass": [
        {
          "name": "el",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [122]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport { Components } from '@kirbydesign/core';\n\n\nexport declare interface KirbyBadge extends Components.KirbyBadge {}\n@ProxyCmp({\n  inputs: ['size', 'text', 'themeColor']\n})\n@Component({\n  selector: 'kirby-badge',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['size', 'text', 'themeColor']\n})\nexport class KirbyBadge {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "c",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "r",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "z",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "c",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "r",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "z",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "LabelComponent",
      "id": "component-LabelComponent-9ab70c52cbcd12a158aae3e2753b0b54",
      "file": "libs/designsystem/src/lib/components/item/label/label.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-label",
      "styleUrls": ["./label.component.scss"],
      "styles": [],
      "templateUrl": ["./label.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "direction",
          "defaultValue": "'vertical'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "\"vertical\" | \"horizontal\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.horizontal",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'kirby-label',\n  templateUrl: './label.component.html',\n  styleUrls: ['./label.component.scss'],\n})\nexport class LabelComponent {\n  @Input()\n  direction: 'vertical' | 'horizontal' = 'vertical';\n\n  @HostBinding('class.horizontal')\n  get _direction() {\n    return this.direction === 'horizontal';\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n@import '../item.utils';\n\n:host {\n  &.horizontal ion-label {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n    @include slotted(':not(:first-child)') {\n      margin-left: size('xs');\n    }\n  }\n}\n\n:host-context(kirby-item) ion-label {\n  @include item-typography();\n}\n\n:host([slot='end']) ion-label {\n  @include slotted(data, '[detail]') {\n    margin-inline-start: size('s');\n  }\n}\n\n:host-context(kirby-item.selected) ion-label {\n  @include slotted(h1, h2, h3, h4, h5, h6, p, data) {\n    font-weight: font-weight('bold');\n  }\n}\n",
          "styleUrl": "./label.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_direction": {
          "name": "_direction",
          "getSignature": {
            "name": "_direction",
            "type": "",
            "returnType": "",
            "line": 13
          }
        }
      },
      "templateData": "<ion-label>\n  <ng-content></ng-content>\n</ion-label>\n"
    },
    {
      "name": "ListComponent",
      "id": "component-ListComponent-7cf93c04f654db062f96afec965e1910",
      "file": "libs/designsystem/src/lib/components/list/list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ListHelper"
        },
        {
          "name": "GroupByPipe",
          "type": "pipe"
        }
      ],
      "selector": "kirby-list",
      "styleUrls": ["./list.component.scss"],
      "styles": [],
      "templateUrl": ["./list.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "getItemColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "function"
        },
        {
          "name": "getSectionName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "function"
        },
        {
          "name": "hasItemSpacing",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "boolean"
        },
        {
          "name": "isLoadOnDemandEnabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Determines if the loadOnDemand event should be emitted.\nWill default to true if there is at least one subscriber to the loadOnDemand event",
          "description": "<p>Determines if the loadOnDemand event should be emitted.\nWill default to true if there is at least one subscriber to the loadOnDemand event</p>\n",
          "line": 148,
          "type": "boolean"
        },
        {
          "name": "items",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "any[]"
        },
        {
          "name": "markSelectedRow",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean"
        },
        {
          "name": "noMoreItemsText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string"
        },
        {
          "name": "shape",
          "defaultValue": "'rounded'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Determine outline shape of:\n- list, if  is `false`\n- section, if  is `true`\n\n`square` means **without** rounded corners, `rounded` means **with** rounded corners.,  `none` means **without** padding, border, box-shadow and background.",
          "description": "<p>Determine outline shape of:</p>\n<ul>\n<li>list, if  is <code>false</code></li>\n<li>section, if  is <code>true</code></li>\n</ul>\n<p><code>square</code> means <strong>without</strong> rounded corners, <code>rounded</code> means <strong>with</strong> rounded corners.,  <code>none</code> means <strong>without</strong> padding, border, box-shadow and background.</p>\n",
          "line": 71,
          "type": "ListShape"
        },
        {
          "name": "showDivider",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean"
        },
        {
          "name": "swipeActions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 152,
          "type": "ListSwipeAction[]"
        },
        {
          "name": "trackBy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "TrackByFunction<any>"
        },
        {
          "name": "useVirtualScroll",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "boolean"
        },
        {
          "name": "virtualScrollSettings",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "VirtualScrollerSettings"
        },
        {
          "name": "virtualScrollTimeout",
          "defaultValue": "5000",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "number"
        },
        {
          "name": "virtualScrollViewportHeight",
          "defaultValue": "500",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 154,
          "type": "EventEmitter"
        },
        {
          "name": "loadOnDemand",
          "defaultValue": "new EventEmitter<LoadOnDemandEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 150,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_groupedItems",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 175
        },
        {
          "name": "_isLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 174
        },
        {
          "name": "_isSectionsEnabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 171,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.has-sections'"
            }
          ]
        },
        {
          "name": "_isSelectable",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 173
        },
        {
          "name": "_selectedItem",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 177
        },
        {
          "name": "_virtualGroupedItems",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 176
        },
        {
          "name": "_virtualScrollData",
          "defaultValue": "{\n    get: (index, count) => this.getVirtualDataset(index, count),\n    settings: {\n      minIndex: this.virtualScrollSettings.minIndex || 0,\n      startIndex: this.virtualScrollSettings.startIndex || 0,\n      bufferSize: this.virtualScrollSettings.bufferSize || 10,\n      ...this.virtualScrollSettings,\n    },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDatasource",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "footerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 166,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListFooterDirective, {static: false, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "headerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 160,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListHeaderDirective, {static: false, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "itemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 169,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListItemTemplateDirective, {static: true, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "kirbyItems",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ItemComponent[]",
          "optional": false,
          "description": "",
          "line": 157,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ItemComponent"
            }
          ]
        },
        {
          "name": "list",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'list', {static: true}"
            }
          ]
        },
        {
          "name": "scrollDirective",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InfiniteScrollDirective",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "InfiniteScrollDirective"
            }
          ]
        },
        {
          "name": "sectionHeaderTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 163,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListSectionHeaderDirective, {static: false, read: TemplateRef}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "_getBoundaryClass",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "section",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "BoundaryClass",
          "typeParameters": [],
          "line": 237,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "section",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onLoadOnDemand",
          "args": [
            {
              "name": "event",
              "type": "LoadOnDemandEventData",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 214,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "LoadOnDemandEventData",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "defaultTrackBy",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 218,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getItemsSlice",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "count",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any[]",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "count",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getVirtualDataset",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "count",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 130],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "count",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 189,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 199,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 181,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onItemSelect",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 226,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSwipeActionSelect",
          "args": [
            {
              "name": "args",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 231,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "args",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sectionTrackBy",
          "args": [
            {
              "name": "_",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "section",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 222,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "_",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "section",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.has-sections",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 171,
          "type": "boolean"
        },
        {
          "name": "class.shape-none",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "boolean"
        },
        {
          "name": "class.shape-rounded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n} from '@angular/core';\nimport { IDatasource } from 'ngx-ui-scroll';\n\nimport { ThemeColor } from '@kirbydesign/core';\n\nimport { ItemComponent } from '../item/item.component';\n\nimport { InfiniteScrollDirective } from './directives/infinite-scroll.directive';\nimport { ListHelper } from './helpers/list-helper';\nimport { BoundaryClass } from './list-item/list-item.component';\nimport { ListSwipeAction } from './list-swipe-action.type';\nimport { VirtualScrollerSettings } from './list-virtual-scroll-settings.type';\nimport {\n  ListFooterDirective,\n  ListHeaderDirective,\n  ListItemTemplateDirective,\n  ListSectionHeaderDirective,\n} from './list.directive';\nimport { LoadOnDemandEvent, LoadOnDemandEventData } from './list.event';\nimport { GroupByPipe } from './pipes/group-by.pipe';\n\nexport type ListShape = 'square' | 'rounded' | 'none';\n\nconst INTERVAL = 400;\n@Component({\n  selector: 'kirby-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n  providers: [ListHelper, GroupByPipe],\n})\nexport class ListComponent implements OnInit, AfterViewInit, OnChanges {\n  @ViewChild('list', { static: true }) list: any;\n  @ViewChild(InfiniteScrollDirective) scrollDirective: InfiniteScrollDirective;\n\n  @Input()\n  items: any[] = [];\n\n  @Input() getItemColor: (item: any) => ThemeColor;\n\n  @Input() getSectionName: (item: any) => string;\n\n  @Input() trackBy: TrackByFunction<any>;\n\n  @Input() noMoreItemsText: string;\n\n  @Input() showDivider = false;\n\n  @Input() markSelectedRow = false;\n\n  /**\n   * Determine outline shape of:\n   * - list, if {@link #isSectionsEnabled} is `false`\n   * - section, if {@link #isSectionsEnabled} is `true`\n   *\n   * `square` means **without** rounded corners, `rounded` means **with** rounded corners.,  `none` means **without** padding, border, box-shadow and background.\n   */\n  @Input() shape: ListShape = 'rounded';\n\n  @HostBinding('class.shape-rounded')\n  public get isShapeRounded(): boolean {\n    return this.shape === 'rounded';\n  }\n\n  @HostBinding('class.shape-none')\n  public get isShapeNone(): boolean {\n    return this.shape === 'none';\n  }\n\n  @HostBinding('class.item-spacing')\n  @Input()\n  hasItemSpacing: boolean;\n\n  @Input() useVirtualScroll = false;\n\n  @Input() virtualScrollViewportHeight = 500;\n\n  @Input() virtualScrollSettings: VirtualScrollerSettings = {};\n\n  @Input() virtualScrollTimeout = 5000;\n\n  _virtualScrollData: IDatasource = {\n    get: (index, count) => this.getVirtualDataset(index, count),\n    settings: {\n      minIndex: this.virtualScrollSettings.minIndex || 0,\n      startIndex: this.virtualScrollSettings.startIndex || 0,\n      bufferSize: this.virtualScrollSettings.bufferSize || 10,\n      ...this.virtualScrollSettings,\n    },\n  };\n\n  private async getVirtualDataset(index: number, count: number): Promise<any> {\n    return await new Promise((resolve) => {\n      setTimeout(() => {\n        const itemSlice = this.getItemsSlice(index, count);\n\n        // If we return less items than count, virtual scroll will interprete it as EOF and stop asking for more\n        if (itemSlice.length < count && this.isLoadOnDemandEnabled) {\n          let elapsedTime = 0;\n\n          /* As virtual scroll fixes the viewport causing ScrollEnd to not be emitted; do it manually to trigger load on demand */\n          this.scrollDirective.scrollEnd.emit();\n\n          const poller = setInterval(() => {\n            elapsedTime += INTERVAL;\n\n            if (this._isLoading) {\n              // Just a failsafe in case this.isLoading for some reason is not reset\n              if (elapsedTime > this.virtualScrollTimeout) {\n                clearInterval(poller);\n                resolve([]);\n              }\n              return;\n            }\n\n            clearInterval(poller);\n            resolve(this.getItemsSlice(index, count));\n          }, INTERVAL);\n        } else {\n          resolve(itemSlice);\n        }\n      }, INTERVAL);\n    });\n  }\n\n  private getItemsSlice(index: number, count: number): any[] {\n    const _items = this._isSectionsEnabled ? this._virtualGroupedItems : this.items;\n    return _items.slice(index, index + count);\n  }\n\n  /**\n   * Determines if the loadOnDemand event should be emitted.\n   * Will default to true if there is at least one subscriber to the loadOnDemand event\n   */\n  @Input() isLoadOnDemandEnabled: boolean;\n\n  @Output() loadOnDemand = new EventEmitter<LoadOnDemandEvent>();\n\n  @Input() swipeActions: ListSwipeAction[] = [];\n\n  @Output() itemSelect = new EventEmitter<any>();\n\n  @ContentChildren(ItemComponent)\n  kirbyItems: ItemComponent[];\n\n  @ContentChild(ListHeaderDirective, { static: false, read: TemplateRef })\n  headerTemplate: TemplateRef<any>;\n\n  @ContentChild(ListSectionHeaderDirective, { static: false, read: TemplateRef })\n  sectionHeaderTemplate: TemplateRef<any>;\n\n  @ContentChild(ListFooterDirective, { static: false, read: TemplateRef })\n  footerTemplate: TemplateRef<any>;\n\n  @ContentChild(ListItemTemplateDirective, { static: true, read: TemplateRef })\n  itemTemplate: TemplateRef<any>;\n\n  @HostBinding('class.has-sections') _isSectionsEnabled: boolean;\n\n  _isSelectable: boolean;\n  _isLoading: boolean;\n  _groupedItems: any[];\n  _virtualGroupedItems: any[];\n  _selectedItem: any;\n\n  constructor(private listHelper: ListHelper, private groupBy: GroupByPipe) {}\n\n  ngOnInit() {\n    this._isSelectable = this.itemSelect.observers.length > 0;\n\n    if (this.isLoadOnDemandEnabled === undefined) {\n      this.isLoadOnDemandEnabled = this.loadOnDemand.observers.length > 0;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this._isSelectable) {\n      setTimeout(() => {\n        this.kirbyItems.forEach((item) => {\n          item.selectable = true;\n        });\n      });\n    }\n  }\n\n  ngOnChanges(): void {\n    this._isSectionsEnabled = !!this.getSectionName;\n    this._groupedItems = this._isSectionsEnabled\n      ? this.groupBy.transform(this.items, this.getSectionName)\n      : null;\n\n    this._virtualGroupedItems =\n      this.useVirtualScroll && this._groupedItems\n        ? this._groupedItems.reduce((accumulator, group) => {\n            accumulator.push({ headingName: group.name });\n            return accumulator.concat(...group.items);\n          }, [])\n        : null;\n  }\n\n  _onLoadOnDemand(event?: LoadOnDemandEventData) {\n    this.listHelper.onLoadOnDemand(this, event);\n  }\n\n  defaultTrackBy(index: number): any {\n    return index;\n  }\n\n  sectionTrackBy(_: number, section: { name: string }): string {\n    return section.name;\n  }\n\n  onItemSelect(item: any) {\n    this._selectedItem = item;\n    this.itemSelect.emit(this._selectedItem);\n  }\n\n  onSwipeActionSelect(args: any): void {\n    args.swipeAction.onSelected(args.item);\n    this.list.closeSlidingItems();\n    args.event.stopPropagation();\n  }\n\n  _getBoundaryClass(index: number, section?: any[]): BoundaryClass {\n    let _items = section || this.items;\n\n    if (this._isSectionsEnabled && this.useVirtualScroll) {\n      _items = this._virtualGroupedItems;\n    }\n\n    if (index === 0 || _items[index - 1]?.headingName) return this.headerTemplate ? null : 'first';\n\n    if (index === _items.length - 1 || _items[index + 1]?.headingName)\n      return this.footerTemplate ? null : 'last';\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$divider-color: get-color('background-color');\n$shadow: get-elevation(2);\n$item-height: size('xxxl');\n\n:host {\n  display: block;\n}\n\n.list {\n  box-shadow: $shadow;\n  background: transparent;\n  contain: inherit;\n  padding: 0;\n}\n\n.viewport {\n  overflow-y: auto;\n}\n\n.item-wrapper {\n  min-height: #{map-get($item-heights, 'm')};\n}\n\nion-list-header {\n  background-color: get-color('white');\n  border-bottom: 1px solid $divider-color;\n  padding: 0;\n  text-transform: inherit;\n  letter-spacing: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n  min-height: 0;\n  overflow: inherit;\n}\n\nion-item {\n  --background: #{get-color('white')};\n  --background-activated: #{get-color('white-shade')};\n  --background-hover: #{get-color('background-color')};\n  --background-focused: #{get-color('background-color')};\n  --inner-border-width: 0;\n  --ion-safe-area-right: 0;\n  --min-height: #{$item-height};\n  --padding-bottom: #{size('xxs')};\n  --padding-end: #{size('s')};\n  --padding-start: #{size('s')};\n  --padding-top: #{size('xxs')};\n  display: flex;\n  font-size: font-size('s');\n  min-height: $item-height;\n  overflow: visible;\n  width: 100%;\n}\n\nion-item-divider {\n  font-weight: inherit;\n}\n\nion-item-sliding {\n  &.item-sliding-active-slide {\n    // backface-visibility and transform, to fix clipping issue on iOS see https://stackoverflow.com/a/16681137 and https://github.com/kirbydesign/designsystem/issues/863\n    backface-visibility: hidden;\n    transform: translate3d(0, 0, 0);\n  }\n\n  $list-colors: ('light'); // add supported list item theme colors here\n  @each $color-name, $color-value in $list-colors {\n    &.#{$color-name} {\n      --kirby-item-background: #{get-color($color-name)};\n      --kirby-item-background-activated: #{get-color($color-name + '-shade')};\n      --kirby-item-background-focused: #{get-color($color-name + '-shade')};\n      --kirby-item-background-hover: #{get-color($color-name + '-tint')};\n      ion-item {\n        --background: #{get-color($color-name)};\n        --color: #{get-color($color-name + '-contrast')};\n        --background-activated: #{get-color($color-name + '-shade')};\n        --background-focused: #{get-color($color-name + '-shade')};\n        --background-hover: #{get-color($color-name + '-tint')};\n      }\n    }\n  }\n}\n\nion-item-group {\n  margin-bottom: size('m');\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n}\n\nion-item-divider {\n  --inner-padding-end: 0;\n  --color: unset;\n  background-color: transparent;\n  border-color: transparent;\n  min-height: 0;\n  padding: 0 size('s') size('xxs') size('s');\n}\n\n.footer {\n  background-color: get-color('white');\n  border-top: 1px solid $divider-color;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.no-more-items,\n.loading {\n  width: 100%;\n  padding: size('m') 0;\n  text-align: center;\n}\n\n.swipe-action {\n  display: flex;\n  color: #{get-color('black')};\n  background-color: transparent;\n\n  @each $color-name, $color-value in $main-colors {\n    .#{$color-name} {\n      background-color: #{get-color($color-name)};\n      color: #{get-color($color-name + '-contrast')};\n    }\n  }\n\n  ion-item-option {\n    height: 100%;\n    display: inline-block;\n    text-align: center;\n  }\n\n  .item-content {\n    display: inline-grid;\n    min-width: 70px;\n    flex-direction: column;\n\n    ion-label {\n      --background: unset;\n      --color: unset;\n    }\n  }\n}\n\nion-item-options[side='end'] {\n  border-bottom-width: 0;\n}\n\n:host-context(.has-sections) {\n  .list {\n    box-shadow: none;\n  }\n\n  .list-items {\n    box-shadow: $shadow;\n    border-radius: $border-radius;\n  }\n\n  .virtual-group {\n    margin-top: size('m');\n  }\n\n  .section-header {\n    overflow: hidden;\n  }\n\n  .footer {\n    background-color: transparent;\n    border-top: none;\n  }\n\n  ion-list-header {\n    background-color: transparent;\n    border-bottom: none;\n  }\n}\n\n:host-context(.shape-rounded) {\n  .list,\n  .list-items {\n    border-radius: $border-radius;\n  }\n\n  ion-item.first,\n  ion-item-sliding.first,\n  ion-list-header {\n    border-top-left-radius: $border-radius;\n    border-top-right-radius: $border-radius;\n    -webkit-mask-image: -webkit-radial-gradient(\n      white,\n      black\n    ); // Solves issues with round borders at iOS in certain scenarios\n  }\n\n  ion-item-sliding > ion-item,\n  &:not(.has-sections) .has-header ion-item,\n  &:not(.has-sections) .has-header ion-item-sliding {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n\n  ion-item.last,\n  ion-item-sliding.last,\n  .footer {\n    border-bottom-left-radius: $border-radius;\n    border-bottom-right-radius: $border-radius;\n    -webkit-mask-image: -webkit-radial-gradient(\n      white,\n      black\n    ); // Solves issues with round borders at iOS in certain scenarios\n  }\n\n  ion-item-sliding > ion-item,\n  &:not(.has-sections) .has-footer ion-item,\n  &:not(.has-sections) .has-footer ion-item-sliding {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n}\n\n:host-context(.shape-none) {\n  .list,\n  .list-items {\n    box-shadow: none;\n    border-radius: unset;\n  }\n\n  .list {\n    ion-item,\n    ion-item-sliding {\n      --padding-start: 0;\n      --padding-end: 0;\n      --padding-top: 0;\n      --padding-bottom: 0;\n      --inner-padding-start: 0;\n      --inner-padding-end: 0;\n      --inner-padding-top: 0;\n      --inner-padding-bottom: 0;\n      --background: none;\n      --background-activated: none;\n      --background-hover: none;\n      --background-focused: none;\n      overflow: visible;\n    }\n  }\n}\n\n:host-context(.item-spacing) {\n  .list {\n    kirby-list-item {\n      margin-bottom: size('s');\n\n      & > ion-item,\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n  }\n}\n",
          "styleUrl": "./list.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "listHelper",
            "type": "ListHelper",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "groupBy",
            "type": "GroupByPipe",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 177,
        "jsdoctags": [
          {
            "name": "listHelper",
            "type": "ListHelper",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "groupBy",
            "type": "GroupByPipe",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "AfterViewInit", "OnChanges"],
      "accessors": {
        "isShapeRounded": {
          "name": "isShapeRounded",
          "getSignature": {
            "name": "isShapeRounded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 74
          }
        },
        "isShapeNone": {
          "name": "isShapeNone",
          "getSignature": {
            "name": "isShapeNone",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        }
      },
      "templateData": "<ion-list\n  #list\n  kirbyInfiniteScroll\n  (scrollEnd)=\"_onLoadOnDemand()\"\n  [disabled]=\"!isLoadOnDemandEnabled\"\n  class=\"list\"\n  [class.has-header]=\"headerTemplate\"\n  [class.has-footer]=\"footerTemplate\"\n  [class.has-divider]=\"showDivider\"\n>\n  <ion-list-header *ngIf=\"headerTemplate\">\n    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n  </ion-list-header>\n\n  <div\n    *ngIf=\"useVirtualScroll\"\n    #viewport\n    [style.height]=\"virtualScrollViewportHeight + 'px'\"\n    class=\"viewport\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"virtualItemsTemplate; context: { $implicit: _virtualScrollData }\"\n    ></ng-container>\n  </div>\n\n  <ng-container *ngIf=\"!useVirtualScroll\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        _isSectionsEnabled ? groupedListTemplate : itemsTemplate;\n        context: { $implicit: items }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <div *ngIf=\"footerTemplate\" class=\"footer\">\n    <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n  </div>\n</ion-list>\n\n<p *ngIf=\"!isLoadOnDemandEnabled && noMoreItemsText\" class=\"no-more-items\">\n  {{ noMoreItemsText }}\n</p>\n<div *ngIf=\"_isLoading\" class=\"loading\">\n  <kirby-spinner></kirby-spinner>\n</div>\n\n<ng-template #groupedListTemplate>\n  <ion-item-group *ngFor=\"let section of _groupedItems; trackBy: sectionTrackBy\">\n    <ion-item-divider>\n      <ng-container\n        *ngTemplateOutlet=\"sectionHeaderTemplate; context: { $implicit: section.name }\"\n      ></ng-container>\n    </ion-item-divider>\n\n    <div class=\"list-items\">\n      <ng-container\n        *ngTemplateOutlet=\"itemsTemplate; context: { $implicit: section.items }\"\n      ></ng-container>\n    </div>\n  </ion-item-group>\n</ng-template>\n\n<ng-template #itemsTemplate let-items>\n  <kirby-list-item\n    *ngFor=\"let item of items; let i = index; trackBy: trackBy || defaultTrackBy\"\n    [item]=\"item\"\n    [itemTemplate]=\"itemTemplate\"\n    [swipeActions]=\"swipeActions\"\n    [boundaryClass]=\"_getBoundaryClass(i, items)\"\n    [isSelectable]=\"_isSelectable\"\n    [getItemColor]=\"getItemColor\"\n    [isSelected]=\"_isSelectable && item === _selectedItem\"\n    (itemSelect)=\"onItemSelect($event)\"\n    (swipeActionSelect)=\"onSwipeActionSelect($event)\"\n    [class.is-single]=\"items.length === 1\"\n  >\n  </kirby-list-item>\n</ng-template>\n\n<ng-template #virtualItemsTemplate let-virtualScrollData>\n  <div *uiScroll=\"let item of virtualScrollData; let i = index\">\n    <div [class.item-wrapper]=\"!item.headingName\" [class.section-header]=\"item.headingName\">\n      <ion-item-divider *ngIf=\"item.headingName\" class=\"virtual-group\">\n        <ng-container\n          *ngTemplateOutlet=\"sectionHeaderTemplate; context: { $implicit: item.headingName }\"\n        ></ng-container>\n      </ion-item-divider>\n      <kirby-list-item\n        *ngIf=\"!item.headingName\"\n        [item]=\"item\"\n        [itemTemplate]=\"itemTemplate\"\n        [swipeActions]=\"swipeActions\"\n        [boundaryClass]=\"_getBoundaryClass(i)\"\n        [isSelectable]=\"_isSelectable\"\n        [getItemColor]=\"getItemColor\"\n        [isSelected]=\"_isSelectable && item === _selectedItem\"\n        (itemSelect)=\"onItemSelect($event)\"\n        (swipeActionSelect)=\"onSwipeActionSelect($event)\"\n      >\n      </kirby-list-item>\n    </div>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ListHeaderComponent",
      "id": "component-ListHeaderComponent-1d6aafc4398ea22983abcd12f405c6c4",
      "file": "libs/designsystem/src/lib/components/list/list-header/list-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-list-header",
      "styleUrls": ["./list-header.component.scss"],
      "styles": [],
      "templateUrl": ["./list-header.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'kirby-list-header',\n  templateUrl: './list-header.component.html',\n  styleUrls: ['./list-header.component.scss'],\n})\nexport class ListHeaderComponent {\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n:host {\n  background-color: transparent;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  padding: size('m');\n}\n",
          "styleUrl": "./list-header.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "templateData": "<ng-content></ng-content>\n"
    },
    {
      "name": "ListItemComponent",
      "id": "component-ListItemComponent-9029d043a9b82e9bacb46e6ae6d120ac",
      "file": "libs/designsystem/src/lib/components/list/list-item/list-item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-list-item",
      "styleUrls": ["../list.component.scss", "./list-item.component.scss"],
      "styles": [],
      "templateUrl": ["./list-item.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "boundaryClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "BoundaryClass"
        },
        {
          "name": "getItemColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "function"
        },
        {
          "name": "isSelectable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean"
        },
        {
          "name": "item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "any"
        },
        {
          "name": "itemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "TemplateRef<any>"
        },
        {
          "name": "swipeActions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "ListSwipeAction[]"
        }
      ],
      "outputsClass": [
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "EventEmitter"
        },
        {
          "name": "swipeActionSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_isSwipingEnabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "ionItemSliding",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IonItemSliding",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonItemSliding"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "_getSwipeActionEnd",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ListSwipeEnd",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_getSwipeActionIcon",
          "args": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_getSwipeActions",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "direction",
              "type": "ListSwipeDirection",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "ListSwipeAction[]",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "direction",
              "type": "ListSwipeDirection",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_getSwipeActionTitle",
          "args": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 125,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_getSwipeActionType",
          "args": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ThemeColor",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_hasSwipeActions",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onItemSelect",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onSwipeActionSelect",
          "args": [
            {
              "name": "swipeAction",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "swipeAction",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeSwipeActions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "isSwipeActionDisabled",
          "args": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "swipeAction",
              "type": "ListSwipeAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { IonItemSliding } from '@ionic/angular';\n\nimport { ThemeColor } from '@kirbydesign/core';\n\nimport { PlatformService } from '../../../helpers/platform.service';\nimport { ListSwipeAction, ListSwipeDirection, ListSwipeEnd } from '../list-swipe-action.type';\n\nexport type BoundaryClass = 'first' | 'last';\n\n@Component({\n  selector: 'kirby-list-item',\n  templateUrl: './list-item.component.html',\n  styleUrls: ['../list.component.scss', './list-item.component.scss'],\n})\nexport class ListItemComponent implements OnInit, AfterViewInit {\n  _isSwipingEnabled = false;\n\n  constructor(private platform: PlatformService) {\n    this.initializeSwipeActions();\n  }\n\n  @ViewChild(IonItemSliding) ionItemSliding: IonItemSliding;\n\n  @Input() item: any;\n\n  @Input() boundaryClass: BoundaryClass;\n\n  @Input() swipeActions: ListSwipeAction[] = [];\n\n  @Input() itemTemplate: TemplateRef<any>;\n\n  @Input() isSelected: boolean;\n\n  @Input() isSelectable: boolean;\n\n  @Input() getItemColor: (item: any) => ThemeColor;\n\n  @Output() itemSelect = new EventEmitter<any>();\n\n  _onItemSelect(item: any) {\n    if (!this.isSelectable) return;\n    this.itemSelect.emit(item);\n  }\n\n  @Output() swipeActionSelect = new EventEmitter<any>();\n\n  _onSwipeActionSelect(swipeAction, item, event) {\n    this.swipeActionSelect.emit({\n      swipeAction,\n      item,\n      event,\n    });\n  }\n\n  ngOnInit() {\n    this.initializeSwipeActions();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.itemTemplate) {\n      console.warn('No item template was provided.');\n    }\n  }\n\n  _hasSwipeActions(item: any): boolean {\n    if (!Array.isArray(this.swipeActions)) {\n      return false;\n    }\n    return this.swipeActions.some((swipeAction) => {\n      if (swipeAction.isDisabled instanceof Function && swipeAction.isDisabled(item)) {\n        return false;\n      }\n      if (swipeAction.isDisabled === true) {\n        return false;\n      }\n      return swipeAction.position === 'left' || swipeAction.position === 'right';\n    });\n  }\n\n  _getSwipeActions(item: any, direction?: ListSwipeDirection): ListSwipeAction[] {\n    if (!Array.isArray(this.swipeActions)) {\n      return [];\n    }\n    return this.swipeActions.filter((swipeAction) => {\n      if (this.isSwipeActionDisabled(swipeAction, item)) {\n        return false;\n      }\n      return direction ? swipeAction.position === direction : true;\n    });\n  }\n\n  private isSwipeActionDisabled(swipeAction: ListSwipeAction, item: any): boolean {\n    if (swipeAction.isDisabled instanceof Function && swipeAction.isDisabled(item)) {\n      return true;\n    }\n    return swipeAction.isDisabled === true;\n  }\n\n  _getSwipeActionEnd(item: any): ListSwipeEnd {\n    if (this._getSwipeActions(item, 'left').length) {\n      return 'start';\n    }\n    return 'end';\n  }\n\n  _getSwipeActionIcon(swipeAction: ListSwipeAction, item: any): string {\n    if (!swipeAction.icon) return;\n\n    if (swipeAction.icon instanceof Function) {\n      return swipeAction.icon(item);\n    }\n    return swipeAction.icon;\n  }\n\n  _getSwipeActionTitle(swipeAction: ListSwipeAction, item: any): string {\n    if (swipeAction.title instanceof Function) {\n      return swipeAction.title(item);\n    }\n    return swipeAction.title;\n  }\n\n  _getSwipeActionType(swipeAction: ListSwipeAction, item: any): ThemeColor {\n    if (swipeAction.type instanceof Function) {\n      return swipeAction.type(item);\n    }\n    return swipeAction.type;\n  }\n\n  private initializeSwipeActions(): void {\n    if (this.swipeActions && this.swipeActions.length) {\n      this._isSwipingEnabled = this.platform.isTouch();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$divider-color: get-color('background-color');\n$shadow: get-elevation(2);\n$item-height: size('xxxl');\n\n:host {\n  display: block;\n}\n\n.list {\n  box-shadow: $shadow;\n  background: transparent;\n  contain: inherit;\n  padding: 0;\n}\n\n.viewport {\n  overflow-y: auto;\n}\n\n.item-wrapper {\n  min-height: #{map-get($item-heights, 'm')};\n}\n\nion-list-header {\n  background-color: get-color('white');\n  border-bottom: 1px solid $divider-color;\n  padding: 0;\n  text-transform: inherit;\n  letter-spacing: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n  min-height: 0;\n  overflow: inherit;\n}\n\nion-item {\n  --background: #{get-color('white')};\n  --background-activated: #{get-color('white-shade')};\n  --background-hover: #{get-color('background-color')};\n  --background-focused: #{get-color('background-color')};\n  --inner-border-width: 0;\n  --ion-safe-area-right: 0;\n  --min-height: #{$item-height};\n  --padding-bottom: #{size('xxs')};\n  --padding-end: #{size('s')};\n  --padding-start: #{size('s')};\n  --padding-top: #{size('xxs')};\n  display: flex;\n  font-size: font-size('s');\n  min-height: $item-height;\n  overflow: visible;\n  width: 100%;\n}\n\nion-item-divider {\n  font-weight: inherit;\n}\n\nion-item-sliding {\n  &.item-sliding-active-slide {\n    // backface-visibility and transform, to fix clipping issue on iOS see https://stackoverflow.com/a/16681137 and https://github.com/kirbydesign/designsystem/issues/863\n    backface-visibility: hidden;\n    transform: translate3d(0, 0, 0);\n  }\n\n  $list-colors: ('light'); // add supported list item theme colors here\n  @each $color-name, $color-value in $list-colors {\n    &.#{$color-name} {\n      --kirby-item-background: #{get-color($color-name)};\n      --kirby-item-background-activated: #{get-color($color-name + '-shade')};\n      --kirby-item-background-focused: #{get-color($color-name + '-shade')};\n      --kirby-item-background-hover: #{get-color($color-name + '-tint')};\n      ion-item {\n        --background: #{get-color($color-name)};\n        --color: #{get-color($color-name + '-contrast')};\n        --background-activated: #{get-color($color-name + '-shade')};\n        --background-focused: #{get-color($color-name + '-shade')};\n        --background-hover: #{get-color($color-name + '-tint')};\n      }\n    }\n  }\n}\n\nion-item-group {\n  margin-bottom: size('m');\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n}\n\nion-item-divider {\n  --inner-padding-end: 0;\n  --color: unset;\n  background-color: transparent;\n  border-color: transparent;\n  min-height: 0;\n  padding: 0 size('s') size('xxs') size('s');\n}\n\n.footer {\n  background-color: get-color('white');\n  border-top: 1px solid $divider-color;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.no-more-items,\n.loading {\n  width: 100%;\n  padding: size('m') 0;\n  text-align: center;\n}\n\n.swipe-action {\n  display: flex;\n  color: #{get-color('black')};\n  background-color: transparent;\n\n  @each $color-name, $color-value in $main-colors {\n    .#{$color-name} {\n      background-color: #{get-color($color-name)};\n      color: #{get-color($color-name + '-contrast')};\n    }\n  }\n\n  ion-item-option {\n    height: 100%;\n    display: inline-block;\n    text-align: center;\n  }\n\n  .item-content {\n    display: inline-grid;\n    min-width: 70px;\n    flex-direction: column;\n\n    ion-label {\n      --background: unset;\n      --color: unset;\n    }\n  }\n}\n\nion-item-options[side='end'] {\n  border-bottom-width: 0;\n}\n\n:host-context(.has-sections) {\n  .list {\n    box-shadow: none;\n  }\n\n  .list-items {\n    box-shadow: $shadow;\n    border-radius: $border-radius;\n  }\n\n  .virtual-group {\n    margin-top: size('m');\n  }\n\n  .section-header {\n    overflow: hidden;\n  }\n\n  .footer {\n    background-color: transparent;\n    border-top: none;\n  }\n\n  ion-list-header {\n    background-color: transparent;\n    border-bottom: none;\n  }\n}\n\n:host-context(.shape-rounded) {\n  .list,\n  .list-items {\n    border-radius: $border-radius;\n  }\n\n  ion-item.first,\n  ion-item-sliding.first,\n  ion-list-header {\n    border-top-left-radius: $border-radius;\n    border-top-right-radius: $border-radius;\n    -webkit-mask-image: -webkit-radial-gradient(\n      white,\n      black\n    ); // Solves issues with round borders at iOS in certain scenarios\n  }\n\n  ion-item-sliding > ion-item,\n  &:not(.has-sections) .has-header ion-item,\n  &:not(.has-sections) .has-header ion-item-sliding {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n\n  ion-item.last,\n  ion-item-sliding.last,\n  .footer {\n    border-bottom-left-radius: $border-radius;\n    border-bottom-right-radius: $border-radius;\n    -webkit-mask-image: -webkit-radial-gradient(\n      white,\n      black\n    ); // Solves issues with round borders at iOS in certain scenarios\n  }\n\n  ion-item-sliding > ion-item,\n  &:not(.has-sections) .has-footer ion-item,\n  &:not(.has-sections) .has-footer ion-item-sliding {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n}\n\n:host-context(.shape-none) {\n  .list,\n  .list-items {\n    box-shadow: none;\n    border-radius: unset;\n  }\n\n  .list {\n    ion-item,\n    ion-item-sliding {\n      --padding-start: 0;\n      --padding-end: 0;\n      --padding-top: 0;\n      --padding-bottom: 0;\n      --inner-padding-start: 0;\n      --inner-padding-end: 0;\n      --inner-padding-top: 0;\n      --inner-padding-bottom: 0;\n      --background: none;\n      --background-activated: none;\n      --background-hover: none;\n      --background-focused: none;\n      overflow: visible;\n    }\n  }\n}\n\n:host-context(.item-spacing) {\n  .list {\n    kirby-list-item {\n      margin-bottom: size('s');\n\n      & > ion-item,\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n  }\n}\n",
          "styleUrl": "../list.component.scss"
        },
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$divider-color: get-color('background-color');\n\n:host {\n  overflow: hidden;\n}\n\n:host-context(.has-divider) {\n  ion-item-sliding:not(.last) {\n    border-bottom: 1px solid $divider-color;\n  }\n}\n",
          "styleUrl": "./list-item.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "AfterViewInit"],
      "templateData": "<ion-item-sliding\n  [class.selected]=\"isSelected\"\n  [kirbyListItemColor]=\"getItemColor\"\n  [item]=\"item\"\n  [disabled]=\"_isSwipingEnabled ? null : true\"\n  keyHandler\n  [ngClass]=\"boundaryClass\"\n  (click)=\"_onItemSelect(item)\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"swipeActionsTemplate; context: { $implicit: item }\"\n  ></ng-container>\n  <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-container>\n</ion-item-sliding>\n\n<ng-template #swipeActionsTemplate let-item>\n  <ion-item-options *ngIf=\"_hasSwipeActions(item)\" [side]=\"_getSwipeActionEnd(item)\">\n    <div class=\"swipe-action\">\n      <ng-container *ngFor=\"let swipeAction of _getSwipeActions(item)\">\n        <ion-item-option\n          [ngClass]=\"_getSwipeActionType(swipeAction, item)\"\n          (click)=\"_onSwipeActionSelect(swipeAction, item, $event)\"\n        >\n          <div class=\"item-content\">\n            <kirby-icon\n              *ngIf=\"_getSwipeActionIcon(swipeAction, item)\"\n              size=\"sm\"\n              [name]=\"_getSwipeActionIcon(swipeAction, item)\"\n            >\n            </kirby-icon>\n            <ion-label>\n              {{ _getSwipeActionTitle(swipeAction, item) }}\n            </ion-label>\n          </div>\n        </ion-item-option>\n      </ng-container>\n    </div>\n  </ion-item-options>\n</ng-template>\n"
    },
    {
      "name": "ListSectionHeaderComponent",
      "id": "component-ListSectionHeaderComponent-8a1a5458a909d0b81b356daa757df74f",
      "file": "libs/designsystem/src/lib/components/list/list-section-header/list-section-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-list-section-header",
      "styleUrls": ["./list-section-header.component.scss"],
      "styles": [],
      "templateUrl": ["./list-section-header.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kirby-list-section-header',\n  templateUrl: './list-section-header.component.html',\n  styleUrls: ['./list-section-header.component.scss'],\n})\nexport class ListSectionHeaderComponent implements OnInit {\n  @Input() title: string;\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./list-section-header.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 9
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"header\">\n  <span class=\"kirby-text-small\">{{ title }}</span>\n</div>\n"
    },
    {
      "name": "LoadingOverlayComponent",
      "id": "component-LoadingOverlayComponent-4244bcef89486aa2ac77ef51647ff907",
      "file": "libs/designsystem/src/lib/components/loading-overlay/loading-overlay.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-loading-overlay",
      "styleUrls": ["./loading-overlay.component.scss"],
      "styles": [],
      "templateUrl": ["./loading-overlay.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isLoading",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "boolean"
        },
        {
          "name": "showBackdrop",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'kirby-loading-overlay',\n  templateUrl: './loading-overlay.component.html',\n  styleUrls: ['./loading-overlay.component.scss'],\n})\nexport class LoadingOverlayComponent {\n  @Input() public isLoading = true;\n  @Input() public showBackdrop = true;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: block;\n  min-height: size('l');\n}\n\n.overlay-wrapper {\n  min-height: inherit;\n  height: 100%;\n  width: 100%;\n  position: relative;\n\n  .spinner-wrapper {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: z('loading-overlay');\n    display: flex;\n    background: transparent;\n    justify-content: center;\n    align-items: center;\n    justify-items: center;\n\n    &.backdrop {\n      background-color: rgba(\n        get-color('background-color', $getValueOnly: true),\n        $loading-overlay-backdrop-opacity\n      );\n    }\n\n    .spinner {\n      width: size(l);\n      height: size(l);\n    }\n  }\n}\n",
          "styleUrl": "./loading-overlay.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"overlay-wrapper\">\n  <div *ngIf=\"isLoading\" [class.backdrop]=\"showBackdrop\" class=\"spinner-wrapper\">\n    <kirby-spinner class=\"spinner\"></kirby-spinner>\n  </div>\n  <div class=\"content-wrapper\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
    },
    {
      "name": "MockAccordionItemComponent",
      "id": "component-MockAccordionItemComponent-9bb04af909de4cfcbd6a25a76311fe77",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.accordion-item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: AccordionItemComponent, useExisting: forwardRef(() => MockAccordionItemComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-accordion-item",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isExpanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { AccordionItemComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-accordion-item',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: AccordionItemComponent,\r\n      useExisting: forwardRef(() => MockAccordionItemComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockAccordionItemComponent {\r\n  @Input() title: string;\r\n  @Input() isExpanded: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockActionSheetComponent",
      "id": "component-MockActionSheetComponent-a4cd91ed9bb6a15c4f2e6082300f4c64",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.action-sheet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ActionSheetComponent, useExisting: forwardRef(() => MockActionSheetComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-action-sheet",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "cancelButtonText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "header",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        },
        {
          "name": "hideCancel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "Array<ActionSheetItem>"
        },
        {
          "name": "subheader",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "cancel",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "EventEmitter"
        },
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<ActionSheetItem>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { ActionSheetComponent, ActionSheetItem } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-action-sheet',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ActionSheetComponent,\r\n      useExisting: forwardRef(() => MockActionSheetComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockActionSheetComponent {\r\n  @Input() cancelButtonText: string;\r\n  @Input() hideCancel: boolean;\r\n  @Input() disabled: boolean;\r\n  @Input() header: string;\r\n  @Input() subheader: string;\r\n  @Input() items: Array<ActionSheetItem>;\r\n  @Output() cancel = new EventEmitter();\r\n  @Output() itemSelect = new EventEmitter<ActionSheetItem>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockAppComponent",
      "id": "component-MockAppComponent-ffc0f883dd8a13eadff267d2ea2f7790",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: AppComponent, useExisting: forwardRef(() => MockAppComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-app",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef } from '@angular/core';\r\n\r\nimport { AppComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-app',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: AppComponent,\r\n      useExisting: forwardRef(() => MockAppComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockAppComponent {}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockAvatarComponent",
      "id": "component-MockAvatarComponent-5d04eba731c1a63b6bbf5f60dc63c6e2",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.avatar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: AvatarComponent, useExisting: forwardRef(() => MockAvatarComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-avatar",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "altText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string"
        },
        {
          "name": "imageSrc",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string"
        },
        {
          "name": "overlay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean"
        },
        {
          "name": "shadow",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "AvatarSize"
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string"
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "NotificationColor | BrandColor | \"medium\" | \"white\" | \"dark\" | \"light\" | \"semi-light\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport {\r\n  AvatarComponent,\r\n  AvatarSize,\r\n  BrandColor,\r\n  NotificationColor,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-avatar',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: AvatarComponent,\r\n      useExisting: forwardRef(() => MockAvatarComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockAvatarComponent {\r\n  @Input() imageSrc: string;\r\n  @Input() altText: string;\r\n  @Input() shadow: boolean;\r\n  @Input() text: string;\r\n  @Input() overlay: boolean;\r\n  @Input() size: AvatarSize;\r\n  @Input() themeColor:\r\n    | NotificationColor\r\n    | BrandColor\r\n    | 'medium'\r\n    | 'white'\r\n    | 'dark'\r\n    | 'light'\r\n    | 'semi-light';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockBadgeComponent",
      "id": "component-MockBadgeComponent-06a8af2e6af69c2b03f7832ba3b2a47a",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.badge.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: BadgeComponent, useExisting: forwardRef(() => MockBadgeComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-badge",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { BadgeComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-badge',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: BadgeComponent,\r\n      useExisting: forwardRef(() => MockBadgeComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockBadgeComponent {\r\n  @Input() text: string;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockBadgeComponent",
      "id": "component-MockBadgeComponent-a3f597192a65798d1da53e718d090856-1",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.web-component-proxies.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: BadgeComponent, useExisting: forwardRef(() => MockBadgeComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-badge",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | \"white\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { BadgeComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-badge',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: BadgeComponent,\r\n      useExisting: forwardRef(() => MockBadgeComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockBadgeComponent {\r\n  @Input() text: string;\r\n  @Input() themeColor:\r\n    | 'danger'\r\n    | 'dark'\r\n    | 'light'\r\n    | 'medium'\r\n    | 'primary'\r\n    | 'secondary'\r\n    | 'success'\r\n    | 'tertiary'\r\n    | 'warning'\r\n    | 'white';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "MockBadgeComponent-1"
    },
    {
      "name": "MockButtonComponent",
      "id": "component-MockButtonComponent-475b5441e6d6c1ba6ecd80cd70a8c51c",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ButtonComponent, useExisting: forwardRef(() => MockButtonComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "button[kirby-button],Button[kirby-button]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"1\" | \"2\" | \"3\" | \"4\""
        },
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"full\" | \"block\""
        },
        {
          "name": "isDestructive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "isFloating",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "ButtonSize"
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "NotificationColor"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ButtonComponent, ButtonSize, NotificationColor } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'button[kirby-button],Button[kirby-button]',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ButtonComponent,\r\n      useExisting: forwardRef(() => MockButtonComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockButtonComponent {\r\n  @Input() attentionLevel: '1' | '2' | '3' | '4';\r\n  @Input() isDestructive: boolean;\r\n  @Input() themeColor: NotificationColor;\r\n  @Input() expand: 'full' | 'block';\r\n  @Input() isFloating: boolean;\r\n  @Input() size: ButtonSize;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockCalendarComponent",
      "id": "component-MockCalendarComponent-c21833e9c062f73879c5179fddee6191",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.calendar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: CalendarComponent, useExisting: forwardRef(() => MockCalendarComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-calendar",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "alwaysEnableToday",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean"
        },
        {
          "name": "customLocales",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "literal type"
        },
        {
          "name": "disabledDates",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "Date[]"
        },
        {
          "name": "disableFutureDates",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "disablePastDates",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean"
        },
        {
          "name": "disableWeekends",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "maxDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "Date"
        },
        {
          "name": "minDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "Date"
        },
        {
          "name": "selectedDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "Date"
        },
        {
          "name": "timezone",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"local\" | \"UTC\""
        },
        {
          "name": "todayDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "Date"
        },
        {
          "name": "yearNavigatorOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "CalendarYearNavigatorConfig"
        }
      ],
      "outputsClass": [
        {
          "name": "dateChange",
          "defaultValue": "new EventEmitter<Date>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter"
        },
        {
          "name": "dateSelect",
          "defaultValue": "new EventEmitter<Date>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        },
        {
          "name": "yearSelect",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport { Locale } from 'date-fns';\r\n\r\nimport { CalendarComponent, CalendarYearNavigatorConfig } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-calendar',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: CalendarComponent,\r\n      useExisting: forwardRef(() => MockCalendarComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockCalendarComponent {\r\n  @Output() dateChange = new EventEmitter<Date>();\r\n  @Output() dateSelect = new EventEmitter<Date>();\r\n  @Output() yearSelect = new EventEmitter<number>();\r\n  @Input() timezone: 'local' | 'UTC';\r\n  @Input() disableWeekends: boolean;\r\n  @Input() disablePastDates: boolean;\r\n  @Input() disableFutureDates: boolean;\r\n  @Input() alwaysEnableToday: boolean;\r\n  @Input() customLocales: { [key: string]: Locale };\r\n  @Input() yearNavigatorOptions: CalendarYearNavigatorConfig;\r\n  @Input() selectedDate: Date;\r\n  @Input() disabledDates: Date[];\r\n  @Input() todayDate: Date;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockCardComponent",
      "id": "component-MockCardComponent-520b61697f9b6718dc0ca2dda97a06c2",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: CardComponent, useExisting: forwardRef(() => MockCardComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-card",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasPadding",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"flat\" | \"highlighted\""
        },
        {
          "name": "sizes",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "literal type"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { CardComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-card',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: CardComponent,\r\n      useExisting: forwardRef(() => MockCardComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockCardComponent {\r\n  @Input() title: string;\r\n  @Input() subtitle: string;\r\n  @Input() hasPadding: boolean;\r\n  @Input() sizes: { [size: string]: number };\r\n  @Input() mode: 'flat' | 'highlighted';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockCardFooterComponent",
      "id": "component-MockCardFooterComponent-43819b72ca4c6197a9566e6a62be7c8f",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.card-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: CardFooterComponent, useExisting: forwardRef(() => MockCardFooterComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-card-footer",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef } from '@angular/core';\r\n\r\nimport { CardFooterComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-card-footer',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: CardFooterComponent,\r\n      useExisting: forwardRef(() => MockCardFooterComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockCardFooterComponent {}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockCardHeaderComponent",
      "id": "component-MockCardHeaderComponent-4af33f879fef4ad855de0a8fd9e94cf8",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.card-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: CardHeaderComponent, useExisting: forwardRef(() => MockCardHeaderComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-card-header",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "flagged",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "CardFlagLevel"
        },
        {
          "name": "isTitleBold",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { CardFlagLevel, CardHeaderComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-card-header',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: CardHeaderComponent,\r\n      useExisting: forwardRef(() => MockCardHeaderComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockCardHeaderComponent {\r\n  @Input() title: string;\r\n  @Input() subtitle: string;\r\n  @Input() isTitleBold: boolean;\r\n  @Input() flagged: CardFlagLevel;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockChartComponent",
      "id": "component-MockChartComponent-ea8b91c24179a80bf6a64f27617ce8e5",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.chart.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ChartComponent, useExisting: forwardRef(() => MockChartComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-chart",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "annotations",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "AnnotationOptions[]"
        },
        {
          "name": "customOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "ChartOptions"
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "ChartDataset[] | number[]"
        },
        {
          "name": "dataLabels",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string[] | string[][]"
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string | number"
        },
        {
          "name": "highlightedElements",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "ChartHighlightedElements"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "ChartType"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport {\r\n  AnnotationOptions,\r\n  ChartComponent,\r\n  ChartDataset,\r\n  ChartHighlightedElements,\r\n  ChartOptions,\r\n  ChartType,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-chart',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ChartComponent,\r\n      useExisting: forwardRef(() => MockChartComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockChartComponent {\r\n  @Input() type: ChartType;\r\n  @Input() data: ChartDataset[] | number[];\r\n  @Input() dataLabels: string[] | string[][];\r\n  @Input() customOptions: ChartOptions;\r\n  @Input() annotations: AnnotationOptions[];\r\n  @Input() highlightedElements: ChartHighlightedElements;\r\n  @Input() height: string | number;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockChartDeprecatedComponent",
      "id": "component-MockChartDeprecatedComponent-7d4ed046b3585e6f73252df426425aa1",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.chart-deprecated.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ChartDeprecatedComponent, useExisting: forwardRef(() => MockChartDeprecatedComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-chart-deprecated",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "breaks",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "Array<XAxisBreaksOptions>"
        },
        {
          "name": "categories",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string[]"
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "[]"
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string"
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "number"
        },
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "Options"
        },
        {
          "name": "showDataLabels",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "ChartDeprecatedType"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\nimport { Options, XAxisBreaksOptions } from 'highcharts';\r\n\r\nimport { ChartDeprecatedComponent, ChartDeprecatedType } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-chart-deprecated',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ChartDeprecatedComponent,\r\n      useExisting: forwardRef(() => MockChartDeprecatedComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockChartDeprecatedComponent {\r\n  @Input() data: [];\r\n  @Input() categories: string[];\r\n  @Input() breaks: Array<XAxisBreaksOptions>;\r\n  @Input() height: number;\r\n  @Input() type: ChartDeprecatedType;\r\n  @Input() description: string;\r\n  @Input() showDataLabels: boolean;\r\n  @Input() options: Options;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockCheckboxComponent",
      "id": "component-MockCheckboxComponent-f7c58eccaae57aac036688ea0ad5b195",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.checkbox.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: CheckboxComponent, useExisting: forwardRef(() => MockCheckboxComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-checkbox",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"1\" | \"2\""
        },
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "checkedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { CheckboxComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-checkbox',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: CheckboxComponent,\r\n      useExisting: forwardRef(() => MockCheckboxComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockCheckboxComponent {\r\n  @Input() checked: boolean;\r\n  @Input() attentionLevel: '1' | '2';\r\n  @Input() text: string;\r\n  @Input() size: 'xs' | 'sm' | 'md';\r\n  @Input() hasError: boolean;\r\n  @Input() disabled: boolean;\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockChipComponent",
      "id": "component-MockChipComponent-c56977ce5505c39ee242899b10915594",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.chip.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ChipComponent, useExisting: forwardRef(() => MockChipComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-chip",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ChipComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-chip',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ChipComponent,\r\n      useExisting: forwardRef(() => MockChipComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockChipComponent {\r\n  @Input() text: string;\r\n  @Input() isSelected: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockDividerComponent",
      "id": "component-MockDividerComponent-feff8eee55705456e175dec88186c18f",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.divider.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: DividerComponent, useExisting: forwardRef(() => MockDividerComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-divider",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasMargin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { DividerComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-divider',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: DividerComponent,\r\n      useExisting: forwardRef(() => MockDividerComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockDividerComponent {\r\n  @Input() hasMargin: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockDropdownComponent",
      "id": "component-MockDropdownComponent-7ef1aeb7b7bc7b8da59865e925595c44",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.dropdown.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: DropdownComponent, useExisting: forwardRef(() => MockDropdownComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-dropdown",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "attentionLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"1\" | \"2\" | \"3\" | \"4\""
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": ""
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string[] | any[]"
        },
        {
          "name": "itemTextProperty",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        },
        {
          "name": "popout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "HorizontalDirection"
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "number"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "tabindex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "number"
        },
        {
          "name": "usePopover",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string | any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { DropdownComponent, HorizontalDirection } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-dropdown',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: DropdownComponent,\r\n      useExisting: forwardRef(() => MockDropdownComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockDropdownComponent {\r\n  @Input() items: string[] | any[];\r\n  @Input() selectedIndex: number;\r\n  @Input() itemTextProperty: string;\r\n  @Input() placeholder: string;\r\n  @Input() popout: HorizontalDirection;\r\n  @Input() attentionLevel: '1' | '2' | '3' | '4';\r\n  @Input() expand: 'block';\r\n  @Input() disabled: boolean;\r\n  @Input() hasError: boolean;\r\n  @Input() size: 'sm' | 'md';\r\n  @Input() tabindex: number;\r\n  @Input() usePopover: boolean;\r\n  @Output() change = new EventEmitter<string | any>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockEmptyStateComponent",
      "id": "component-MockEmptyStateComponent-ab846e1acd63498770d118fb1936e48c",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.empty-state.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: EmptyStateComponent, useExisting: forwardRef(() => MockEmptyStateComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-empty-state",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "customIconName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "iconName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { EmptyStateComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-empty-state',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: EmptyStateComponent,\r\n      useExisting: forwardRef(() => MockEmptyStateComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockEmptyStateComponent {\r\n  @Input() iconName: string;\r\n  @Input() customIconName: string;\r\n  @Input() title: string;\r\n  @Input() subtitle: string;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockFabSheetComponent",
      "id": "component-MockFabSheetComponent-a5a7f1e7e87439a41720418bcca61e7d",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.fab-sheet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: FabSheetComponent, useExisting: forwardRef(() => MockFabSheetComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-fab-sheet",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "horizontalAlignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"left\" | \"center\" | \"right\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { FabSheetComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-fab-sheet',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: FabSheetComponent,\r\n      useExisting: forwardRef(() => MockFabSheetComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockFabSheetComponent {\r\n  @Input() disabled: boolean;\r\n  @Input() horizontalAlignment: 'left' | 'center' | 'right';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockFlagComponent",
      "id": "component-MockFlagComponent-7c4c5f001452e06fe89553e6d6ae2b7f",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.flag.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: FlagComponent, useExisting: forwardRef(() => MockFlagComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-flag",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"success\" | \"warning\" | \"danger\" | \"semi-light\" | \"transparent\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { FlagComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-flag',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: FlagComponent,\r\n      useExisting: forwardRef(() => MockFlagComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockFlagComponent {\r\n  @Input() size: 'xs' | 'sm' | 'md';\r\n  @Input() themeColor: 'success' | 'warning' | 'danger' | 'semi-light' | 'transparent';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockFormFieldComponent",
      "id": "component-MockFormFieldComponent-0ab717e6745470b3438b47041c317b58",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.form-field.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: FormFieldComponent, useExisting: forwardRef(() => MockFormFieldComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-form-field",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { FormFieldComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-form-field',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: FormFieldComponent,\r\n      useExisting: forwardRef(() => MockFormFieldComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockFormFieldComponent {\r\n  @Input() label: string;\r\n  @Input() message: string;\r\n\r\n  focus() {}\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockFormFieldMessageComponent",
      "id": "component-MockFormFieldMessageComponent-8a6260f912076929286e74aca3d460b8",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.form-field-message.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: FormFieldMessageComponent, useExisting: forwardRef(() => MockFormFieldMessageComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-form-field-message",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"left\" | \"right\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { FormFieldMessageComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-form-field-message',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: FormFieldMessageComponent,\r\n      useExisting: forwardRef(() => MockFormFieldMessageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockFormFieldMessageComponent {\r\n  @Input() text: string;\r\n  @Input() position: 'left' | 'right';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockGridComponent",
      "id": "component-MockGridComponent-13f6c733b2de8647c6c5a94822bf2a69",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.grid.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: GridComponent, useExisting: forwardRef(() => MockGridComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-grid",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "cardConfigurations",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "GridCardConfiguration[]"
        },
        {
          "name": "maxColumns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { GridCardConfiguration, GridComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-grid',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: GridComponent,\r\n      useExisting: forwardRef(() => MockGridComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockGridComponent {\r\n  @Input() maxColumns: number;\r\n  @Input() cardConfigurations: GridCardConfiguration[];\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockIconComponent",
      "id": "component-MockIconComponent-2295e6396a5d917d9a3f544fbd15b0e3",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.icon.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: IconComponent, useExisting: forwardRef(() => MockIconComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-icon",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "customName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "IconSize"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { IconComponent, IconSize } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-icon',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: IconComponent,\r\n      useExisting: forwardRef(() => MockIconComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockIconComponent {\r\n  @Input() size: IconSize;\r\n  @Input() name: string;\r\n  @Input() customName: string;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockInputComponent",
      "id": "component-MockInputComponent-631dba65aa0d91d428ff6aa390d1595e",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.input.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: InputComponent, useExisting: forwardRef(() => MockInputComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "input[kirby-input]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "autocorrect",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean"
        },
        {
          "name": "inputmode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string"
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "InputSize"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { InputComponent, InputSize } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'input[kirby-input]',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: InputComponent,\r\n      useExisting: forwardRef(() => MockInputComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockInputComponent {\r\n  @Input() type: string;\r\n  @Input() size: InputSize;\r\n  @Input() borderless: boolean;\r\n  @Input() hasError: boolean;\r\n  @Input() autocomplete: 'on' | 'off';\r\n  @Input() autocorrect: 'on' | 'off';\r\n  @Input() value: string;\r\n  @Input() maxlength: number;\r\n  @Input() inputmode: string;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockInputCounterComponent",
      "id": "component-MockInputCounterComponent-7476618751f14c19f5f2d294e8f0ed61",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.input-counter.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: InputCounterComponent, useExisting: forwardRef(() => MockInputCounterComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-input-counter",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "listenTo",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "InputComponent | TextareaComponent"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport {\r\n  InputComponent,\r\n  InputCounterComponent,\r\n  TextareaComponent,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-input-counter',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: InputCounterComponent,\r\n      useExisting: forwardRef(() => MockInputCounterComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockInputCounterComponent {\r\n  @Input() listenTo: InputComponent | TextareaComponent;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockItemComponent",
      "id": "component-MockItemComponent-22e35298c446952402bb412f052ccfde",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ItemComponent, useExisting: forwardRef(() => MockItemComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-item",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "reorderable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "selectable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "ItemSize"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ItemComponent, ItemSize } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-item',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ItemComponent,\r\n      useExisting: forwardRef(() => MockItemComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockItemComponent {\r\n  @Input() disabled: boolean;\r\n  @Input() selected: boolean;\r\n  @Input() selectable: boolean;\r\n  @Input() reorderable: boolean;\r\n  @Input() size: ItemSize;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockLabelComponent",
      "id": "component-MockLabelComponent-4319bf9a63ab11b01dc2d7606170b8e2",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.label.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: LabelComponent, useExisting: forwardRef(() => MockLabelComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-label",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "direction",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"vertical\" | \"horizontal\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { LabelComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-label',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: LabelComponent,\r\n      useExisting: forwardRef(() => MockLabelComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockLabelComponent {\r\n  @Input() direction: 'vertical' | 'horizontal';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockListComponent",
      "id": "component-MockListComponent-989c36ee083a57dee751cec202a7f2d5",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ListComponent, useExisting: forwardRef(() => MockListComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-list",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "getItemColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "function"
        },
        {
          "name": "getSectionName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "function"
        },
        {
          "name": "hasItemSpacing",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean"
        },
        {
          "name": "isLoadOnDemandEnabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "any[]"
        },
        {
          "name": "markSelectedRow",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean"
        },
        {
          "name": "noMoreItemsText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string"
        },
        {
          "name": "shape",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "ListShape"
        },
        {
          "name": "showDivider",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "boolean"
        },
        {
          "name": "swipeActions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "ListSwipeAction[]"
        },
        {
          "name": "trackBy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "TrackByFunction<any>"
        },
        {
          "name": "useVirtualScroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean"
        },
        {
          "name": "virtualScrollSettings",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "VirtualScrollerSettings"
        },
        {
          "name": "virtualScrollTimeout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "number"
        },
        {
          "name": "virtualScrollViewportHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "EventEmitter"
        },
        {
          "name": "loadOnDemand",
          "defaultValue": "new EventEmitter<LoadOnDemandEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, TrackByFunction } from '@angular/core';\r\n\r\nimport {\r\n  ListComponent,\r\n  ListShape,\r\n  ListSwipeAction,\r\n  LoadOnDemandEvent,\r\n  ThemeColor,\r\n  VirtualScrollerSettings,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-list',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ListComponent,\r\n      useExisting: forwardRef(() => MockListComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockListComponent {\r\n  @Input() items: any[];\r\n  @Input() getItemColor: (item: any) => ThemeColor;\r\n  @Input() getSectionName: (item: any) => string;\r\n  @Input() trackBy: TrackByFunction<any>;\r\n  @Input() noMoreItemsText: string;\r\n  @Input() showDivider: boolean;\r\n  @Input() markSelectedRow: boolean;\r\n  @Input() shape: ListShape;\r\n  @Input() hasItemSpacing: boolean;\r\n  @Input() useVirtualScroll: boolean;\r\n  @Input() virtualScrollViewportHeight: number;\r\n  @Input() virtualScrollSettings: VirtualScrollerSettings;\r\n  @Input() virtualScrollTimeout: number;\r\n  @Input() isLoadOnDemandEnabled: boolean;\r\n  @Output() loadOnDemand = new EventEmitter<LoadOnDemandEvent>();\r\n  @Input() swipeActions: ListSwipeAction[];\r\n  @Output() itemSelect = new EventEmitter<any>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockListHeaderComponent",
      "id": "component-MockListHeaderComponent-18faef6eebce76de8a0931b1ea87395f",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.list-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ListHeaderComponent, useExisting: forwardRef(() => MockListHeaderComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-list-header",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef } from '@angular/core';\r\n\r\nimport { ListHeaderComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-list-header',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ListHeaderComponent,\r\n      useExisting: forwardRef(() => MockListHeaderComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockListHeaderComponent {}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockListItemComponent",
      "id": "component-MockListItemComponent-798c1c7ddeb465a7a04796a4cc736236",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.list-item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ListItemComponent, useExisting: forwardRef(() => MockListItemComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-list-item",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "boundaryClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "BoundaryClass"
        },
        {
          "name": "getItemColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "function"
        },
        {
          "name": "isSelectable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean"
        },
        {
          "name": "item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "any"
        },
        {
          "name": "itemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "TemplateRef<any>"
        },
        {
          "name": "swipeActions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "ListSwipeAction[]"
        }
      ],
      "outputsClass": [
        {
          "name": "itemSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter"
        },
        {
          "name": "swipeActionSelect",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, TemplateRef } from '@angular/core';\r\n\r\nimport {\r\n  BoundaryClass,\r\n  ListItemComponent,\r\n  ListSwipeAction,\r\n  ThemeColor,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-list-item',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ListItemComponent,\r\n      useExisting: forwardRef(() => MockListItemComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockListItemComponent {\r\n  @Input() item: any;\r\n  @Input() boundaryClass: BoundaryClass;\r\n  @Input() swipeActions: ListSwipeAction[];\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Input() isSelected: boolean;\r\n  @Input() isSelectable: boolean;\r\n  @Input() getItemColor: (item: any) => ThemeColor;\r\n  @Output() itemSelect = new EventEmitter<any>();\r\n  @Output() swipeActionSelect = new EventEmitter<any>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockListSectionHeaderComponent",
      "id": "component-MockListSectionHeaderComponent-de9b954c9cb765bd44f38423dd2db1d5",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.list-section-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ListSectionHeaderComponent, useExisting: forwardRef(() => MockListSectionHeaderComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-list-section-header",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ListSectionHeaderComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-list-section-header',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ListSectionHeaderComponent,\r\n      useExisting: forwardRef(() => MockListSectionHeaderComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockListSectionHeaderComponent {\r\n  @Input() title: string;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockLoadingOverlayComponent",
      "id": "component-MockLoadingOverlayComponent-deaf1c8b7e41ef77065845ea4be99479",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.loading-overlay.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: LoadingOverlayComponent, useExisting: forwardRef(() => MockLoadingOverlayComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-loading-overlay",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "showBackdrop",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { LoadingOverlayComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-loading-overlay',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: LoadingOverlayComponent,\r\n      useExisting: forwardRef(() => MockLoadingOverlayComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockLoadingOverlayComponent {\r\n  @Input() isLoading: boolean;\r\n  @Input() showBackdrop: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockModalFooterComponent",
      "id": "component-MockModalFooterComponent-4d208b2cd9a98ae75887a445923837c7",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.modal-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ModalFooterComponent, useExisting: forwardRef(() => MockModalFooterComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-modal-footer",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "snapToKeyboard",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ModalFooterComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-modal-footer',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ModalFooterComponent,\r\n      useExisting: forwardRef(() => MockModalFooterComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockModalFooterComponent {\r\n  @Input() snapToKeyboard: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageActionsComponent",
      "id": "component-MockPageActionsComponent-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageActionsComponent, useExisting: forwardRef(() => MockPageActionsComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page-actions",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageComponent",
      "id": "component-MockPageComponent-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageComponent, useExisting: forwardRef(() => MockPageComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "defaultBackHref",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 129,
          "type": "string"
        },
        {
          "name": "hideBackButton",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 130,
          "type": "boolean"
        },
        {
          "name": "tabBarBottomHidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 132,
          "type": "boolean"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 126,
          "type": "string"
        },
        {
          "name": "titleAlignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 128,
          "type": "\"left\" | \"center\" | \"right\""
        },
        {
          "name": "titleMaxLines",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 131,
          "type": "number"
        },
        {
          "name": "toolbarTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 127,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "enter",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 133,
          "type": "EventEmitter"
        },
        {
          "name": "leave",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 134,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageContentComponent",
      "id": "component-MockPageContentComponent-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageContentComponent, useExisting: forwardRef(() => MockPageContentComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page-content",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageFooterComponent",
      "id": "component-MockPageFooterComponent-6c9312144841a9eec54458159b1e56f9",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageFooterComponent, useExisting: forwardRef(() => MockPageFooterComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page-footer",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasPadding",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { PageFooterComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-page-footer',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageFooterComponent,\r\n      useExisting: forwardRef(() => MockPageFooterComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageFooterComponent {\r\n  @Input() hasPadding: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageProgressComponent",
      "id": "component-MockPageProgressComponent-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageProgressComponent, useExisting: forwardRef(() => MockPageProgressComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page-progress",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPageTitleComponent",
      "id": "component-MockPageTitleComponent-b7c25c8f7b4ad7f2e45fd69bc7085b92",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PageTitleComponent, useExisting: forwardRef(() => MockPageTitleComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-page-title",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Directive, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  PageActionsComponent,\r\n  PageActionsDirective,\r\n  PageComponent,\r\n  PageContentComponent,\r\n  PageContentDirective,\r\n  PageProgressComponent,\r\n  PageTitleComponent,\r\n  PageTitleDirective,\r\n  PageToolbarTitleDirective,\r\n} from '@kirbydesign/designsystem';\r\n\r\ntype stickyConfig = { sticky: boolean };\r\ntype fixedConfig = { fixed: boolean };\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Directive({\r\n  selector: '[kirbyPageTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageTitleDirective,\r\n      useExisting: forwardRef(() => MockPageTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageToolbarTitle]',\r\n  providers: [\r\n    {\r\n      provide: PageToolbarTitleDirective,\r\n      useExisting: forwardRef(() => MockPageToolbarTitleDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageToolbarTitleDirective {}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageActions]',\r\n  providers: [\r\n    {\r\n      provide: PageActionsDirective,\r\n      useExisting: forwardRef(() => MockPageActionsDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsDirective {\r\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\r\n}\r\n\r\n@Directive({\r\n  selector: '[kirbyPageContent]',\r\n  providers: [\r\n    {\r\n      provide: PageContentDirective,\r\n      useExisting: forwardRef(() => MockPageContentDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentDirective {\r\n  @Input('kirbyPageContent') config: fixedConfig;\r\n}\r\n\r\n@Component({\r\n  selector: 'kirby-page-progress',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageProgressComponent,\r\n      useExisting: forwardRef(() => MockPageProgressComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageProgressComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-title',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageTitleComponent,\r\n      useExisting: forwardRef(() => MockPageTitleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageTitleComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-content',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageContentComponent,\r\n      useExisting: forwardRef(() => MockPageContentComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageContentComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page-actions',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageActionsComponent,\r\n      useExisting: forwardRef(() => MockPageActionsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageActionsComponent {}\r\n\r\n@Component({\r\n  selector: 'kirby-page',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PageComponent,\r\n      useExisting: forwardRef(() => MockPageComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPageComponent {\r\n  @Input() title: string;\r\n  @Input() toolbarTitle: string;\r\n  @Input() titleAlignment: 'left' | 'center' | 'right';\r\n  @Input() defaultBackHref: string;\r\n  @Input() hideBackButton: boolean;\r\n  @Input() titleMaxLines: number;\r\n  @Input() tabBarBottomHidden: boolean;\r\n  @Output() enter = new EventEmitter<void>();\r\n  @Output() leave = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockPopoverComponent",
      "id": "component-MockPopoverComponent-5352732c4b8f55cc79457cee10ea843a",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.popover.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: PopoverComponent, useExisting: forwardRef(() => MockPopoverComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-popover",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "popout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "HorizontalDirection"
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "HTMLElement | ElementRef<HTMLElement>"
        }
      ],
      "outputsClass": [
        {
          "name": "willHide",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { HorizontalDirection, PopoverComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-popover',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: PopoverComponent,\r\n      useExisting: forwardRef(() => MockPopoverComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockPopoverComponent {\r\n  @Input() popout: HorizontalDirection;\r\n  @Input() target: HTMLElement | ElementRef<HTMLElement>;\r\n  @Output() willHide = new EventEmitter<void>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockProgressCircleComponent",
      "id": "component-MockProgressCircleComponent-afa534783dcaad1785b82fa7d311a773",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.progress-circle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ProgressCircleComponent, useExisting: forwardRef(() => MockProgressCircleComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-progress-circle",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"sm\" | \"md\" | \"lg\""
        },
        {
          "name": "themeColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { ProgressCircleComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-progress-circle',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ProgressCircleComponent,\r\n      useExisting: forwardRef(() => MockProgressCircleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockProgressCircleComponent {\r\n  @Input() value: number;\r\n  @Input() size: 'sm' | 'md' | 'lg';\r\n  @Input() themeColor: 'success' | 'warning' | 'danger';\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockRadioComponent",
      "id": "component-MockRadioComponent-cf01ba216f42fe16909df0df8a3bc216",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.radio.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: RadioComponent, useExisting: forwardRef(() => MockRadioComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-radio",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "any"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { RadioComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-radio',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: RadioComponent,\r\n      useExisting: forwardRef(() => MockRadioComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockRadioComponent {\r\n  @Input() value: any;\r\n  @Input() text: string;\r\n  @Input() size: 'xs' | 'sm' | 'md';\r\n  @Input() disabled: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockRadioGroupComponent",
      "id": "component-MockRadioGroupComponent-7222e6d1765379123180b57d4d8ea8f4",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.radio-group.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: RadioGroupComponent, useExisting: forwardRef(() => MockRadioGroupComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-radio-group",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        },
        {
          "name": "itemDisabledProperty",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string[] | any[]"
        },
        {
          "name": "itemTextProperty",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string"
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "number"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string | any"
        }
      ],
      "outputsClass": [
        {
          "name": "valueChange",
          "defaultValue": "new EventEmitter<string | any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { RadioGroupComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-radio-group',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: RadioGroupComponent,\r\n      useExisting: forwardRef(() => MockRadioGroupComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockRadioGroupComponent {\r\n  @Input() disabled: boolean;\r\n  @Input() hasError: boolean;\r\n  @Input() items: string[] | any[];\r\n  @Input() itemTextProperty: string;\r\n  @Input() itemDisabledProperty: string;\r\n  @Input() selectedIndex: number;\r\n  @Input() value: string | any;\r\n  @Output() valueChange = new EventEmitter<string | any>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockRangeComponent",
      "id": "component-MockRangeComponent-da0bcae5dca8fa410c766dc608421894",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.range.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: RangeComponent, useExisting: forwardRef(() => MockRangeComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-range",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "debounce",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "number"
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean"
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "number"
        },
        {
          "name": "maxLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "number"
        },
        {
          "name": "minLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "pin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "step",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "number"
        },
        {
          "name": "ticks",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "registerOnChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnTouched",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setDisabledState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "writeValue",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { RangeComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-range',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: RangeComponent,\r\n      useExisting: forwardRef(() => MockRangeComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockRangeComponent {\r\n  @Input() minLabel: string;\r\n  @Input() maxLabel: string;\r\n  @Input() debounce: number;\r\n  @Input() max: number;\r\n  @Input() min: number;\r\n  @Input() pin: boolean;\r\n  @Input() step: number;\r\n  @Input() ticks: boolean;\r\n  @Input() disabled: boolean;\r\n  @Input() value: number;\r\n  @Output() change = new EventEmitter<number>();\r\n\r\n  setDisabledState() {}\r\n  writeValue() {}\r\n  registerOnTouched() {}\r\n  registerOnChange() {}\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockReorderListComponent",
      "id": "component-MockReorderListComponent-835127820c8b15fcca9995ef088c5fd2",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.reorder-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ReorderListComponent, useExisting: forwardRef(() => MockReorderListComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-reorder-list",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "getItemTextDefault",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "function"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "any[]"
        },
        {
          "name": "subItemsName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "itemReorder",
          "defaultValue": "new EventEmitter<ReorderEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "EventEmitter"
        },
        {
          "name": "subItemReorder",
          "defaultValue": "new EventEmitter<ReorderEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { ReorderListComponent } from '@kirbydesign/designsystem';\r\nimport { ReorderEvent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-reorder-list',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ReorderListComponent,\r\n      useExisting: forwardRef(() => MockReorderListComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockReorderListComponent {\r\n  @Input() items: any[];\r\n  @Input() subItemsName: string;\r\n  @Input() getItemTextDefault: (item: any) => string;\r\n  @Output() itemReorder = new EventEmitter<ReorderEvent>();\r\n  @Output() subItemReorder = new EventEmitter<ReorderEvent>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockRouterOutletComponent",
      "id": "component-MockRouterOutletComponent-5b3906a04241fe758fbbe8d70098836a",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.router-outlet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: RouterOutletComponent, useExisting: forwardRef(() => MockRouterOutletComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-router-outlet",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "main",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { RouterOutletComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-router-outlet',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: RouterOutletComponent,\r\n      useExisting: forwardRef(() => MockRouterOutletComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockRouterOutletComponent {\r\n  @Input() main: boolean;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockSegmentedControlComponent",
      "id": "component-MockSegmentedControlComponent-aa2673c8202b8c60d147c38dd24ffeae",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.segmented-control.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: SegmentedControlComponent, useExisting: forwardRef(() => MockSegmentedControlComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-segmented-control",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "SegmentItem[]"
        },
        {
          "name": "mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "SegmentedControlMode"
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "number"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SegmentItem"
        }
      ],
      "outputsClass": [
        {
          "name": "segmentSelect",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport {\r\n  SegmentedControlComponent,\r\n  SegmentedControlMode,\r\n  SegmentItem,\r\n} from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-segmented-control',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: SegmentedControlComponent,\r\n      useExisting: forwardRef(() => MockSegmentedControlComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockSegmentedControlComponent {\r\n  @Input() mode: SegmentedControlMode;\r\n  @Input() items: SegmentItem[];\r\n  @Input() selectedIndex: number;\r\n  @Input() value: SegmentItem;\r\n  @Input() size: 'sm' | 'md';\r\n  @Output() segmentSelect = new EventEmitter();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockSlideButtonComponent",
      "id": "component-MockSlideButtonComponent-0d99ea96bf57d22bde5e8aa38ef8975d",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.slide-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: SlideButtonComponent, useExisting: forwardRef(() => MockSlideButtonComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-slide-button",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": ""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "slideDone",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        },
        {
          "name": "slidingPercentageChanged",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { SlideButtonComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-slide-button',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: SlideButtonComponent,\r\n      useExisting: forwardRef(() => MockSlideButtonComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockSlideButtonComponent {\r\n  @Input() text: string;\r\n  @Input() expand: 'block';\r\n  @Output() slideDone = new EventEmitter();\r\n  @Output() slidingPercentageChanged = new EventEmitter<number>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockSlidesComponent",
      "id": "component-MockSlidesComponent-a5975070d25c539e01a930b1b55350f6",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.slides.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: SlidesComponent, useExisting: forwardRef(() => MockSlidesComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-slides",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "slides",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "any[]"
        },
        {
          "name": "slidesOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "any"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { forwardRef, Component, Directive, Input } from '@angular/core';\r\n\r\nimport { SlideDirective, SlidesComponent } from '@kirbydesign/designsystem';\r\n\r\n@Directive({\r\n  selector: '[kirbySlide]',\r\n  providers: [\r\n    {\r\n      provide: SlideDirective,\r\n      useExisting: forwardRef(() => MockSlideDirective),\r\n    },\r\n  ],\r\n})\r\nexport class MockSlideDirective {}\r\n\r\n@Component({\r\n  selector: 'kirby-slides',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: SlidesComponent,\r\n      useExisting: forwardRef(() => MockSlidesComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockSlidesComponent {\r\n  @Input() slidesOptions: any;\r\n  @Input() slides: any[];\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockSpinnerComponent",
      "id": "component-MockSpinnerComponent-70742c4164a83e97c4bb14301fc100ca",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.spinner.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: SpinnerComponent, useExisting: forwardRef(() => MockSpinnerComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-spinner",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef } from '@angular/core';\r\n\r\nimport { SpinnerComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-spinner',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: SpinnerComponent,\r\n      useExisting: forwardRef(() => MockSpinnerComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockSpinnerComponent {}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockTabButtonComponent",
      "id": "component-MockTabButtonComponent-977c211024692b8a424e48c83e263025",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.tab-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: TabButtonComponent, useExisting: forwardRef(() => MockTabButtonComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-tab-button",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "routerLink",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "click",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { TabButtonComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-tab-button',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: TabButtonComponent,\r\n      useExisting: forwardRef(() => MockTabButtonComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockTabButtonComponent {\r\n  @Input() routerLink: string;\r\n  @Output() click = new EventEmitter<Event>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockTabsComponent",
      "id": "component-MockTabsComponent-423e85454192a125164abdcde50c81fc",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.tabs.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: TabsComponent, useExisting: forwardRef(() => MockTabsComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-tab-bar",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef } from '@angular/core';\r\n\r\nimport { TabsComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-tab-bar',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: TabsComponent,\r\n      useExisting: forwardRef(() => MockTabsComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockTabsComponent {}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockTextareaComponent",
      "id": "component-MockTextareaComponent-2d9024f27f966928bb81a0b40580d9a1",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.textarea.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: TextareaComponent, useExisting: forwardRef(() => MockTextareaComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "textarea[kirby-textarea]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "autocorrect",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "number"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\n\r\nimport { TextareaComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'textarea[kirby-textarea]',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: TextareaComponent,\r\n      useExisting: forwardRef(() => MockTextareaComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockTextareaComponent {\r\n  @Input() value: string;\r\n  @Input() borderless: boolean;\r\n  @Input() hasError: boolean;\r\n  @Input() autocomplete: 'on' | 'off';\r\n  @Input() autocorrect: 'on' | 'off';\r\n  @Input() maxlength: number;\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockToggleButtonComponent",
      "id": "component-MockToggleButtonComponent-fa1eede5059c652217b4c1ad0099dbbd",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.toggle-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ToggleButtonComponent, useExisting: forwardRef(() => MockToggleButtonComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-toggle-button",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "checkChanged",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { ToggleButtonComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-toggle-button',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ToggleButtonComponent,\r\n      useExisting: forwardRef(() => MockToggleButtonComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockToggleButtonComponent {\r\n  @Input() checked: boolean;\r\n  @Output() checkChanged = new EventEmitter<boolean>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "MockToggleComponent",
      "id": "component-MockToggleComponent-af7886d255ffb80e9810dac08477f961",
      "file": "libs/designsystem/testing-base/src/lib/components/mock.toggle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: ToggleComponent, useExisting: forwardRef(() => MockToggleComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-toggle",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean"
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "checkedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\n\r\nimport { ToggleComponent } from '@kirbydesign/designsystem';\r\n\r\n// #region AUTO-GENERATED - PLEASE DON'T EDIT CONTENT WITHIN!\r\n@Component({\r\n  selector: 'kirby-toggle',\r\n  template: '<ng-content></ng-content>',\r\n  providers: [\r\n    {\r\n      provide: ToggleComponent,\r\n      useExisting: forwardRef(() => MockToggleComponent),\r\n    },\r\n  ],\r\n})\r\nexport class MockToggleComponent {\r\n  @Input() checked: boolean;\r\n  @Input() disabled: boolean;\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n}\r\n\r\n// #endregion\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ModalCompactWrapperComponent",
      "id": "component-ModalCompactWrapperComponent-9496229a6aa0c0f54f3250718967ce65",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/compact/modal-compact-wrapper.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: Modal, useExisting: ModalCompactWrapperComponent }",
          "type": "component"
        }
      ],
      "selector": "kirby-modal-compact-wrapper",
      "styleUrls": ["./modal-compact-wrapper.component.scss"],
      "styles": [],
      "templateUrl": ["./modal-compact-wrapper.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "config",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "ModalConfig"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "componentPropsInjector",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "didPresent",
          "defaultValue": "this.ionModalDidPresent.toPromise()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [143]
        },
        {
          "name": "ionModalDidPresent",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [121, 143]
        },
        {
          "name": "ionModalElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLIonModalElement",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [121]
        },
        {
          "name": "ionModalWillDismiss",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [121, 143]
        },
        {
          "name": "scrollDisabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "scrollToBottom",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "scrollToTop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "scrollY",
          "defaultValue": "Math.abs(this.windowRef.nativeWindow.scrollY)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "willClose",
          "defaultValue": "this.ionModalWillDismiss.toPromise()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [143]
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForIonModalDidPresent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "listenForIonModalWillDismiss",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFocusChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:focus'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:focusout'"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:focus",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75
        },
        {
          "name": "window:focusout",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, HostListener, Injector, Input, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { WindowRef } from '../../../../types/window-ref';\nimport { Modal } from '../../services/modal.interfaces';\nimport { ModalConfig } from '../config/modal-config';\nimport { COMPONENT_PROPS } from '../config/modal-config.helper';\n\n@Component({\n  selector: 'kirby-modal-compact-wrapper',\n  templateUrl: './modal-compact-wrapper.component.html',\n  styleUrls: ['./modal-compact-wrapper.component.scss'],\n  providers: [{ provide: Modal, useExisting: ModalCompactWrapperComponent }],\n  // tslint:disable-next-line: no-host-metadata-property\n  host: { '[class.ion-page]': 'false' }, //Ensure ion-page class doesn't get applied by Ionic Modal Controller\n})\nexport class ModalCompactWrapperComponent implements Modal, OnInit {\n  scrollY: number = Math.abs(this.windowRef.nativeWindow.scrollY);\n  scrollDisabled = false;\n  @Input() config: ModalConfig;\n  componentPropsInjector: Injector;\n\n  private ionModalElement: HTMLIonModalElement;\n  private readonly ionModalDidPresent = new Subject<void>();\n  private readonly ionModalWillDismiss = new Subject<void>();\n  readonly didPresent = this.ionModalDidPresent.toPromise();\n  readonly willClose = this.ionModalWillDismiss.toPromise();\n\n  constructor(\n    private injector: Injector,\n    private elementRef: ElementRef<HTMLElement>,\n    private windowRef: WindowRef\n  ) {}\n\n  ngOnInit(): void {\n    this.ionModalElement = this.elementRef.nativeElement.closest('ion-modal');\n    this.listenForIonModalDidPresent();\n    this.listenForIonModalWillDismiss();\n    this.componentPropsInjector = Injector.create({\n      providers: [{ provide: COMPONENT_PROPS, useValue: this.config.componentProps }],\n      parent: this.injector,\n    });\n  }\n\n  private listenForIonModalDidPresent() {\n    if (this.ionModalElement) {\n      this.ionModalElement.addEventListener('ionModalDidPresent', () => {\n        this.ionModalDidPresent.next();\n        this.ionModalDidPresent.complete();\n      });\n    }\n  }\n\n  private listenForIonModalWillDismiss() {\n    if (this.ionModalElement) {\n      this.ionModalElement.addEventListener('ionModalWillDismiss', () => {\n        this.ionModalWillDismiss.next();\n        this.ionModalWillDismiss.complete();\n      });\n    }\n  }\n\n  async close(data?: any): Promise<void> {\n    const ionModalElement = this.elementRef.nativeElement.closest('ion-modal');\n    if (ionModalElement) {\n      await ionModalElement.dismiss(data);\n    }\n  }\n\n  scrollToTop: (_?: any) => void;\n  scrollToBottom: (_?: any) => void;\n\n  @HostListener('window:focus')\n  @HostListener('window:focusout')\n  onFocusChange() {\n    // This fixes an undesired scroll behaviour occurring on keyboard-tabbing backwards (with shift+tab):\n    this.windowRef.nativeWindow.scrollTo({ top: this.scrollY });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n// Global modal styling can be found at scss/base/_ionic.scss\n\n:host {\n  display: block;\n  padding: size('m') size('s');\n}\n",
          "styleUrl": "./modal-compact-wrapper.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["Modal", "OnInit"],
      "templateData": "<ng-container\n  *ngComponentOutlet=\"config.component; injector: componentPropsInjector\"\n></ng-container>\n"
    },
    {
      "name": "ModalFooterComponent",
      "id": "component-ModalFooterComponent-0b91968e0e0392f4cc4b69b2090114c2",
      "file": "libs/designsystem/src/lib/components/modal/footer/modal-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-modal-footer",
      "styleUrls": ["./modal-footer.component.scss"],
      "styles": [],
      "templateUrl": ["./modal-footer.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "snapToKeyboard",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'kirby-modal-footer',\n  templateUrl: './modal-footer.component.html',\n  styleUrls: ['./modal-footer.component.scss'],\n})\nexport class ModalFooterComponent {\n  @HostBinding('class.snap-to-keyboard')\n  @Input()\n  snapToKeyboard = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$padding-horizontal: size('s');\n$padding-vertical: size('xxs');\n\nion-footer {\n  box-shadow: get-elevation(8);\n  display: flex;\n  justify-content: var(--kirby-modal-footer-justify-content, center);\n  align-items: center;\n  background-color: var(--kirby-modal-footer-background, get-color('white'));\n  color: var(--kirby-modal-footer-color, get-color('white-contrast'));\n  padding: $padding-vertical $padding-horizontal;\n  padding-bottom: calc(#{$padding-vertical} + var(--kirby-modal-footer-safe-area-bottom, 0px));\n}\n\n@include media('<medium') {\n  :host {\n    --kirby-modal-footer-safe-area-bottom: var(--kirby-safe-area-bottom);\n  }\n}\n\n:host-context(.modal-wrapper.full-height) {\n  --kirby-modal-footer-safe-area-bottom: var(--kirby-safe-area-bottom);\n}\n\n:host(.snap-to-keyboard) {\n  ion-footer {\n    transition: transform $soft-keyboard-transition-leave;\n  }\n}\n\n:host-context(.keyboard-visible) {\n  &.snap-to-keyboard {\n    ion-footer {\n      transition: transform $soft-keyboard-transition-enter;\n      // Prevent clean-css from replacing `0px` with `0` or `calc()` won't work:\n      /* clean-css ignore:start */\n      transform: translateY(\n        calc((var(--keyboard-offset, 0px) - var(--kirby-modal-footer-safe-area-bottom, 0px)) * -1)\n      );\n      /* clean-css ignore:end */\n    }\n  }\n}\n\n:host(.light) ion-footer {\n  background-color: get-color('background-color');\n}\n",
          "styleUrl": "./modal-footer.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ion-footer>\n  <ng-content></ng-content>\n</ion-footer>\n"
    },
    {
      "name": "ModalWrapperComponent",
      "id": "component-ModalWrapperComponent-b75e245ffb199adbdb8bce314b7f2309",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: Modal, useExisting: ModalWrapperComponent }",
          "type": "component"
        }
      ],
      "selector": "kirby-modal-wrapper",
      "styleUrls": ["./modal-wrapper.component.scss"],
      "styles": [],
      "templateUrl": ["./modal-wrapper.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "config",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "ModalConfig"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_intersectionObserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IntersectionObserver",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [121]
        },
        {
          "name": "_mutationObserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MutationObserver",
          "optional": false,
          "description": "",
          "line": 89,
          "modifierKind": [121]
        },
        {
          "name": "componentPropsInjector",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "delayedClose",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [121]
        },
        {
          "name": "delayedCloseTimeoutId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [121]
        },
        {
          "name": "destroy$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [121]
        },
        {
          "name": "didPresent",
          "defaultValue": "this.ionModalDidPresent.toPromise()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [143]
        },
        {
          "name": "elementToParentMap",
          "defaultValue": "{\n    'KIRBY-MODAL-FOOTER': () => this.elementRef.nativeElement,\n    'KIRBY-PAGE-TITLE': () => this.ionTitleElement.nativeElement,\n    'KIRBY-PAGE-PROGRESS': () => this.ionToolbarElement.nativeElement,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 437,
          "modifierKind": [121, 143]
        },
        {
          "name": "initialViewportHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 78,
          "modifierKind": [121]
        },
        {
          "name": "ionContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IonContent",
          "optional": false,
          "description": "",
          "line": 59,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonContent, {static: true}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionContentElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonContentElement>",
          "optional": false,
          "description": "",
          "line": 60,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonContent, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionHeaderElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonHeaderElement>",
          "optional": false,
          "description": "",
          "line": 63,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonHeader, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionModalDidPresent",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [121, 143]
        },
        {
          "name": "ionModalElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLIonModalElement",
          "optional": true,
          "description": "",
          "line": 80,
          "modifierKind": [121]
        },
        {
          "name": "ionModalWillDismiss",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 83,
          "modifierKind": [121, 143]
        },
        {
          "name": "ionTitleElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonTitleElement>",
          "optional": false,
          "description": "",
          "line": 69,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonTitle, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionToolbarElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonToolbarElement>",
          "optional": false,
          "description": "",
          "line": 66,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonToolbar, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "KEYBOARD_HIDE_DELAY_IN_MS",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [124, 143]
        },
        {
          "name": "keyboardVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [121]
        },
        {
          "name": "routerOutlet",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RouterOutlet",
          "optional": false,
          "description": "",
          "line": 72,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "RouterOutlet, {static: true}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "scrollY",
          "defaultValue": "Math.abs(this.windowRef.nativeWindow.scrollY)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "toolbarButtons",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLButtonElement[]",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [121]
        },
        {
          "name": "toolbarButtonsQuery",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef<HTMLButtonElement>>",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "ViewChildren",
              "stringifiedArguments": "ButtonComponent, {read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "VIEWPORT_RESIZE_DEBOUNCE_TIME",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [121, 143]
        },
        {
          "name": "viewportResize",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [121]
        },
        {
          "name": "viewportResize$",
          "defaultValue": "this.viewportResize\n    .asObservable()\n    .pipe(debounceTime(this.VIEWPORT_RESIZE_DEBOUNCE_TIME))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 86,
          "modifierKind": [121]
        },
        {
          "name": "viewportResized",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [121]
        },
        {
          "name": "willClose",
          "defaultValue": "this.ionModalWillDismiss.toPromise()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [143]
        },
        {
          "name": "willClose$",
          "defaultValue": "this.ionModalWillDismiss.pipe(first())",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 110
        }
      ],
      "methodsClass": [
        {
          "name": "_onKeyboardHide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 310,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:ionKeyboardDidHide'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keyboardWillHide'"
            }
          ]
        },
        {
          "name": "_onKeyboardShow",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 304,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:ionKeyboardDidShow', ['$event.detail.keyboardHeight']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keyboardWillShow', ['$event.keyboardHeight']"
            }
          ],
          "jsdoctags": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onWindowResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 393,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:resize'"
            }
          ]
        },
        {
          "name": "blurActiveElement",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 425,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "checkForEmbeddedElements",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "clearEmbeddedElements",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 443,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "close",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 267,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createEmbeddedElementsMutationObserver",
          "args": [],
          "optional": false,
          "returnType": "MutationObserver",
          "typeParameters": [],
          "line": 487,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "createModalWrapperIntersectionObserver",
          "args": [],
          "optional": false,
          "returnType": "IntersectionObserver",
          "typeParameters": [],
          "line": 512,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getEmbeddedComponentElement",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 450,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getEmbeddedFooterElement",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 456,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getKeyboardOverlap",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 339,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeModalRoute",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 164,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initializeResizeModalToModalWrapper",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initializeSizing",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "listenForIonModalDidPresent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 241,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "listenForIonModalWillDismiss",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 250,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "moveChild",
          "args": [
            {
              "name": "child",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "newParent",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 460,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "child",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "newParent",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "moveEmbeddedElements",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 229,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 536,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observeEmbeddedElements",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 480,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "observeHeaderResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 222,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "observeModalFullHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "observeViewportResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 402,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "onFocusChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 297,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:focus'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:focusout'"
            }
          ]
        },
        {
          "name": "onHeaderTouchStart",
          "args": [
            {
              "name": "event",
              "type": "TouchEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 376,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "TouchEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSiblingModalRouteActivated",
          "args": [
            {
              "name": "siblingModalRouteActivated$",
              "type": "Observable<ActivatedRoute>",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "siblingModalRouteActivated$",
              "type": "Observable<ActivatedRoute>",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onViewportResize",
          "args": [
            {
              "name": "entry",
              "type": "ResizeObserverEntry",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 408,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "entry",
              "type": "ResizeObserverEntry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "patchScrollElementSize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "removeChild",
          "args": [
            {
              "name": "child",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 474,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "child",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToBottom",
          "args": [
            {
              "name": "scrollDuration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 263,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "scrollDuration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToTop",
          "args": [
            {
              "name": "scrollDuration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 259,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "scrollDuration",
              "type": "KirbyAnimation.Duration",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setCssVar",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "property",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 347,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "property",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setKeyboardOverlap",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 359,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setKeyboardVisibility",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 330,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setViewportHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 397,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "toggleContentMaxHeight",
          "args": [
            {
              "name": "freeze",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 314,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "freeze",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleCssClass",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "klass",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "condition",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 353,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "klass",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "condition",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.drawer",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106,
          "type": "boolean"
        }
      ],
      "hostListeners": [
        {
          "name": "window:focus",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 297
        },
        {
          "name": "window:focusout",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 297
        },
        {
          "name": "window:ionKeyboardDidHide",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 310
        },
        {
          "name": "window:ionKeyboardDidShow",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.detail.keyboardHeight"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 304
        },
        {
          "name": "window:keyboardWillHide",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 310
        },
        {
          "name": "window:keyboardWillShow",
          "args": [
            {
              "name": "keyboardHeight",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.keyboardHeight"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 304
        },
        {
          "name": "window:resize",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 393
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  Renderer2,\n  RendererStyleFlags2,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { ActivatedRoute, RouterOutlet } from '@angular/router';\nimport { IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { debounceTime, first, takeUntil } from 'rxjs/operators';\n\nimport { DesignTokenHelper } from '@kirbydesign/core';\n\nimport { KirbyAnimation } from '../../../animation/kirby-animation';\nimport { PlatformService } from '../../../helpers/platform.service';\nimport { WindowRef } from '../../../types/window-ref';\nimport { ButtonComponent } from '../../button/button.component';\nimport { ResizeObserverService } from '../../shared/resize-observer/resize-observer.service';\nimport { ResizeObserverEntry } from '../../shared/resize-observer/types/resize-observer-entry';\nimport { Modal } from '../services/modal.interfaces';\n\nimport { ModalConfig } from './config/modal-config';\nimport { COMPONENT_PROPS } from './config/modal-config.helper';\n\n@Component({\n  selector: 'kirby-modal-wrapper',\n  templateUrl: './modal-wrapper.component.html',\n  styleUrls: ['./modal-wrapper.component.scss'],\n  providers: [{ provide: Modal, useExisting: ModalWrapperComponent }],\n})\nexport class ModalWrapperComponent implements Modal, AfterViewInit, OnInit, OnDestroy {\n  static readonly KEYBOARD_HIDE_DELAY_IN_MS = 100;\n\n  scrollY: number = Math.abs(this.windowRef.nativeWindow.scrollY);\n  private readonly VIEWPORT_RESIZE_DEBOUNCE_TIME = 100;\n\n  set scrollDisabled(disabled: boolean) {\n    this.ionContent.scrollY = !disabled;\n  }\n\n  @Input() config: ModalConfig;\n  componentPropsInjector: Injector;\n\n  @ViewChildren(ButtonComponent, { read: ElementRef }) private toolbarButtonsQuery: QueryList<\n    ElementRef<HTMLButtonElement>\n  >;\n  @ViewChild(IonContent, { static: true }) private ionContent: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef }) private ionContentElement: ElementRef<\n    HTMLIonContentElement\n  >;\n  @ViewChild(IonHeader, { static: true, read: ElementRef }) private ionHeaderElement: ElementRef<\n    HTMLIonHeaderElement\n  >;\n  @ViewChild(IonToolbar, { static: true, read: ElementRef }) private ionToolbarElement: ElementRef<\n    HTMLIonToolbarElement\n  >;\n  @ViewChild(IonTitle, { static: true, read: ElementRef }) private ionTitleElement: ElementRef<\n    HTMLIonTitleElement\n  >;\n  @ViewChild(RouterOutlet, { static: true }) private routerOutlet: RouterOutlet;\n\n  private keyboardVisible = false;\n  private toolbarButtons: HTMLButtonElement[] = [];\n  private delayedClose = () => {};\n  private delayedCloseTimeoutId;\n  private initialViewportHeight: number;\n  private viewportResized = false;\n  private ionModalElement?: HTMLIonModalElement;\n  private readonly ionModalDidPresent = new Subject<void>();\n  readonly didPresent = this.ionModalDidPresent.toPromise();\n  private readonly ionModalWillDismiss = new Subject<void>();\n  readonly willClose = this.ionModalWillDismiss.toPromise();\n  private viewportResize = new Subject<void>();\n  private viewportResize$ = this.viewportResize\n    .asObservable()\n    .pipe(debounceTime(this.VIEWPORT_RESIZE_DEBOUNCE_TIME));\n  private _mutationObserver: MutationObserver;\n  private get mutationObserver(): MutationObserver {\n    if (!this._mutationObserver) {\n      this._mutationObserver = this.createEmbeddedElementsMutationObserver();\n    }\n    return this._mutationObserver;\n  }\n  private _intersectionObserver: IntersectionObserver;\n  private get intersectionObserver(): IntersectionObserver {\n    if (!this._intersectionObserver) {\n      this._intersectionObserver = this.createModalWrapperIntersectionObserver();\n    }\n    return this._intersectionObserver;\n  }\n  private destroy$ = new Subject();\n\n  @HostBinding('class.drawer')\n  get _isDrawer() {\n    return this.config.flavor === 'drawer';\n  }\n\n  willClose$ = this.ionModalWillDismiss.pipe(first());\n\n  constructor(\n    private injector: Injector,\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n    private zone: NgZone,\n    private resizeObserverService: ResizeObserverService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private windowRef: WindowRef,\n    private platform: PlatformService\n  ) {\n    this.setViewportHeight();\n    this.observeViewportResize();\n  }\n\n  ngOnInit(): void {\n    this.ionModalElement = this.elementRef.nativeElement.closest('ion-modal');\n    this.initializeSizing();\n    this.initializeModalRoute();\n    this.listenForIonModalDidPresent();\n    this.listenForIonModalWillDismiss();\n    this.initializeResizeModalToModalWrapper();\n    this.componentPropsInjector = Injector.create({\n      providers: [{ provide: COMPONENT_PROPS, useValue: this.config.componentProps }],\n      parent: this.injector,\n    });\n  }\n\n  private initializeResizeModalToModalWrapper() {\n    if (this.config.flavor === 'drawer' && this.config.interactWithBackground) {\n      merge(this.ionModalDidPresent, this.viewportResize$)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => {\n          // wait for template to render\n          setTimeout(() => {\n            const domRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const document = this.windowRef.nativeWindow.document.documentElement;\n            const right = document.clientWidth - domRect.right;\n            this.renderer.setStyle(this.ionModalElement, 'top', `${domRect.top}px`);\n            this.renderer.setStyle(this.ionModalElement, 'left', `${domRect.left}px`);\n            this.renderer.setStyle(this.ionModalElement, 'right', `${right}px`);\n          });\n        });\n    }\n  }\n\n  private initializeSizing() {\n    if (this.config.size === 'full-height') return;\n    this.patchScrollElementSize();\n    this.observeHeaderResize();\n    this.observeModalFullHeight();\n  }\n\n  private initializeModalRoute() {\n    if (this.config.modalRoute) {\n      this.onSiblingModalRouteActivated(this.config.siblingModalRouteActivated$);\n      // Load component from modal-route inside router-outlet:\n      this.routerOutlet.activateWith(this.config.modalRoute, this.componentFactoryResolver);\n    }\n  }\n\n  private onSiblingModalRouteActivated(siblingModalRouteActivated$?: Observable<ActivatedRoute>) {\n    if (!siblingModalRouteActivated$) return;\n    siblingModalRouteActivated$.pipe(takeUntil(this.willClose$)).subscribe((route) => {\n      if (this.routerOutlet.isActivated) {\n        this.mutationObserver.disconnect();\n        this.routerOutlet.deactivate();\n        this.clearEmbeddedElements();\n      }\n      this.routerOutlet.activateWith(route, this.componentFactoryResolver);\n      this.checkForEmbeddedElements();\n    });\n  }\n\n  private patchScrollElementSize(): void {\n    const supportsCssShadowParts = 'part' in HTMLElement.prototype;\n    if (supportsCssShadowParts) return;\n    this.ionContent.getScrollElement().then((scrollElement) => {\n      this.renderer.setStyle(scrollElement, 'height', '100%');\n      this.renderer.setStyle(scrollElement, 'position', 'relative');\n      if (this.config.flavor === 'drawer') {\n        this.renderer.setStyle(\n          scrollElement,\n          'transition',\n          'padding-bottom ' + DesignTokenHelper.softKeyboardTransitionLeave\n        );\n      }\n    });\n  }\n\n  private observeModalFullHeight() {\n    const ionModalWrapper = this.elementRef.nativeElement.closest<HTMLElement>('.modal-wrapper');\n    if (!ionModalWrapper) return;\n    // Start observing when modal has finished animating:\n    this.didPresent.then(() => {\n      this.intersectionObserver.observe(ionModalWrapper);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.toolbarButtonsQuery) {\n      this.toolbarButtons = this.toolbarButtonsQuery.map((buttonRef) => buttonRef.nativeElement);\n    }\n    this.checkForEmbeddedElements();\n  }\n\n  private checkForEmbeddedElements() {\n    this.moveEmbeddedElements();\n    this.observeEmbeddedElements();\n  }\n\n  private observeHeaderResize() {\n    this.resizeObserverService.observe(this.ionHeaderElement.nativeElement, (entry) => {\n      const [property, pixelValue] = ['--header-height', `${entry.contentRect.height}px`];\n      this.setCssVar(this.elementRef.nativeElement, property, pixelValue);\n    });\n  }\n\n  private moveEmbeddedElements() {\n    const parentElement = this.getEmbeddedComponentElement();\n    if (parentElement) {\n      Object.entries(this.elementToParentMap).forEach(([tagName, getNewParent]) => {\n        const embeddedElement = parentElement.querySelector<HTMLElement>(tagName);\n        if (embeddedElement) {\n          this.moveChild(embeddedElement, getNewParent());\n        }\n      });\n    }\n  }\n\n  private listenForIonModalDidPresent() {\n    if (this.ionModalElement) {\n      this.ionModalElement.addEventListener('ionModalDidPresent', () => {\n        this.ionModalDidPresent.next();\n        this.ionModalDidPresent.complete();\n      });\n    }\n  }\n\n  private listenForIonModalWillDismiss() {\n    if (this.ionModalElement) {\n      this.ionModalElement.addEventListener('ionModalWillDismiss', () => {\n        this.ionModalWillDismiss.next();\n        this.ionModalWillDismiss.complete();\n      });\n    }\n  }\n\n  scrollToTop(scrollDuration?: KirbyAnimation.Duration) {\n    this.ionContent.scrollToTop(scrollDuration || 0);\n  }\n\n  scrollToBottom(scrollDuration?: KirbyAnimation.Duration) {\n    this.ionContent.scrollToBottom(scrollDuration || 0);\n  }\n\n  async close(data?: any): Promise<void> {\n    if (!this.ionModalElement) {\n      return;\n    }\n    if (!this.keyboardVisible || !this.viewportResized) {\n      // No keyboard visible or viewport not resized:\n      // Dismiss modal and return:\n      clearTimeout(this.delayedCloseTimeoutId);\n      await this.ionModalElement.dismiss(data);\n      return;\n    }\n\n    // Keyboard visible:\n    // Blur active element and wait for keyboard to hide,\n    // then dismiss modal and return:\n    this.blurActiveElement();\n    return new Promise<void>((resolve) => {\n      this.delayedClose = async () => {\n        await this.ionModalElement.dismiss(data);\n        resolve();\n      };\n      this.delayedCloseTimeoutId = setTimeout(\n        this.delayedClose,\n        ModalWrapperComponent.KEYBOARD_HIDE_DELAY_IN_MS\n      );\n    });\n  }\n\n  @HostListener('window:focus')\n  @HostListener('window:focusout')\n  onFocusChange() {\n    // This fixes an undesired scroll behaviour occurring on keyboard-tabbing backwards (with shift+tab):\n    this.windowRef.nativeWindow.scrollTo({ top: this.scrollY });\n  }\n\n  @HostListener('window:ionKeyboardDidShow', ['$event.detail.keyboardHeight'])\n  @HostListener('window:keyboardWillShow', ['$event.keyboardHeight'])\n  _onKeyboardShow(keyboardHeight: number) {\n    this.setKeyboardVisibility(keyboardHeight);\n  }\n\n  @HostListener('window:ionKeyboardDidHide')\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardHide() {\n    this.setKeyboardVisibility(0);\n  }\n\n  private toggleContentMaxHeight(freeze: boolean) {\n    const shouldToggleMaxHeight =\n      this.config.flavor === 'modal' && this.platform.isPhabletOrBigger();\n    if (!shouldToggleMaxHeight) return;\n    const style = 'max-height';\n    const contentElement = this.ionContentElement.nativeElement;\n    this.zone.run(() => {\n      if (freeze) {\n        const contentHeight = contentElement.offsetHeight;\n        this.renderer.setStyle(contentElement, style, `${contentHeight}px`);\n      } else {\n        this.renderer.removeStyle(contentElement, style);\n      }\n    });\n  }\n\n  private setKeyboardVisibility(keyboardHeight: number) {\n    const keyboardAlreadyVisible = keyboardHeight > 0 && this.keyboardVisible;\n    const keyboardAlreadyHidden = keyboardHeight === 0 && !this.keyboardVisible;\n    if (keyboardAlreadyVisible || keyboardAlreadyHidden) return;\n    this.keyboardVisible = keyboardHeight > 0;\n    this.toggleContentMaxHeight(this.keyboardVisible);\n    this.setKeyboardOverlap(keyboardHeight);\n  }\n\n  private getKeyboardOverlap(keyboardHeight: number, element: Element) {\n    if (keyboardHeight <= 0 || !element) return 0;\n    const distanceFromViewportBottomToElement = Math.floor(\n      this.windowRef.nativeWindow.innerHeight - element.getBoundingClientRect().bottom\n    );\n    return Math.max(keyboardHeight - distanceFromViewportBottomToElement, 0);\n  }\n\n  private setCssVar(element: Element, property: string, value: string) {\n    this.zone.run(() =>\n      this.renderer.setStyle(element, property, value, RendererStyleFlags2.DashCase)\n    );\n  }\n\n  private toggleCssClass(element: Element, klass: string, condition: boolean) {\n    this.zone.run(() =>\n      condition ? this.renderer.addClass(element, klass) : this.renderer.removeClass(element, klass)\n    );\n  }\n\n  private setKeyboardOverlap(keyboardHeight: number) {\n    this.toggleCssClass(this.elementRef.nativeElement, 'keyboard-visible', keyboardHeight > 0);\n    const keyboardOverlap = this.getKeyboardOverlap(keyboardHeight, this.elementRef.nativeElement);\n    let snapFooterToKeyboard = false;\n    const embeddedFooterElement = this.getEmbeddedFooterElement();\n    if (embeddedFooterElement) {\n      this.setCssVar(embeddedFooterElement, '--keyboard-offset', `${keyboardOverlap}px`);\n      snapFooterToKeyboard = embeddedFooterElement.classList.contains('snap-to-keyboard');\n    }\n\n    const contentElement = this.ionContentElement.nativeElement;\n    const contentKeyboardOffset = snapFooterToKeyboard\n      ? keyboardOverlap\n      : this.getKeyboardOverlap(keyboardHeight, contentElement);\n    this.setCssVar(contentElement, '--keyboard-offset', `${contentKeyboardOffset}px`);\n  }\n\n  onHeaderTouchStart(event: TouchEvent) {\n    if (this.keyboardVisible) {\n      const isToolbarButtonTouch = this.toolbarButtons.some((button) => {\n        return (\n          event.target instanceof HTMLElement &&\n          (event.target === button || button.contains(event.target))\n        );\n      });\n      // Prevent blur if event target is a toolbar button\n      // (to allow tap event to fire):\n      if (!isToolbarButtonTouch) {\n        this.blurActiveElement();\n      }\n    }\n  }\n\n  @HostListener('window:resize')\n  _onWindowResize() {\n    this.setViewportHeight();\n  }\n\n  private setViewportHeight() {\n    const vh = (this.windowRef.nativeWindow.innerHeight * 0.01).toFixed(2);\n    this.setCssVar(this.elementRef.nativeElement, '--vh', `${vh}px`);\n  }\n\n  private observeViewportResize() {\n    this.resizeObserverService.observe(this.windowRef.nativeWindow.document.body, (entry) =>\n      this.onViewportResize(entry)\n    );\n  }\n\n  private onViewportResize(entry: ResizeObserverEntry) {\n    if (!this.initialViewportHeight) {\n      // Initial observe callback, register initial height:\n      this.initialViewportHeight = entry.contentRect.height;\n      return;\n    }\n    this.viewportResized = entry.contentRect.height !== this.initialViewportHeight;\n    if (!this.viewportResized) {\n      // We are back to initial view port height, check for pending close func:\n      if (this.delayedCloseTimeoutId) {\n        clearTimeout(this.delayedCloseTimeoutId);\n        this.delayedClose();\n      }\n    }\n    this.viewportResize.next();\n  }\n\n  blurActiveElement() {\n    const BLUR_TARGET_SELECTOR = 'input, textarea';\n    if (this.keyboardVisible) {\n      if (\n        document.activeElement instanceof HTMLElement &&\n        document.activeElement.matches(BLUR_TARGET_SELECTOR)\n      ) {\n        document.activeElement.blur();\n      }\n    }\n  }\n\n  private readonly elementToParentMap: { [key: string]: () => HTMLElement } = {\n    'KIRBY-MODAL-FOOTER': () => this.elementRef.nativeElement,\n    'KIRBY-PAGE-TITLE': () => this.ionTitleElement.nativeElement,\n    'KIRBY-PAGE-PROGRESS': () => this.ionToolbarElement.nativeElement,\n  };\n\n  private clearEmbeddedElements() {\n    Object.entries(this.elementToParentMap).forEach(([tagName, getParent]) => {\n      const embeddedElement = getParent().querySelector<HTMLElement>(`:scope > ${tagName}`);\n      this.removeChild(embeddedElement);\n    });\n  }\n\n  private getEmbeddedComponentElement() {\n    return !!this.config.modalRoute\n      ? this.ionContentElement.nativeElement.lastElementChild\n      : this.ionContentElement.nativeElement.firstElementChild;\n  }\n\n  private getEmbeddedFooterElement() {\n    return this.elementRef.nativeElement.querySelector<HTMLElement>('kirby-modal-footer');\n  }\n\n  private moveChild(child: Element, newParent: Element) {\n    this.renderer.removeChild(child.parentElement, child);\n    this.renderer.appendChild(newParent, child);\n    if (child.tagName === 'KIRBY-MODAL-FOOTER') {\n      this.resizeObserverService.observe(child, (entry) => {\n        const [property, pixelValue] = [\n          '--footer-height',\n          `${Math.floor(entry.contentRect.height)}px`,\n        ];\n        this.setCssVar(this.elementRef.nativeElement, property, pixelValue);\n      });\n    }\n  }\n\n  private removeChild(child?: Element) {\n    if (!!child) {\n      this.renderer.removeChild(child.parentElement, child);\n    }\n  }\n\n  private observeEmbeddedElements() {\n    const parentElement = this.getEmbeddedComponentElement();\n    this.mutationObserver.observe(parentElement, {\n      childList: true, // Listen for addition or removal of child nodes\n    });\n  }\n\n  private createEmbeddedElementsMutationObserver(): MutationObserver {\n    const observedElements = Object.keys(this.elementToParentMap);\n    const callback = (mutations: MutationRecord[]) => {\n      const addedNodes = mutations\n        .filter((mutation) => mutation.type === 'childList') // Filter for mutation to the tree of nodes\n        .map((mutation) => {\n          // Only check for addedNodes as removal is handled by the Angular renderer:\n          return Array.from(mutation.addedNodes).filter((node) =>\n            observedElements.includes(node.nodeName)\n          );\n        });\n\n      const addedElements = Array.prototype\n        .concat(...addedNodes)\n        .filter((node): node is HTMLElement => node instanceof HTMLElement);\n\n      addedElements.forEach((addedElement) => {\n        const newParentElement = this.elementToParentMap[addedElement.nodeName]();\n        // Move embedded element out of content and append to new parent:\n        this.moveChild(addedElement, newParentElement);\n      });\n    };\n    return new MutationObserver(callback);\n  }\n\n  private createModalWrapperIntersectionObserver(): IntersectionObserver {\n    const callback: IntersectionObserverCallback = (entries) => {\n      const entry = entries[0];\n      const isTouchingViewport = entry.intersectionRatio < 1;\n      if (isTouchingViewport) {\n        this.renderer.addClass(entry.target, 'full-height');\n      } else {\n        this.renderer.removeClass(entry.target, 'full-height');\n      }\n    };\n\n    // Set explicit viewport root if within iframe:\n    const root = this.windowRef.nativeWindow.frameElement\n      ? (this.windowRef.nativeWindow.document as any) // Cast to `any` as Typescript lib.d.ts doesnt support Document type yet\n      : undefined;\n    const options: IntersectionObserverInit = {\n      rootMargin: '0px 0px -1px 0px', // `bottom: -1px` allows checking when the modal bottom is touching the viewport\n      root,\n      threshold: [0.99, 1],\n    };\n\n    return new IntersectionObserver(callback, options);\n  }\n\n  ngOnDestroy() {\n    if (this.routerOutlet.isActivated) {\n      this.routerOutlet.deactivate();\n    }\n    //clean up the observer\n    this.mutationObserver.disconnect();\n    delete this._mutationObserver;\n    this.intersectionObserver.disconnect();\n    delete this._intersectionObserver;\n    if (this.resizeObserverService) {\n      this.resizeObserverService.unobserve(this.windowRef.nativeWindow.document.body);\n      this.resizeObserverService.unobserve(this.ionHeaderElement.nativeElement);\n      this.resizeObserverService.unobserve(this.getEmbeddedFooterElement());\n    }\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n// Global modal styling can be found at scss/base/_ionic.scss\n\n@mixin contain-content() {\n  padding-top: 0;\n  position: relative;\n  contain: inherit;\n  min-height: Min(var(--min-height), calc(var(--vh100) - var(--kirby-modal-padding-top, 0px)));\n\n  ion-content {\n    contain: content;\n    max-height: calc(\n      var(--vh100) - var(--kirby-modal-padding-top, 0px) - var(--header-height) -\n        var(--footer-height)\n    );\n\n    &::part(scroll) {\n      height: '100%';\n      position: relative;\n    }\n  }\n\n  &.drawer {\n    ion-content::part(scroll) {\n      transition: padding-bottom $soft-keyboard-transition-leave;\n    }\n\n    &.keyboard-visible {\n      ion-content::part(scroll) {\n        transition: padding-bottom $soft-keyboard-transition-enter;\n      }\n    }\n  }\n}\n\n:host-context(ion-modal:not(.kirby-modal-full-height)) {\n  @include media('>=medium') {\n    @include contain-content();\n  }\n\n  &.drawer {\n    @include contain-content();\n  }\n}\n\n:host {\n  --vh100: var(--vh, 1vh) * 100; /// Fixes an issue with vh units on iOS Safari\n  --header-height: 0px;\n  --footer-height: 0px;\n\n  &.drawer {\n    // Prevent iOS safe-area padding-top on drawer flavor\n    // as this is already applied on the top-level modal itself\n    // in /scss/_global-styles.scss:\n    ion-header ion-toolbar:first-of-type {\n      padding-top: 0;\n    }\n  }\n}\n\n$toolbar-padding: size('s');\n\n@mixin phablet-toolbar-padding() {\n  $toolbar-top-spacing-total: size('m');\n  $toolbar-padding-top: $toolbar-top-spacing-total - $toolbar-padding;\n  @include media('>=medium') {\n    padding-top: $toolbar-padding-top;\n  }\n}\n\nion-header ion-toolbar {\n  --padding-start: #{$toolbar-padding};\n  --padding-end: #{$toolbar-padding};\n  --padding-bottom: #{$toolbar-padding};\n  --padding-top: #{$toolbar-padding};\n\n  --border-width: 0;\n  --background: transparent;\n  --color: var(--kirby-modal-color, #{get-color('black')});\n\n  button {\n    color: var(--color);\n  }\n\n  @include phablet-toolbar-padding();\n}\n\n// Ensure iOS safe-area padding-top on default/modal flavor\n// when opened on presenting element (gets .modal-card class):\n:host-context(ion-modal.modal-card:not(.kirby-drawer)) {\n  ion-header ion-toolbar:first-of-type {\n    padding-top: var(--kirby-safe-area-top, 0px);\n\n    @include phablet-toolbar-padding();\n  }\n}\n\nion-title {\n  box-sizing: border-box;\n  padding-inline-start: calc(48px + var(--padding-start));\n  padding-inline-end: calc(48px + var(--padding-end));\n  font-size: font-size('l');\n  font-weight: font-weight('bold');\n}\n\n:host(.drawer) ion-title {\n  font-size: font-size('m');\n}\n\nion-content {\n  --background: transparent;\n  --color: var(--kirby-modal-color, #{get-color('black')});\n  display: flex;\n  flex-direction: column;\n\n  @include slotted('*') {\n    box-sizing: border-box;\n    display: block;\n  }\n\n  --padding-top: #{size('m')};\n  --padding-bottom: #{size('m')};\n  --padding-start: #{size('s')};\n  --padding-end: #{size('s')};\n}\n\n// Ensure padding-rules are not merged with other media query,\n// as this rule has to come AFTER the default mobile-first rule in order to override:\n/* clean-css ignore:start */\n@include media('>=medium') {\n  ion-content {\n    --padding-start: #{size('xxxl')};\n    --padding-end: #{size('xxxl')};\n  }\n}\n/* clean-css ignore:end */\n",
          "styleUrl": "./modal-wrapper.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 110,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "resizeObserverService",
            "type": "ResizeObserverService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "componentFactoryResolver",
            "type": "ComponentFactoryResolver",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platform",
            "type": "PlatformService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["Modal", "AfterViewInit", "OnInit", "OnDestroy"],
      "accessors": {
        "scrollDisabled": {
          "name": "scrollDisabled",
          "setSignature": {
            "name": "scrollDisabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "disabled",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "disabled",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "mutationObserver": {
          "name": "mutationObserver",
          "getSignature": {
            "name": "mutationObserver",
            "type": "",
            "returnType": "MutationObserver",
            "line": 90
          }
        },
        "intersectionObserver": {
          "name": "intersectionObserver",
          "getSignature": {
            "name": "intersectionObserver",
            "type": "",
            "returnType": "IntersectionObserver",
            "line": 97
          }
        },
        "_isDrawer": {
          "name": "_isDrawer",
          "getSignature": {
            "name": "_isDrawer",
            "type": "",
            "returnType": "",
            "line": 106
          }
        }
      },
      "templateData": "<ion-header (touchstart)=\"onHeaderTouchStart($event)\">\n  <ion-toolbar>\n    <ion-title>{{ config.title }}</ion-title>\n    <ion-buttons slot=\"start\" *ngIf=\"config.flavor === 'drawer'\">\n      <ng-container *ngTemplateOutlet=\"closeButton; context: { icon: 'arrow-down' }\"></ng-container>\n    </ion-buttons>\n    <ion-buttons slot=\"end\" *ngIf=\"config.flavor === 'modal'\">\n      <ng-container *ngTemplateOutlet=\"closeButton; context: { icon: 'close' }\"></ng-container>\n    </ion-buttons>\n    <ion-buttons slot=\"end\" *ngIf=\"config.flavor === 'drawer' && config.drawerSupplementaryAction\">\n      <ng-container\n        *ngTemplateOutlet=\"supplementaryButton; context: { btn: config.drawerSupplementaryAction }\"\n      ></ng-container>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [scrollEvents]=\"true\">\n  <ng-container\n    *ngComponentOutlet=\"config.component; injector: componentPropsInjector\"\n  ></ng-container>\n  <router-outlet\n    name=\"kirbyModalWrapperOutlet\"\n    [style.visibility]=\"config.modalRoute ? 'visible' : 'hidden'\"\n  ></router-outlet>\n</ion-content>\n\n<ng-template #closeButton let-icon=\"icon\">\n  <button kirby-button attentionLevel=\"4\" size=\"sm\" (click)=\"close()\">\n    <kirby-icon [name]=\"icon\"></kirby-icon>\n  </button>\n</ng-template>\n\n<ng-template #supplementaryButton let-btn=\"btn\">\n  <button kirby-button attentionLevel=\"2\" size=\"sm\" (click)=\"btn.action($event)\">\n    <kirby-icon [name]=\"btn.iconName\"></kirby-icon>\n  </button>\n</ng-template>\n"
    },
    {
      "name": "PageActionsComponent",
      "id": "component-PageActionsComponent-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page-actions",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content select=\"button[kirby-button]\"></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page",
      "styleUrls": ["./page.component.scss"],
      "styles": [],
      "templateUrl": ["./page.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "defaultBackHref",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 141,
          "type": "string"
        },
        {
          "name": "hideBackButton",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 142,
          "type": "boolean"
        },
        {
          "name": "tabBarBottomHidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 150,
          "type": "boolean"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 138,
          "type": "string"
        },
        {
          "name": "titleAlignment",
          "defaultValue": "'left'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 140,
          "type": "\"left\" | \"center\" | \"right\""
        },
        {
          "name": "titleMaxLines",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 143,
          "type": "number"
        },
        {
          "name": "toolbarTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 139,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "enter",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 158,
          "type": "EventEmitter"
        },
        {
          "name": "leave",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 159,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_tabBarBottomHidden",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 145,
          "modifierKind": [121]
        },
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IonContent",
          "optional": false,
          "description": "",
          "line": 161,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonContent, {static: true}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "customActions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<PageActionsDirective>",
          "optional": false,
          "description": "",
          "line": 181,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "PageActionsDirective"
            }
          ]
        },
        {
          "name": "customContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<PageContentDirective>",
          "optional": false,
          "description": "",
          "line": 183,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "PageContentDirective"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "customContentTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 194
        },
        {
          "name": "customTitleTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 179,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "PageTitleDirective, {static: false, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "customToolbarTitleTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 177,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "PageToolbarTitleDirective, {static: false, read: TemplateRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "fitHeadingConfig",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FitHeadingConfig",
          "optional": false,
          "description": "",
          "line": 191
        },
        {
          "name": "fixedActionsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 198
        },
        {
          "name": "fixedContentTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 196
        },
        {
          "name": "hasActionsInPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 186
        },
        {
          "name": "hasEntered",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 201,
          "modifierKind": [121]
        },
        {
          "name": "hasPageTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 185
        },
        {
          "name": "ionContentElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonContentElement>",
          "optional": false,
          "description": "",
          "line": 163,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonContent, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionFooterElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonFooterElement>",
          "optional": false,
          "description": "",
          "line": 167,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonFooter, {static: true, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "ionHeaderElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonHeaderElement>",
          "optional": false,
          "description": "",
          "line": 165,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonHeader, {static: true, read: ElementRef}"
            }
          ]
        },
        {
          "name": "navigationEnd$",
          "defaultValue": "this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<RouterEvent>",
          "optional": false,
          "description": "",
          "line": 209,
          "modifierKind": [121]
        },
        {
          "name": "navigationStart$",
          "defaultValue": "this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<RouterEvent>",
          "optional": false,
          "description": "",
          "line": 204,
          "modifierKind": [121]
        },
        {
          "name": "ngOnDestroy$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 203,
          "modifierKind": [121]
        },
        {
          "name": "pageActionsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 195
        },
        {
          "name": "pageTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 170,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'pageTitle', {static: false, read: ElementRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "pageTitleIntersectionObserverRef",
          "defaultValue": "this.pageTitleIntersectionObserver()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IntersectionObserver",
          "optional": false,
          "description": "",
          "line": 199,
          "modifierKind": [121]
        },
        {
          "name": "simpleTitleTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 173,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'simpleTitleTemplate', {static: true, read: TemplateRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "simpleToolbarTitleTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 175,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'simpleToolbarTitleTemplate', {static: true, read: TemplateRef}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "stickyActionsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 197
        },
        {
          "name": "toolbarFixedActionsVisible",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 188
        },
        {
          "name": "toolbarStickyActionsVisible",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 189
        },
        {
          "name": "toolbarTitleTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 193
        },
        {
          "name": "toolbarTitleVisible",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 187
        },
        {
          "name": "urls",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 200,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "_onKeyboardWillHide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 388,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keyboardWillHide'"
            }
          ]
        },
        {
          "name": "_onKeyboardWillShow",
          "args": [
            {
              "name": "info",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 378,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keyboardWillShow', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "info",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeActions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 326,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initializeContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 341,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initializeTitle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 303,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 259,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 237,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 228,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 271,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 224,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onEnter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 281,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "onLeave",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 291,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "pageTitleIntersectionObserver",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 359,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "removeWrapper",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 351,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:keyboardWillHide",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 388
        },
        {
          "name": "window:keyboardWillShow",
          "args": [
            {
              "name": "info",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 378
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n/*\n * Page Header\n */\nion-header,\nion-toolbar {\n  --background: #{get-color('background-color')};\n  margin: 0 auto;\n\n  @include media('>=large') {\n    @include not-touch {\n      max-width: 768px;\n    }\n  }\n}\n\nion-toolbar {\n  --border-width: 0 !important;\n  --padding-start: #{size('xxxs')};\n  --padding-end: #{size('xxxs')};\n  --padding-top: 0;\n  --padding-bottom: 0;\n\n  /*\n  * This overrides Ionic's default ios styling for the position of secondary action buttons which are to the left of content: https://ionicframework.com/docs/api/toolbar#buttons\n  * We would like the seconday actions to be to the far right after primary actions (usually as a falafel):\n  */\n  ion-buttons[slot='secondary'] {\n    order: 6;\n  }\n\n  ion-title {\n    .toolbar-title {\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      pointer-events: auto;\n      overflow: hidden;\n\n      @include slotted('*') {\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        pointer-events: auto;\n        overflow: hidden;\n      }\n    }\n  }\n}\n\n.hide {\n  visibility: hidden;\n  opacity: 0;\n  transition: opacity 100ms linear;\n\n  &.fade-in {\n    visibility: inherit;\n    opacity: 1;\n  }\n}\n\nion-title {\n  box-sizing: border-box;\n  font-size: font-size('n');\n  font-weight: font-weight('normal');\n}\n\nion-back-button {\n  --color: #{get-color('black')};\n  --icon-font-size: 24px;\n  height: $fat-finger-size;\n  width: $fat-finger-size;\n}\n\n/*\n * Page Title\n */\n.page-title {\n  margin-left: size('s');\n  margin-top: size('xxs');\n  margin-bottom: var(--kirby-page-title-margin-bottom, #{size('xl')});\n\n  &.has-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n\n  &.text-center {\n    text-align: center;\n    margin-left: 0;\n  }\n\n  &.text-right {\n    text-align: right;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0;\n  }\n}\n\n/*\n * Page Content\n */\nion-content {\n  --padding-start: var(--page-content-padding-start, #{size('s')});\n  --padding-end: var(--page-content-padding-end, #{size('s')});\n  --background: #{get-color('background-color')};\n\n  .content-inner {\n    max-width: var(--page-content-max-width, $page-content-max-width);\n    margin: 0 auto;\n    padding-bottom: size('xl');\n  }\n\n  /*\n  * Fixed content\n  */\n  .fixed-content {\n    width: 100%;\n    position: absolute;\n    bottom: 0;\n    .content-inner {\n      position: relative;\n    }\n  }\n}\n",
          "styleUrl": "./page.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "tabsComponent",
            "type": "TabsComponent",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 212,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "windowRef",
            "type": "WindowRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "modalNavigationService",
            "type": "ModalNavigationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsComponent",
            "type": "TabsComponent",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy", "AfterViewInit", "AfterContentChecked", "OnChanges"],
      "accessors": {
        "tabBarBottomHidden": {
          "name": "tabBarBottomHidden",
          "setSignature": {
            "name": "tabBarBottomHidden",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 150,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "tabBarBottomHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 146
          }
        }
      },
      "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button\n        text=\"\"\n        [defaultHref]=\"defaultBackHref\"\n        icon=\"assets/kirby/icons/svg/arrow-back.svg\"\n        [style.visibility]=\"hideBackButton ? 'hidden' : null\"\n      ></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      <div class=\"toolbar-title hide\" [class.fade-in]=\"toolbarTitleVisible\">\n        <ng-container *ngTemplateOutlet=\"toolbarTitleTemplate\"></ng-container>\n      </div>\n    </ion-title>\n    <ion-buttons\n      class=\"hide\"\n      slot=\"primary\"\n      [class.fade-in]=\"toolbarStickyActionsVisible && stickyActionsTemplate\"\n    >\n      <ng-container *ngTemplateOutlet=\"stickyActionsTemplate\"></ng-container>\n    </ion-buttons>\n    <ion-buttons\n      class=\"hide\"\n      slot=\"secondary\"\n      [class.fade-in]=\"toolbarFixedActionsVisible && fixedActionsTemplate\"\n    >\n      <ng-container *ngTemplateOutlet=\"fixedActionsTemplate\"></ng-container>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content scrollEvents=\"true\" forceOverscroll=\"false\">\n  <div class=\"content-inner\">\n    <div\n      class=\"page-title\"\n      #pageTitle\n      *ngIf=\"hasPageTitle\"\n      [class.has-actions]=\"hasActionsInPage\"\n      [ngClass]=\"{\n        'text-center': titleAlignment === 'center',\n        'text-right': titleAlignment === 'right'\n      }\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"customTitleTemplate || defaultPageTitleTemplate\"\n      ></ng-container>\n      <ng-container\n        *ngTemplateOutlet=\"pageActionsTemplate || defaultPageActionsTemplate\"\n      ></ng-container>\n    </div>\n    <!-- Content -->\n    <ng-container\n      *ngTemplateOutlet=\"customContentTemplate || defaultContentTemplate\"\n    ></ng-container>\n  </div>\n\n  <div slot=\"fixed\" class=\"fixed-content\" *ngIf=\"fixedContentTemplate\">\n    <div class=\"content-inner\">\n      <ng-container *ngTemplateOutlet=\"fixedContentTemplate\"></ng-container>\n    </div>\n  </div>\n</ion-content>\n\n<ion-footer>\n  <ng-content select=\"kirby-page-footer\"></ng-content>\n</ion-footer>\n\n<ng-template #defaultPageTitleTemplate>\n  <h1 [kirbyFitHeading]=\"fitHeadingConfig\">\n    <ng-container *ngTemplateOutlet=\"simpleTitleTemplate\"></ng-container>\n  </h1>\n</ng-template>\n\n<ng-template #defaultPageActionsTemplate>\n  <ng-content select=\"kirby-page-actions\"></ng-content>\n</ng-template>\n\n<ng-template #defaultContentTemplate>\n  <ng-content select=\"kirby-page-content\"></ng-content>\n</ng-template>\n\n<ng-template #simpleTitleTemplate>{{ title }}</ng-template>\n<ng-template #simpleToolbarTitleTemplate>{{ toolbarTitle }}</ng-template>\n"
    },
    {
      "name": "PageContentComponent",
      "id": "component-PageContentComponent-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page-content",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "PageFooterComponent",
      "id": "component-PageFooterComponent-5b70b558c7c0aa08c2222e5c0c4e4de3",
      "file": "libs/designsystem/src/lib/components/page/page-footer/page-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page-footer",
      "styleUrls": ["./page-footer.component.scss"],
      "styles": [],
      "templateUrl": ["./page-footer.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "hasPadding",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\n\nimport { PageComponent } from '../page.component';\n\n@Component({\n  selector: 'kirby-page-footer',\n  templateUrl: './page-footer.component.html',\n  styleUrls: ['./page-footer.component.scss'],\n})\nexport class PageFooterComponent implements OnDestroy {\n  @Input()\n  hasPadding: boolean = true;\n\n  constructor(\n    @Optional() @SkipSelf() private pageComponent: PageComponent,\n    private hostElement: ElementRef,\n    private renderer: Renderer2\n  ) {\n    if (!pageComponent) {\n      throw new Error('Page footer must reside inside of a Kirby page');\n    }\n  }\n\n  close() {\n    this.pageComponent.tabBarBottomHidden = false;\n    this.renderer.removeChild(\n      this.hostElement.nativeElement.parentElement,\n      this.hostElement.nativeElement,\n      true\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.pageComponent.tabBarBottomHidden = false;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$padding-horizontal: size('s');\n$padding-vertical: size('xxs');\n\n:host {\n  display: block;\n  background-color: get-color('white');\n\n  .wrapper {\n    position: relative;\n    max-width: var(--page-content-max-width, $page-content-max-width);\n    margin: 0 auto;\n    padding-bottom: var(--kirby-page-footer-safe-area-bottom, var(--kirby-safe-area-bottom));\n\n    &.padding {\n      padding: $padding-vertical $padding-horizontal;\n      padding-bottom: calc(\n        #{$padding-vertical} + var(--kirby-page-footer-safe-area-bottom, var(--kirby-safe-area-bottom))\n      );\n    }\n  }\n}\n",
          "styleUrl": "./page-footer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "pageComponent",
            "type": "PageComponent",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "pageComponent",
            "type": "PageComponent",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "templateData": "<div class=\"wrapper\" [class.padding]=\"hasPadding\">\n  <ng-content></ng-content>\n</div>\n"
    },
    {
      "name": "PageProgressComponent",
      "id": "component-PageProgressComponent-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page-progress",
      "styleUrls": [],
      "styles": [":host {display: flex}"],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "slot",
          "defaultValue": "'start'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'attr.slot'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.slot",
          "defaultValue": "'start'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "string"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ":host {display: flex}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalWrapper",
            "type": "ModalWrapperComponent",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 95,
        "jsdoctags": [
          {
            "name": "modalWrapper",
            "type": "ModalWrapperComponent",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"]
    },
    {
      "name": "PageTitleComponent",
      "id": "component-PageTitleComponent-49a70970be3cb6011580b52adb80c701",
      "file": "libs/designsystem/src/lib/components/page/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-page-title",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router, RouterEvent } from '@angular/router';\nimport { IonContent, IonFooter, IonHeader } from '@ionic/angular';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { KirbyAnimation } from '../../animation/kirby-animation';\nimport { FitHeadingConfig } from '../../directives/fit-heading/fit-heading.directive';\nimport { WindowRef } from '../../types/window-ref';\nimport { ModalWrapperComponent } from '../modal/modal-wrapper/modal-wrapper.component';\nimport { ModalNavigationService } from '../modal/services/modal-navigation.service';\nimport { selectedTabClickEvent } from '../tabs/tab-button/tab-button.events';\nimport { TabsComponent } from '../tabs/tabs.component';\n\ntype stickyConfig = { sticky: boolean };\ntype fixedConfig = { fixed: boolean };\n\n@Directive({\n  selector: '[kirbyPageTitle]',\n})\nexport class PageTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageToolbarTitle]',\n})\nexport class PageToolbarTitleDirective {}\n\n@Directive({\n  selector: '[kirbyPageActions]',\n})\nexport class PageActionsDirective {\n  @Input('kirbyPageActions') config: stickyConfig | fixedConfig;\n  private readonly stickyDefault = true;\n  private readonly fixedDefault = false;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isSticky(): boolean {\n    return this.config ? (this.config as stickyConfig).sticky : this.stickyDefault;\n  }\n\n  get isFixed(): boolean {\n    return this.config ? (this.config as fixedConfig).fixed : this.fixedDefault;\n  }\n}\n\n@Directive({\n  selector: '[kirbyPageContent]',\n})\nexport class PageContentDirective {\n  @Input('kirbyPageContent') config: fixedConfig;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  get isFixed(): boolean {\n    return this.config && this.config.fixed;\n  }\n}\n\n@Component({\n  selector: 'kirby-page-progress',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [':host {display: flex}'],\n})\nexport class PageProgressComponent implements OnInit {\n  // TODO: Find alternative implementation, which aligns with future page configuration / consumption\n  // This implementation was chosen over expanding `moveChild` method in component wrapper with yet another scenario\n  @HostBinding('attr.slot') slot = 'start';\n\n  constructor(@Optional() @SkipSelf() private modalWrapper: ModalWrapperComponent) {}\n\n  ngOnInit(): void {\n    if (this.modalWrapper && this.modalWrapper.config.flavor === 'drawer') {\n      this.slot = 'end';\n    }\n  }\n}\n\n@Component({\n  selector: 'kirby-page-title',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageTitleComponent {}\n\n@Component({\n  selector: 'kirby-page-content',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class PageContentComponent {}\n\n@Component({\n  selector: 'kirby-page-actions',\n  template: `\n    <ng-content select=\"button[kirby-button]\"></ng-content>\n  `,\n})\nexport class PageActionsComponent {}\n\n@Component({\n  selector: 'kirby-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterContentChecked, OnChanges {\n  @Input() title: string;\n  @Input() toolbarTitle: string;\n  @Input() titleAlignment: 'left' | 'center' | 'right' = 'left';\n  @Input() defaultBackHref: string;\n  @Input() hideBackButton: boolean;\n  @Input() titleMaxLines: number;\n\n  private _tabBarBottomHidden: boolean;\n  public get tabBarBottomHidden(): boolean {\n    return this._tabBarBottomHidden;\n  }\n  @Input()\n  public set tabBarBottomHidden(value: boolean) {\n    if (this.tabsComponent) {\n      // as we are setting a class on tabs, we need this to happen in a separate cd cycle\n      setTimeout(() => (this.tabsComponent.tabBarBottomHidden = value));\n    }\n    this._tabBarBottomHidden = value;\n  }\n\n  @Output() enter = new EventEmitter<void>();\n  @Output() leave = new EventEmitter<void>();\n\n  @ViewChild(IonContent, { static: true }) private content: IonContent;\n  @ViewChild(IonContent, { static: true, read: ElementRef })\n  private ionContentElement: ElementRef<HTMLIonContentElement>;\n  @ViewChild(IonHeader, { static: true, read: ElementRef })\n  ionHeaderElement: ElementRef<HTMLIonHeaderElement>;\n  @ViewChild(IonFooter, { static: true, read: ElementRef })\n  private ionFooterElement: ElementRef<HTMLIonFooterElement>;\n\n  @ViewChild('pageTitle', { static: false, read: ElementRef })\n  private pageTitle: ElementRef;\n\n  @ViewChild('simpleTitleTemplate', { static: true, read: TemplateRef })\n  private simpleTitleTemplate: TemplateRef<any>;\n  @ViewChild('simpleToolbarTitleTemplate', { static: true, read: TemplateRef })\n  private simpleToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageToolbarTitleDirective, { static: false, read: TemplateRef })\n  private customToolbarTitleTemplate: TemplateRef<any>;\n  @ContentChild(PageTitleDirective, { static: false, read: TemplateRef })\n  customTitleTemplate: TemplateRef<any>;\n  @ContentChildren(PageActionsDirective)\n  customActions: QueryList<PageActionsDirective>;\n  @ContentChildren(PageContentDirective)\n  private customContent: QueryList<PageContentDirective>;\n\n  hasPageTitle: boolean;\n  hasActionsInPage: boolean;\n  toolbarTitleVisible: boolean;\n  toolbarFixedActionsVisible: boolean;\n  toolbarStickyActionsVisible: boolean;\n\n  fitHeadingConfig: FitHeadingConfig;\n\n  toolbarTitleTemplate: TemplateRef<any>;\n  customContentTemplate: TemplateRef<any>;\n  pageActionsTemplate: TemplateRef<any>;\n  fixedContentTemplate: TemplateRef<any>;\n  stickyActionsTemplate: TemplateRef<any>;\n  fixedActionsTemplate: TemplateRef<any>;\n  private pageTitleIntersectionObserverRef: IntersectionObserver = this.pageTitleIntersectionObserver();\n  private urls: string[] = [];\n  private hasEntered: boolean;\n\n  private ngOnDestroy$ = new Subject();\n  private navigationStart$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationStart)\n  );\n\n  private navigationEnd$: Observable<RouterEvent> = this.router.events.pipe(\n    takeUntil(this.ngOnDestroy$),\n    filter((event: RouterEvent) => event instanceof NavigationEnd)\n  );\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private windowRef: WindowRef,\n    private modalNavigationService: ModalNavigationService,\n    @Optional() @SkipSelf() private tabsComponent: TabsComponent\n  ) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.titleMaxLines) {\n      this.fitHeadingConfig = {\n        ...this.fitHeadingConfig,\n        maxLines: changes.titleMaxLines.currentValue,\n      };\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.navigationStart$.subscribe((event: NavigationStart) => {\n      if (\n        !this.urls.includes(event.url) &&\n        !this.modalNavigationService.isModalRoute(event.url) &&\n        !this.modalNavigationService.isModalRoute(this.router.url)\n      ) {\n        this.onLeave();\n      }\n    });\n\n    this.navigationEnd$.subscribe((event: NavigationEnd) => {\n      if (this.urls.includes(event.urlAfterRedirects)) {\n        this.onEnter();\n      }\n    });\n\n    this.windowRef.nativeWindow.addEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    if (!this.urls.includes(this.router.url)) {\n      this.urls.push(this.router.url);\n      this.onEnter();\n    }\n\n    this.initializeTitle();\n    this.initializeActions();\n    this.initializeContent();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.ngOnDestroy$.next();\n    this.ngOnDestroy$.complete();\n\n    this.pageTitleIntersectionObserverRef.disconnect();\n    this.windowRef.nativeWindow.removeEventListener(selectedTabClickEvent, () => {\n      this.content.scrollToTop(KirbyAnimation.Duration.LONG);\n    });\n  }\n\n  private onEnter() {\n    if (this.hasEntered) return;\n    this.hasEntered = true;\n\n    this.enter.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n    }\n  }\n\n  private onLeave() {\n    this.leave.emit();\n    if (this.pageTitle) {\n      this.pageTitleIntersectionObserverRef.unobserve(this.pageTitle.nativeElement);\n    }\n    this.hasEntered = false;\n\n    if (this.tabBarBottomHidden && this.tabsComponent) {\n      this.tabsComponent.tabBarBottomHidden = false;\n    }\n  }\n\n  private initializeTitle() {\n    // Ensures initializeTitle() won't run, if already initialized\n    if (this.hasPageTitle) return;\n\n    this.hasPageTitle = this.title !== undefined || !!this.customTitleTemplate;\n    this.toolbarTitleVisible = !this.hasPageTitle;\n\n    if (this.hasPageTitle) {\n      setTimeout(() => {\n        this.pageTitleIntersectionObserverRef.observe(this.pageTitle.nativeElement);\n      });\n    }\n\n    const defaultTitleTemplate = this.customTitleTemplate || this.simpleTitleTemplate;\n    // tslint:disable:prettier\n    // prettier-ignore\n    this.toolbarTitleTemplate = this.customToolbarTitleTemplate\n      ? this.customToolbarTitleTemplate\n      : typeof this.toolbarTitle === 'string'\n        ? this.simpleToolbarTitleTemplate\n        : defaultTitleTemplate;\n  }\n\n  private initializeActions() {\n    this.customActions.forEach((pageAction) => {\n      if (pageAction.isFixed) {\n        this.fixedActionsTemplate = pageAction.template;\n        this.toolbarFixedActionsVisible = true;\n      } else {\n        this.pageActionsTemplate = pageAction.template;\n        if (pageAction.isSticky) {\n          this.stickyActionsTemplate = pageAction.template;\n        }\n      }\n    });\n    this.hasActionsInPage = !!this.pageActionsTemplate;\n  }\n\n  private initializeContent() {\n    this.customContent.forEach((content) => {\n      if (content.isFixed) {\n        this.fixedContentTemplate = content.template;\n      } else {\n        this.customContentTemplate = content.template;\n      }\n    });\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, this.ionHeaderElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionContentElement.nativeElement);\n    this.renderer.appendChild(parent, this.ionFooterElement.nativeElement);\n  }\n\n  private pageTitleIntersectionObserver() {\n    const options = {\n      rootMargin: '0px',\n    };\n\n    let initialized = false;\n    const callback = (entries) => {\n      if (initialized) {\n        this.toolbarTitleVisible = !entries[0].isIntersecting;\n        this.toolbarStickyActionsVisible = !entries[0].isIntersecting;\n        this.changeDetectorRef.detectChanges();\n      } else {\n        initialized = true;\n      }\n    };\n    return new IntersectionObserver(callback, options);\n  }\n\n  @HostListener('window:keyboardWillShow', ['$event'])\n  _onKeyboardWillShow(info?: { keyboardHeight: number }) {\n    if (info && info.keyboardHeight) {\n      this.ionContentElement.nativeElement.style.setProperty(\n        '--keyboard-offset',\n        `${info.keyboardHeight}px`\n      );\n    }\n  }\n\n  @HostListener('window:keyboardWillHide')\n  _onKeyboardWillHide() {\n    this.ionContentElement.nativeElement.style.setProperty('--keyboard-offset', '0px');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "PopoverComponent",
      "id": "component-PopoverComponent-9e58dbe02be4322e4919d3b81f494120",
      "file": "libs/designsystem/src/lib/components/popover/popover.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-popover",
      "styleUrls": ["./popover.component.scss"],
      "styles": [],
      "template": "<div #wrapper class=\"wrapper\"><ng-content></ng-content></div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "popout",
          "defaultValue": "HorizontalDirection.right",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "HorizontalDirection"
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "HTMLElement | ElementRef<HTMLElement>"
        }
      ],
      "outputsClass": [
        {
          "name": "willHide",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "document",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [121]
        },
        {
          "name": "isFirstToLockScroll",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [121]
        },
        {
          "name": "isShowing",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [121]
        },
        {
          "name": "POPOVER_BODY_PADDING",
          "defaultValue": "12",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [121, 143]
        },
        {
          "name": "preventScrollEventListenerOptions",
          "defaultValue": "{\n    passive: false,\n  } as EventListenerOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [121, 143]
        },
        {
          "name": "wrapperElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLDivElement>",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wrapper', {static: true, read: ElementRef}"
            }
          ]
        },
        {
          "name": "zIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "_backdropClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            }
          ]
        },
        {
          "name": "_onWindowResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:resize'"
            }
          ]
        },
        {
          "name": "hide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "placePopoverAboveClosestModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "positionHorizontally",
          "args": [
            {
              "name": "viewPort",
              "type": "Window",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "wrapperElement",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "targetDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "wrapperDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "viewPort",
              "type": "Window",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "wrapperElement",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "targetDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "wrapperDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "positionVertically",
          "args": [
            {
              "name": "viewPort",
              "type": "Window",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "wrapperElement",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "targetDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "wrapperDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 192,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "viewPort",
              "type": "Window",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "wrapperElement",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "targetDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "wrapperDimensions",
              "type": "DOMRect",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "positionWrapper",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "preventEvent",
          "args": [
            {
              "name": "event",
              "type": "TouchEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "event",
              "type": "TouchEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "preventScroll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "releaseScroll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "show",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62
        },
        {
          "name": "window:resize",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\n\nimport { DesignTokenHelper } from '../../helpers';\n\nexport enum HorizontalDirection {\n  right = 'right',\n  left = 'left',\n}\n\n@Component({\n  selector: 'kirby-popover',\n  template: `\n    <div #wrapper class=\"wrapper\"><ng-content></ng-content></div>\n  `,\n  styleUrls: ['./popover.component.scss'],\n})\nexport class PopoverComponent implements AfterViewInit, OnDestroy {\n  // removeEventListener same instance of event handler & options\n  private readonly preventScrollEventListenerOptions = {\n    passive: false,\n  } as EventListenerOptions;\n\n  private readonly POPOVER_BODY_PADDING = 12;\n\n  private isShowing: boolean = false;\n  private isFirstToLockScroll: boolean;\n  private zIndex: number;\n  private document: Document;\n\n  @ViewChild('wrapper', { static: true, read: ElementRef })\n  wrapperElement: ElementRef<HTMLDivElement>;\n\n  @Input()\n  popout: HorizontalDirection = HorizontalDirection.right;\n\n  @Input()\n  target: HTMLElement | ElementRef<HTMLElement>;\n\n  @Output()\n  willHide = new EventEmitter<void>();\n\n  private get targetElement(): HTMLElement {\n    if (this.target instanceof ElementRef) {\n      return this.target.nativeElement;\n    } else {\n      return this.target;\n    }\n  }\n\n  @HostListener('click')\n  _backdropClick() {\n    this.willHide.emit();\n    this.hide();\n  }\n\n  @HostListener('window:resize')\n  _onWindowResize() {\n    if (this.isShowing) {\n      this.willHide.emit();\n      this.hide();\n    }\n  }\n\n  constructor(private elementRef: ElementRef<HTMLElement>, private renderer: Renderer2) {\n    this.document = elementRef.nativeElement.ownerDocument;\n  }\n\n  ngAfterViewInit(): void {\n    this.placePopoverAboveClosestModal();\n    this.renderer.removeChild(\n      this.elementRef.nativeElement.parentElement,\n      this.elementRef.nativeElement\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.hide();\n  }\n\n  private placePopoverAboveClosestModal() {\n    const closestIonModal = this.elementRef.nativeElement.closest('ion-modal');\n    if (closestIonModal) {\n      this.zIndex = parseInt(closestIonModal.style.zIndex) + 1;\n      this.elementRef.nativeElement.style.zIndex = `${this.zIndex}`;\n    } else {\n      this.zIndex = parseInt(DesignTokenHelper.zLayer('popover'));\n    }\n  }\n\n  // document.removeEventListener needs the exact same event handler & options reference:\n  private preventEvent(event: TouchEvent) {\n    event.preventDefault();\n  }\n\n  private preventScroll() {\n    this.isFirstToLockScroll = !this.document.body.classList.contains('backdrop-no-scroll');\n    if (this.isFirstToLockScroll) {\n      this.renderer.addClass(this.document.body, 'backdrop-no-scroll');\n    }\n\n    // preventDefault does not work with Renderer2.listen method; add event listener directly to document instead\n    this.document.addEventListener(\n      'touchmove',\n      this.preventEvent,\n      this.preventScrollEventListenerOptions\n    );\n  }\n\n  private releaseScroll() {\n    if (this.isFirstToLockScroll) {\n      this.renderer.removeClass(this.document.body, 'backdrop-no-scroll');\n    }\n\n    this.document.removeEventListener(\n      'touchmove',\n      this.preventEvent,\n      this.preventScrollEventListenerOptions\n    );\n  }\n\n  show() {\n    this.renderer.addClass(this.elementRef.nativeElement, 'is-opening');\n    this.renderer.appendChild(this.document.body, this.elementRef.nativeElement);\n\n    this.preventScroll();\n    this.positionWrapper();\n\n    this.renderer.addClass(this.elementRef.nativeElement, 'is-open');\n    this.renderer.removeClass(this.elementRef.nativeElement, 'is-opening');\n\n    this.isShowing = true;\n  }\n\n  hide() {\n    this.renderer.removeChild(this.document.body, this.elementRef.nativeElement);\n    this.releaseScroll();\n\n    this.renderer.removeStyle(this.targetElement, 'z-index');\n    this.renderer.removeStyle(this.targetElement, 'pointer-events');\n    this.isShowing = false;\n  }\n\n  private positionWrapper() {\n    const targetDimensions = this.targetElement.getBoundingClientRect();\n\n    this.renderer.appendChild(this.document.body, this.elementRef.nativeElement);\n\n    const wrapperElement = this.wrapperElement.nativeElement;\n    const wrapperDimensions = wrapperElement.getBoundingClientRect();\n    const viewport = wrapperElement.ownerDocument.defaultView;\n    this.positionHorizontally(viewport, wrapperElement, targetDimensions, wrapperDimensions);\n    this.positionVertically(viewport, wrapperElement, targetDimensions, wrapperDimensions);\n  }\n\n  private positionHorizontally(\n    viewPort: Window,\n    wrapperElement: HTMLDivElement,\n    targetDimensions: DOMRect,\n    wrapperDimensions: DOMRect\n  ) {\n    const viewPortWidth = viewPort.innerWidth;\n    const contentWidth = wrapperDimensions.width;\n    const availableSpaceRight = viewPortWidth - targetDimensions.left;\n    const availableSpaceLeft = targetDimensions.right;\n    const contentCanFitRightOfTarget =\n      availableSpaceRight >= contentWidth + this.POPOVER_BODY_PADDING;\n    const openRight = contentCanFitRightOfTarget || availableSpaceRight >= availableSpaceLeft;\n\n    const [direction, oppositeDirection] =\n      this.popout === HorizontalDirection.left || !openRight\n        ? ['left', 'right']\n        : ['right', 'left'];\n\n    const pxValue =\n      direction === 'left' ? viewPortWidth - targetDimensions.right : targetDimensions.left;\n\n    this.renderer.removeStyle(wrapperElement, direction);\n    this.renderer.setStyle(wrapperElement, oppositeDirection, `${pxValue}px`);\n  }\n\n  private positionVertically(\n    viewPort: Window,\n    wrapperElement: HTMLDivElement,\n    targetDimensions: DOMRect,\n    wrapperDimensions: DOMRect\n  ) {\n    const viewPortHeight = viewPort.innerHeight;\n    const contentHeight = wrapperDimensions.height;\n    const availableSpaceDown = viewPortHeight - targetDimensions.bottom;\n    const availableSpaceUp = targetDimensions.top;\n    const contentCanFitBelowTarget =\n      availableSpaceDown >= contentHeight + this.POPOVER_BODY_PADDING;\n\n    const isAvailableSpaceBelow =\n      contentCanFitBelowTarget || availableSpaceDown >= availableSpaceUp;\n    const [direction, oppositeDirection] = isAvailableSpaceBelow\n      ? ['bottom', 'top']\n      : ['top', 'bottom'];\n\n    const pxValue =\n      direction === 'bottom' ? targetDimensions.bottom : viewPortHeight - targetDimensions.top;\n\n    this.renderer.removeStyle(wrapperElement, direction);\n    this.renderer.setStyle(wrapperElement, oppositeDirection, `${pxValue}px`);\n\n    if (direction === 'top') {\n      // Ensure target is elevated above shadows in popover, i.e. content wrapped in Card:\n      this.renderer.setStyle(this.targetElement, 'z-index', `${this.zIndex + 1}`);\n      this.renderer.setStyle(this.targetElement, 'pointer-events', 'none');\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: none;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: z('popover');\n}\n\n:host(.is-opening) {\n  display: block;\n  visibility: hidden;\n}\n\n:host(.is-open) {\n  display: block;\n}\n\n.wrapper {\n  position: fixed;\n  margin-top: size('xxxs');\n  margin-bottom: size('xxxs');\n}\n",
          "styleUrl": "./popover.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 73,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit", "OnDestroy"],
      "accessors": {
        "targetElement": {
          "name": "targetElement",
          "getSignature": {
            "name": "targetElement",
            "type": "",
            "returnType": "HTMLElement",
            "line": 53
          }
        }
      }
    },
    {
      "name": "ProgressCircleComponent",
      "id": "component-ProgressCircleComponent-e01cbff401818d9e90404b46243d1ad4",
      "file": "libs/designsystem/src/lib/components/progress-circle/progress-circle.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-progress-circle",
      "styleUrls": ["./progress-circle.component.scss"],
      "styles": [],
      "templateUrl": ["./progress-circle.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "size",
          "defaultValue": "'md'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "\"sm\" | \"md\" | \"lg\""
        },
        {
          "name": "themeColor",
          "defaultValue": "'success'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "value",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "hasElementBeenVisible",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 34,
          "modifierKind": [121]
        },
        {
          "name": "observer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IntersectionObserver",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [121]
        },
        {
          "name": "onIntersectionChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [121]
        },
        {
          "name": "SIZE_CONFIG",
          "defaultValue": "{\n    sm: { diameter: 40, strokeWidth: 3, upperBound: 95 },\n    md: { diameter: 56, strokeWidth: 4, upperBound: 96 },\n    lg: { diameter: 96, strokeWidth: 6, upperBound: 97 },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [143]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "unobserve",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "\"sm\" | \"md\" | \"lg\""
        },
        {
          "name": "style.height.px",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "number"
        },
        {
          "name": "style.width.px",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "number"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\n\n@Component({\n  selector: 'kirby-progress-circle',\n  templateUrl: './progress-circle.component.html',\n  styleUrls: ['./progress-circle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressCircleComponent implements AfterViewInit, OnDestroy {\n  readonly SIZE_CONFIG = {\n    sm: { diameter: 40, strokeWidth: 3, upperBound: 95 },\n    md: { diameter: 56, strokeWidth: 4, upperBound: 96 },\n    lg: { diameter: 96, strokeWidth: 6, upperBound: 97 },\n  };\n\n  @Input() value: number = 0;\n  @Input() size: 'sm' | 'md' | 'lg' = 'md';\n  @Input() themeColor: 'success' | 'warning' | 'danger' = 'success';\n\n  @HostBinding('class')\n  get _cssSize() {\n    return this.size;\n  }\n\n  private hasElementBeenVisible?: boolean;\n  private observer: IntersectionObserver;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngAfterViewInit(): void {\n    if (!this.observer) {\n      this.observer = new IntersectionObserver(this.onIntersectionChange, {\n        threshold: 0.5,\n      });\n      this.observer.observe(this.elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unobserve();\n  }\n\n  private onIntersectionChange = (entries: IntersectionObserverEntry[]) => {\n    this.hasElementBeenVisible = entries && entries.some((entry) => entry.isIntersecting);\n    if (this.hasElementBeenVisible) {\n      this.unobserve();\n      this.changeDetectorRef.markForCheck();\n    }\n  };\n\n  private unobserve() {\n    if (this.observer) {\n      this.observer.unobserve(this.elementRef.nativeElement);\n      // Safari does not support \"disconnect\", see: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#Browser_compatibility\n      if (typeof this.observer.disconnect === 'function') {\n        this.observer.disconnect();\n      }\n    }\n  }\n\n  @HostBinding('style.width.px')\n  @HostBinding('style.height.px')\n  get _diameter(): number {\n    return this.SIZE_CONFIG[this.size].diameter;\n  }\n\n  get _shownValue() {\n    // This is needed to make an animation [0 -> value] when element is shown to the user\n    return this.hasElementBeenVisible ? this.value : 0;\n  }\n\n  get _radius() {\n    return this._diameter / 2;\n  }\n\n  get _strokeWidth() {\n    return this.SIZE_CONFIG[this.size].strokeWidth;\n  }\n\n  get _upperBound() {\n    // This is needed to make sure that an input value close to 100 is not shown as 100\n    return this.SIZE_CONFIG[this.size].upperBound;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: inline-block;\n  position: relative;\n}\n\n.transcluded-content,\nkirby-progress-circle-ring {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nkirby-progress-circle-ring {\n  z-index: z('default') + 1;\n}\n\n.transcluded-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: z('default');\n  border-radius: 50%;\n  overflow: hidden;\n}\n",
          "styleUrl": "./progress-circle.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit", "OnDestroy"],
      "accessors": {
        "_cssSize": {
          "name": "_cssSize",
          "getSignature": {
            "name": "_cssSize",
            "type": "",
            "returnType": "",
            "line": 30
          }
        },
        "_diameter": {
          "name": "_diameter",
          "getSignature": {
            "name": "_diameter",
            "type": "number",
            "returnType": "number",
            "line": 75
          }
        },
        "_shownValue": {
          "name": "_shownValue",
          "getSignature": {
            "name": "_shownValue",
            "type": "",
            "returnType": "",
            "line": 79
          }
        },
        "_radius": {
          "name": "_radius",
          "getSignature": {
            "name": "_radius",
            "type": "",
            "returnType": "",
            "line": 84
          }
        },
        "_strokeWidth": {
          "name": "_strokeWidth",
          "getSignature": {
            "name": "_strokeWidth",
            "type": "",
            "returnType": "",
            "line": 88
          }
        },
        "_upperBound": {
          "name": "_upperBound",
          "getSignature": {
            "name": "_upperBound",
            "type": "",
            "returnType": "",
            "line": 92
          }
        }
      },
      "templateData": "<div class=\"transcluded-content\">\n  <ng-content></ng-content>\n</div>\n<kirby-progress-circle-ring\n  [themeColor]=\"themeColor\"\n  [value]=\"_shownValue\"\n  [radius]=\"_radius\"\n  [strokeWidth]=\"_strokeWidth\"\n  [upperBound]=\"_upperBound\"\n>\n</kirby-progress-circle-ring>\n"
    },
    {
      "name": "ProgressCircleRingComponent",
      "id": "component-ProgressCircleRingComponent-375a0d5c7976ee36aca40f9474883695",
      "file": "libs/designsystem/src/lib/components/progress-circle/progress-circle-ring.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-progress-circle-ring",
      "styleUrls": ["./progress-circle-ring.component.scss"],
      "styles": [],
      "templateUrl": ["./progress-circle-ring.component.svg"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "radius",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "number"
        },
        {
          "name": "strokeWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "number"
        },
        {
          "name": "themeColor",
          "defaultValue": "'success'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "upperBound",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "number"
        },
        {
          "name": "value",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "calculateOffset",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "style.height.px",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "number"
        },
        {
          "name": "style.width.px",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "number"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'kirby-progress-circle-ring',\n  templateUrl: './progress-circle-ring.component.svg',\n  styleUrls: ['./progress-circle-ring.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressCircleRingComponent {\n  @Input() radius: number; // The desired outer radius of the SVG circle\n  @Input() value: number = 0;\n  @Input() themeColor: 'success' | 'warning' | 'danger' = 'success';\n  @Input() strokeWidth: number;\n  @Input() upperBound: number;\n\n  get _offset(): number {\n    const valueWithinBounds = this.value < this.upperBound || this.value > 99;\n    if (valueWithinBounds) {\n      return this.calculateOffset(this.value);\n    } else {\n      return this.calculateOffset(this.upperBound);\n    }\n  }\n\n  @HostBinding('style.width.px')\n  @HostBinding('style.height.px')\n  get _diameter(): number {\n    return this.radius * 2;\n  }\n\n  get _centerRadius(): number {\n    return this.radius - this.strokeWidth / 2;\n  }\n\n  get _centerCircumference(): number {\n    return this._centerRadius * 2 * Math.PI;\n  }\n\n  private calculateOffset(value: number): number {\n    return this._centerCircumference - this._centerCircumference * (value / 100);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n.circle {\n  stroke: get-color('semi-light');\n}\n.progress {\n  transition-property: stroke-dashoffset, stroke;\n  transition-duration: get-transition-duration('extra-long');\n  transition-timing-function: get-transition-easing('enter-exit');\n  transform: rotate(-90deg);\n  transform-origin: 50% 50%;\n  stroke: var(--kirby-progress-circle-stroke-color, #{get-color('success')});\n}\n\n:host {\n  @each $color-name, $color-value in $notification-colors {\n    &.#{$color-name} {\n      --kirby-progress-circle-stroke-color: #{$color-value};\n    }\n  }\n}\n",
          "styleUrl": "./progress-circle-ring.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_offset": {
          "name": "_offset",
          "getSignature": {
            "name": "_offset",
            "type": "number",
            "returnType": "number",
            "line": 16
          }
        },
        "_diameter": {
          "name": "_diameter",
          "getSignature": {
            "name": "_diameter",
            "type": "number",
            "returnType": "number",
            "line": 27
          }
        },
        "_centerRadius": {
          "name": "_centerRadius",
          "getSignature": {
            "name": "_centerRadius",
            "type": "number",
            "returnType": "number",
            "line": 31
          }
        },
        "_centerCircumference": {
          "name": "_centerCircumference",
          "getSignature": {
            "name": "_centerCircumference",
            "type": "number",
            "returnType": "number",
            "line": 35
          }
        }
      },
      "templateData": "<svg [attr.width]=\"_diameter\" [attr.height]=\"_diameter\">\n  <circle\n    shape-rendering=\"geometricPrecision\"\n    class=\"circle\"\n    fill=\"transparent\"\n    [attr.stroke-width]=\"strokeWidth\"\n    [attr.r]=\"_centerRadius\"\n    [attr.cx]=\"radius\"\n    [attr.cy]=\"radius\"\n  />\n  <circle\n    shape-rendering=\"geometricPrecision\"\n    class=\"progress\"\n    fill=\"transparent\"\n    stroke-linecap=\"round\"\n    [attr.stroke-width]=\"strokeWidth\"\n    [attr.r]=\"_centerRadius\"\n    [attr.cx]=\"radius\"\n    [attr.cy]=\"radius\"\n    [attr.stroke-dashoffset]=\"_offset\"\n    [attr.stroke-dasharray]=\"_centerCircumference\"\n  />\n</svg>"
    },
    {
      "name": "RadioComponent",
      "id": "component-RadioComponent-0926a1879591582eae92f33df45f3d42",
      "file": "libs/designsystem/src/lib/components/radio/radio.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-radio",
      "styleUrls": ["./radio.component.scss"],
      "styles": [],
      "templateUrl": ["./radio.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"xs\" | \"sm\" | \"md\""
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "any"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_labelId",
          "defaultValue": "UniqueIdGenerator.scopedTo('kirby-radio-label').next()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "ionRadioElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLIonRadioElement>",
          "optional": true,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonRadio, {read: ElementRef, static: true}"
            }
          ],
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { IonRadio } from '@ionic/angular';\n\nimport { UniqueIdGenerator } from '../../helpers/unique-id-generator.helper';\n\n@Component({\n  selector: 'kirby-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n})\nexport class RadioComponent {\n  @Input()\n  value: any;\n\n  @HostBinding('class.has-label')\n  @Input()\n  text: string;\n\n  @HostBinding('class')\n  @Input()\n  size?: 'xs' | 'sm' | 'md';\n\n  @Input()\n  disabled: boolean;\n  @HostBinding('attr.disabled')\n  get _isDisabled() {\n    return this.disabled ? 'disabled' : null;\n  }\n\n  get buttonTabIndex(): number {\n    return this.ionRadioElement ? this.ionRadioElement.nativeElement.tabIndex : -1;\n  }\n\n  focus() {\n    this.ionRadioElement && this.ionRadioElement.nativeElement.focus();\n  }\n\n  _labelId = UniqueIdGenerator.scopedTo('kirby-radio-label').next();\n\n  @ViewChild(IonRadio, { read: ElementRef, static: true }) private ionRadioElement?: ElementRef<\n    HTMLIonRadioElement\n  >;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$radio-icon-padding: size('xxxxs');\n$radio-icon-size: size('m');\n$radio-icon-mark-size: 60%;\n$spacing-to-edge: map-get($checkbox-radio-spacing, 'to-edge');\n$spacing-to-label: map-get($checkbox-radio-spacing, 'to-label');\n$default-checkbox-radio-size: map-get($checkbox-radio-sizes, 'md');\n\n@function getVerticalPadding($target-height) {\n  @return ($target-height - $radio-icon-size) / 2;\n}\n\n:host {\n  display: inline-block;\n\n  &.has-label {\n    display: block;\n    line-height: line-height('n');\n    white-space: pre-line;\n\n    div.wrapper {\n      position: relative;\n      display: inline-flex;\n      align-items: flex-start;\n      vertical-align: top;\n      padding: getVerticalPadding($default-checkbox-radio-size) 0;\n      padding-right: $spacing-to-label; // Ensure same padding on right side of label\n    }\n\n    @each $size, $height in $checkbox-radio-sizes {\n      :host-context(.radio-#{$size}),\n      &.#{$size} {\n        .wrapper {\n          $verticalPadding: getVerticalPadding($height);\n          padding-top: $verticalPadding;\n          padding-bottom: $verticalPadding;\n        }\n      }\n    }\n\n    ion-radio {\n      position: static;\n      margin-left: $spacing-to-edge;\n      margin-right: $spacing-to-label;\n    }\n  }\n\n  &[disabled] {\n    color: #{get-text-color('semi-dark')};\n    ion-radio {\n      opacity: 1; // Reset Ionic disabled style\n      --color: #{get-color('medium')};\n      --color-checked: #{get-color('medium')};\n      &::part(container) {\n        background-color: get-color('semi-light');\n      }\n    }\n  }\n}\n\nion-radio {\n  min-height: $radio-icon-size;\n  min-width: $radio-icon-size;\n  padding: $radio-icon-padding;\n  box-sizing: border-box; // Ensure padding is not added to radio width/height\n  --border-width: 1px;\n  --color: #{get-color('semi-dark')};\n  --color-checked: #{get-color('success')};\n\n  &::part(container) {\n    background-color: get-color('white');\n  }\n\n  &::part(mark) {\n    width: $radio-icon-mark-size;\n    height: $radio-icon-mark-size;\n  }\n\n  &:active {\n    --color: transparent;\n\n    &::part(container) {\n      background-color: get-color('white-shade');\n    }\n  }\n\n  :host-context(kirby-radio-group.error),\n  :host-context(kirby-radio-group.ng-touched.ng-invalid) {\n    ion-radio,\n    ion-radio:active {\n      --color: #{get-color('danger')};\n    }\n  }\n\n  // Only apply focus ring if pointer device can hover\n  // (effectively desktop/mouse devices):\n  @include focus() {\n    &::part(container) {\n      // Apply focus ring through box-shadow to keep circle shape and default border:\n      box-shadow: 0 0 0 1px #{get-color('background-color')}, 0 0 0 3px #{$focus-ring-color};\n    }\n  }\n\n  &.radio-checked {\n    --border-width: 0px;\n\n    &:not(:focus):not(.radio-disabled) {\n      &::part(container) {\n        box-shadow: get-elevation(2);\n      }\n    }\n  }\n}\n\n:host-context(kirby-item) {\n  z-index: z('default'); // Makes whole kirby-item clickable above item-inner.\n\n  ion-radio {\n    margin: 0; // Reset Ionic in-item margins\n  }\n\n  &[slot='start'] {\n    margin-inline-end: $spacing-to-label;\n  }\n}\n",
          "styleUrl": "./radio.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_isDisabled": {
          "name": "_isDisabled",
          "getSignature": {
            "name": "_isDisabled",
            "type": "",
            "returnType": "",
            "line": 26
          }
        },
        "buttonTabIndex": {
          "name": "buttonTabIndex",
          "getSignature": {
            "name": "buttonTabIndex",
            "type": "number",
            "returnType": "number",
            "line": 30
          }
        }
      },
      "templateData": "<div class=\"wrapper\">\n  <ion-radio\n    [value]=\"value\"\n    [disabled]=\"disabled\"\n    mode=\"md\"\n    [attr.aria-labelledby]=\"text ? _labelId : null\"\n  ></ion-radio>\n  <span [id]=\"_labelId\" *ngIf=\"text\">{{ text }}</span>\n</div>\n"
    },
    {
      "name": "RadioGroupComponent",
      "id": "component-RadioGroupComponent-3d2806ffffc4d36bd40e92156572608f",
      "file": "libs/designsystem/src/lib/components/radio/radio-group/radio-group.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: RadioGroupComponent, multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-radio-group",
      "styleUrls": [],
      "styles": ["ion-radio-group { display: inherit; flex-wrap: inherit}"],
      "templateUrl": ["./radio-group.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean"
        },
        {
          "name": "itemDisabledProperty",
          "defaultValue": "'disabled'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": ""
        },
        {
          "name": "itemTextProperty",
          "defaultValue": "'text'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string"
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "number"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "valueChange",
          "defaultValue": "new EventEmitter<string | any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmitted when an option is selected\n",
          "description": "<p>Emitted when an option is selected</p>\n",
          "line": 90,
          "type": "EventEmitter<string | any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_customItemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListItemTemplateDirective, {read: TemplateRef}"
            }
          ]
        },
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 99,
          "modifierKind": [121]
        },
        {
          "name": "_items",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[] | any[]",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [121]
        },
        {
          "name": "_onChangeCallback",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [121]
        },
        {
          "name": "_onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [121]
        },
        {
          "name": "_selectedIndex",
          "defaultValue": "-1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [121]
        },
        {
          "name": "_value",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | any",
          "optional": true,
          "description": "",
          "line": 104,
          "modifierKind": [121]
        },
        {
          "name": "projectedRadioButtons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<RadioComponent>",
          "optional": false,
          "description": "",
          "line": 108,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "RadioComponent, {descendants: true}"
            }
          ],
          "modifierKind": [121]
        },
        {
          "name": "radioButtons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<RadioComponent>",
          "optional": false,
          "description": "",
          "line": 106,
          "decorators": [
            {
              "name": "ViewChildren",
              "stringifiedArguments": "RadioComponent"
            }
          ],
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "_getDisabledStateFromItem",
          "args": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_getTextFromItem",
          "args": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 155,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onChange",
          "args": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 169,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onRadioBlur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 177,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'ionBlur'"
            }
          ]
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getIndexOfProjectedRadio",
          "args": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getIndexOfSelectedValue",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getValueFromProjectedRadios",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | any",
          "typeParameters": [],
          "line": 211,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getValueFromSelectedIndex",
          "args": [],
          "optional": false,
          "returnType": "string | any",
          "typeParameters": [],
          "line": 204,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "initSelectionStateFromProjectedContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 220,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "listenForProjectedRadiosChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 226,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "refreshSelectionState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 238,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "refreshStateFromProjectedContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 245,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setProjectedRadiosDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 257,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setSelectedItem",
          "args": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 251,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "ionBlur",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 177
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  EventEmitter,\n  HostBinding,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChildren,\n} from '@angular/core';\nimport { Component, HostListener, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ListItemTemplateDirective } from '../../list/list.directive';\nimport { RadioComponent } from '../radio.component';\n\n@Component({\n  selector: 'kirby-radio-group',\n  templateUrl: './radio-group.component.html',\n  styles: ['ion-radio-group { display: inherit; flex-wrap: inherit}'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RadioGroupComponent,\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RadioGroupComponent implements AfterContentInit, ControlValueAccessor {\n  constructor(private changeDetectionRef: ChangeDetectorRef) {}\n\n  // #region public properties\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @Input() set disabled(value: boolean) {\n    this._disabled = value;\n    this.setProjectedRadiosDisabledState(value);\n  }\n\n  @HostBinding('class.error') // Used to style radios with error state\n  @Input()\n  hasError: boolean = false;\n\n  get items(): string[] | any[] {\n    return this._items || []; // Ensure items return empty array even if set to null/undefined\n  }\n\n  @Input() set items(value: string[] | any[]) {\n    if ((!value || !value.length) && !this.items.length) return; // Nothing changed, no items before or after\n    this._items = value;\n    this.refreshSelectionState();\n  }\n\n  @Input()\n  itemTextProperty = 'text';\n\n  @Input()\n  itemDisabledProperty = 'disabled';\n\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n\n  @Input() set selectedIndex(value: number) {\n    if (typeof value === 'string') value = parseInt(value); // Ensure data type number, e.g. when used with template syntax without binding: <... selectedIndex=\"1\"\n    if (value === undefined || value === null || value === NaN) value = -1;\n    if (value === this.selectedIndex) return;\n    this._selectedIndex = value;\n    this._value = this.getValueFromSelectedIndex() || null;\n  }\n\n  get value(): string | any {\n    return this._value;\n  }\n\n  @Input() set value(value: string | any) {\n    this.setSelectedItem(value);\n  }\n\n  /**\n   * Emitted when an option is selected\n   */\n  @Output() valueChange: EventEmitter<string | any> = new EventEmitter<string | any>();\n  // #endregion public properties\n\n  // #region \"protected\" properties used by template\n  @ContentChild(ListItemTemplateDirective, { read: TemplateRef })\n  _customItemTemplate: TemplateRef<any>;\n  // #endregion \"protected\" properties used by template\n\n  // #region private fields\n  private _disabled = false;\n  private _items: string[] | any[] = [];\n  private _onChangeCallback: (value: any) => void = () => {};\n  private _onTouched = () => {};\n  private _selectedIndex: number = -1;\n  private _value?: string | any = null;\n  @ViewChildren(RadioComponent)\n  private radioButtons: QueryList<RadioComponent>;\n  @ContentChildren(RadioComponent, { descendants: true })\n  private projectedRadioButtons: QueryList<RadioComponent>;\n\n  private get hasItemsFromContentProjection(): boolean {\n    return (\n      !this.items.length &&\n      !this._customItemTemplate &&\n      this.projectedRadioButtons &&\n      this.projectedRadioButtons.length > 0\n    );\n  }\n\n  // #endregion private fields\n\n  // #region public methods\n  focus() {\n    const findFocusable = (radios: QueryList<RadioComponent>) =>\n      radios && radios.find((radio) => !isNaN(radio.buttonTabIndex) && radio.buttonTabIndex !== -1);\n    const focusable = findFocusable(this.radioButtons) || findFocusable(this.projectedRadioButtons);\n    focusable && focusable.focus();\n  }\n\n  ngAfterContentInit(): void {\n    this.initSelectionStateFromProjectedContent();\n    this.listenForProjectedRadiosChange();\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectionRef.markForCheck();\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this.changeDetectionRef.markForCheck();\n  }\n\n  // #endregion public methods\n\n  // #region \"protected\" methods used by template\n  _getTextFromItem(item: string | any): string {\n    if (!item) return null;\n    return typeof item === 'string' ? item : item[this.itemTextProperty];\n  }\n\n  _getDisabledStateFromItem(item: string | any): boolean {\n    if (!item) return undefined;\n    return typeof item === 'string' ? undefined : item[this.itemDisabledProperty];\n  }\n\n  get _hasItems(): boolean {\n    return this.items.length > 0 || this.hasItemsFromContentProjection;\n  }\n\n  _onChange(value: string | any) {\n    if (value === this._value) return;\n    this.setSelectedItem(value);\n    this.valueChange.emit(value);\n    this._onChangeCallback(value);\n  }\n\n  @HostListener('ionBlur')\n  _onRadioBlur() {\n    this._onTouched();\n  }\n\n  // #endregion \"protected\" methods used by template\n\n  // #region private methods\n  private getIndexOfSelectedValue() {\n    if (!this.value) return -1;\n    return this.hasItemsFromContentProjection\n      ? this.getIndexOfProjectedRadio(this.value)\n      : this.items.indexOf(this.value);\n  }\n\n  private getIndexOfProjectedRadio(value: string | any): number {\n    let selectedIndex = -1;\n    this.projectedRadioButtons &&\n      this.projectedRadioButtons.find((radio, i) => {\n        const found = radio.value === value;\n        if (found) {\n          selectedIndex = i;\n        }\n        return found;\n      });\n    return selectedIndex;\n  }\n\n  private getValueFromSelectedIndex(): string | any {\n    if (this.selectedIndex === -1) return;\n    return this.hasItemsFromContentProjection\n      ? this.getValueFromProjectedRadios(this.selectedIndex)\n      : this.items[this.selectedIndex];\n  }\n\n  private getValueFromProjectedRadios(index: number): string | any {\n    const radio =\n      this.projectedRadioButtons &&\n      this.projectedRadioButtons.find((_, i) => {\n        return i === index;\n      });\n    return radio && radio.value;\n  }\n\n  private initSelectionStateFromProjectedContent() {\n    if (this.hasItemsFromContentProjection) {\n      this.refreshSelectionState(); // Initialize selected index and value from projected radios\n    }\n  }\n\n  private listenForProjectedRadiosChange() {\n    this.projectedRadioButtons.changes.subscribe(() => {\n      this.refreshStateFromProjectedContent();\n\n      if (this.disabled) {\n        // Ensure disabled state propagates when re-rendering projected radios.\n        // setTimeout prevents ExpressionChangedAfterItHasBeenCheckedError when updating the DOM in QueryList.changes:\n        setTimeout(() => this.setProjectedRadiosDisabledState(this.disabled));\n      }\n    });\n  }\n\n  private refreshSelectionState() {\n    if (this.value) {\n      this._selectedIndex = this.getIndexOfSelectedValue(); // Ensure selectedIndex reflects value within items\n    }\n    this._value = this.getValueFromSelectedIndex() || null; // Ensure value exists within items\n  }\n\n  private refreshStateFromProjectedContent() {\n    if (!!this._customItemTemplate) return; // Only refresh on changes to projected content, not when re-rendering custom template\n    this.changeDetectionRef.markForCheck(); // Ensure changes to projected content gets checked in next change detection cycle\n    this.refreshSelectionState(); // Sync selected index and value from projected radios\n  }\n\n  private setSelectedItem(value: string | any) {\n    if (value === this._value) return; // Nothing changed\n    this._value = value;\n    this._selectedIndex = this.getIndexOfSelectedValue();\n  }\n\n  private setProjectedRadiosDisabledState(isDisabled: boolean) {\n    if (!this.projectedRadioButtons || !this.projectedRadioButtons.length) return;\n    this.projectedRadioButtons.forEach((radio, index) => {\n      // Disable all radios when group is disabled, otherwise fall back to each item's disabled state, if defined:\n      radio.disabled = isDisabled || this._getDisabledStateFromItem(this.items[index]);\n    });\n  }\n\n  // #endregion private methods\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "ion-radio-group { display: inherit; flex-wrap: inherit}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "changeDetectionRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "changeDetectionRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "ControlValueAccessor"],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        },
        "items": {
          "name": "items",
          "setSignature": {
            "name": "items",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string[] | any[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string[] | any[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "items",
            "type": "",
            "returnType": "[] | []",
            "line": 51
          }
        },
        "selectedIndex": {
          "name": "selectedIndex",
          "setSignature": {
            "name": "selectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedIndex",
            "type": "number",
            "returnType": "number",
            "line": 67
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | any",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | any",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | any",
            "line": 79
          }
        },
        "hasItemsFromContentProjection": {
          "name": "hasItemsFromContentProjection",
          "getSignature": {
            "name": "hasItemsFromContentProjection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 110
          }
        },
        "_hasItems": {
          "name": "_hasItems",
          "getSignature": {
            "name": "_hasItems",
            "type": "boolean",
            "returnType": "boolean",
            "line": 165
          }
        }
      },
      "templateData": "<ion-radio-group *ngIf=\"_hasItems\" [value]=\"value\" (ionChange)=\"_onChange($event.detail.value)\">\n  <ng-container *ngIf=\"!items || !items.length; else itemsTemplate\">\n    <ng-content></ng-content>\n  </ng-container>\n</ion-radio-group>\n\n<ng-template #itemsTemplate>\n  <ng-container *ngFor=\"let item of items; let i = index\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        _customItemTemplate || defaultItemTemplate;\n        context: { $implicit: item, selected: i === selectedIndex, index: i }\n      \"\n    ></ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #defaultItemTemplate let-item>\n  <kirby-radio\n    [value]=\"item\"\n    [disabled]=\"disabled || _getDisabledStateFromItem(item)\"\n    [text]=\"_getTextFromItem(item)\"\n  ></kirby-radio>\n</ng-template>\n"
    },
    {
      "name": "RangeComponent",
      "id": "component-RangeComponent-bd24c1158920ad362ae306792296a919",
      "file": "libs/designsystem/src/lib/components/range/range.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: forwardRef(() => RangeComponent),\n}",
          "type": "component"
        }
      ],
      "selector": "kirby-range",
      "styleUrls": ["./range.component.scss"],
      "styles": [],
      "templateUrl": ["./range.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "debounce",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "number"
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean"
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "number"
        },
        {
          "name": "maxLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string"
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "number"
        },
        {
          "name": "minLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string"
        },
        {
          "name": "pin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean"
        },
        {
          "name": "step",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "number"
        },
        {
          "name": "ticks",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "EventEmitter<number>"
        }
      ],
      "propertiesClass": [
        {
          "name": "currentValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [121]
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 86,
          "modifierKind": [123]
        },
        {
          "name": "propagateChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "_onRangeValueChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTicks",
          "args": [],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "_",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "_",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": true,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'kirby-range',\n  templateUrl: './range.component.html',\n  styleUrls: ['./range.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => RangeComponent),\n    },\n  ],\n})\nexport class RangeComponent implements OnChanges, ControlValueAccessor {\n  @Input() minLabel: string;\n  @Input() maxLabel: string;\n  @Input() debounce: number;\n  @Input() max: number;\n  @Input() min: number;\n  @Input() pin: boolean;\n  @Input() step = 1;\n  @Input() ticks: boolean;\n  @Input() disabled = false;\n  @Input()\n  set value(value: number) {\n    if (value !== this.currentValue) {\n      this.currentValue = value;\n      this.propagateChange(this.currentValue);\n      this.change.emit(this.currentValue);\n    }\n  }\n\n  get value(): number {\n    return this.currentValue;\n  }\n\n  @Output() change: EventEmitter<number> = new EventEmitter<number>();\n\n  private currentValue: number;\n\n  ngOnChanges(_: SimpleChanges) {\n    if (!this.ticks) return;\n\n    /*\n     * Max 10 ticks are allowed\n     */\n    const amountOfTicks = (this.max - this.min) / this.step;\n    if (amountOfTicks > 9) {\n      this.step = (this.max - this.min) / 9;\n    }\n\n    /*\n     * Set value to the nearest tick\n     */\n    this.value = this.getTicks().reduce((a, b) => {\n      return Math.abs(b - this.value) < Math.abs(a - this.value) ? b : a;\n    });\n  }\n\n  private getTicks() {\n    const ticks = [];\n    for (let value = Number(this.min); value <= Number(this.max); value += Number(this.step)) {\n      ticks.push(value);\n    }\n    return ticks;\n  }\n\n  public setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  public _onRangeValueChange($event: any): void {\n    this.writeValue($event.detail.value);\n  }\n\n  public onTouched = () => {};\n\n  public propagateChange = (_: any) => {};\n\n  public writeValue(value: any): void {\n    if (value !== undefined) {\n      this.value = value;\n    }\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  public registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n$tickHeight: 6px;\n$tickWidth: 6px;\n\n:host {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\nion-range {\n  --knob-background: #{get-color('white')};\n  --knob-box-shadow: 0 5px 10px 0px rgba(28, 28, 28, 0.3), 0 0 5px 0 rgba(28, 28, 28, 0.08);\n  --knob-size: 24px;\n\n  --pin-color: #{get-text-color('black')};\n  --pin-background: #{get-color('semi-light')};\n\n  --bar-background: #{get-color('medium')};\n  --bar-background-active: #{get-color('dark')};\n  --bar-border-radius: #{size('xxxs')};\n  --bar-height: #{size('xxxxs')};\n\n  &.range-disabled {\n    --knob-background: #{get-color('semi-light')};\n    --knob-box-shadow: none;\n\n    --bar-background: #{get-color('semi-light')};\n    --bar-background-active: #{get-color('semi-light')};\n\n    &::part(tick) {\n      background: get-color('semi-light');\n    }\n  }\n\n  flex: 1 1 100%;\n  padding: 0;\n\n  &.range-has-pin {\n    padding: 0 $tickWidth / 2;\n  }\n\n  &::part(pin) {\n    font-size: font-size('xs');\n    color: var(--pin-color);\n    background-color: var(--pin-background);\n    padding: size('xxxxs') size('xxxs');\n    border-radius: 4px;\n    min-width: 40px;\n    position: relative;\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 100%;\n      left: 50%;\n      transform: translateX(-50%);\n      display: block;\n      border: solid transparent 6px;\n      border-top-color: var(--pin-background);\n    }\n  }\n\n  &::part(tick),\n  &::part(tick-active) {\n    border-radius: 50%;\n    width: $tickWidth;\n    height: $tickHeight;\n    z-index: 1;\n    margin-inline-start: -$tickWidth / 2;\n  }\n\n  &::part(tick) {\n    background: get-color('medium');\n  }\n}\n\nlabel {\n  font-size: font-size('xs');\n  line-height: line-height('xs');\n  color: get-text-color('semi-dark');\n  margin-top: -#{size('xxxs')};\n}\n",
          "styleUrl": "./range.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnChanges", "ControlValueAccessor"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "number",
            "returnType": "number",
            "line": 43
          }
        }
      },
      "templateData": "<ion-range\n  (ionChange)=\"_onRangeValueChange($event)\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  [value]=\"value\"\n  [pin]=\"pin\"\n  [snaps]=\"ticks\"\n  [ticks]=\"ticks\"\n  [debounce]=\"debounce\"\n  [disabled]=\"disabled\"\n>\n</ion-range>\n\n<label *ngIf=\"minLabel\" class=\"min-label\">{{ minLabel }}</label>\n<label *ngIf=\"maxLabel\" class=\"max-label\">{{ maxLabel }}</label>\n"
    },
    {
      "name": "ReorderListComponent",
      "id": "component-ReorderListComponent-5d3619d06f79ca2303d2f7b9f0def288",
      "file": "libs/designsystem/src/lib/components/reorder-list/reorder-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-reorder-list",
      "styleUrls": ["./reorder-list.component.scss"],
      "styles": [],
      "templateUrl": ["./reorder-list.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "getItemTextDefault",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "function"
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "any[]"
        },
        {
          "name": "subItemsName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "itemReorder",
          "defaultValue": "new EventEmitter<ReorderEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "EventEmitter"
        },
        {
          "name": "subItemReorder",
          "defaultValue": "new EventEmitter<ReorderEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "itemTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ListItemTemplateDirective, {static: true, read: TemplateRef}"
            }
          ]
        },
        {
          "name": "observer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MutationObserver",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [121]
        },
        {
          "name": "reorderActive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "reorderGroupContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef>",
          "optional": false,
          "description": "",
          "line": 34,
          "decorators": [
            {
              "name": "ViewChildren",
              "stringifiedArguments": "'reorderGroupContainer'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "doReorder",
          "args": [
            {
              "name": "ev",
              "type": "CustomEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "ev",
              "type": "CustomEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doSubReorder",
          "args": [
            {
              "name": "ev",
              "type": "CustomEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "parentItem",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "ev",
              "type": "CustomEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parentItem",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setupDomListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChildren,\n} from '@angular/core';\n\nimport { ListItemTemplateDirective } from '../list/list.directive';\nimport { ReorderEvent } from './reorder-event';\n\n@Component({\n  selector: 'kirby-reorder-list',\n  templateUrl: './reorder-list.component.html',\n  styleUrls: ['./reorder-list.component.scss'],\n})\nexport class ReorderListComponent implements OnChanges, OnDestroy {\n  @Input() items: any[];\n  @Input() subItemsName: string;\n  @Input() getItemTextDefault: (item: any) => string;\n\n  @Output() itemReorder = new EventEmitter<ReorderEvent>();\n  @Output() subItemReorder = new EventEmitter<ReorderEvent>();\n\n  @ContentChild(ListItemTemplateDirective, { static: true, read: TemplateRef })\n  itemTemplate: TemplateRef<any>;\n  @ViewChildren('reorderGroupContainer')\n  reorderGroupContainer: QueryList<ElementRef>;\n\n  private observer: MutationObserver;\n  reorderActive: boolean = false;\n\n  ngOnChanges(): void {\n    if (this.items && this.items.length > 0) {\n      setTimeout(() => {\n        this.setupDomListener();\n      });\n    }\n  }\n\n  private setupDomListener() {\n    const callback = (mutationsList: any) => {\n      for (let mutation of mutationsList) {\n        if (mutation.oldValue !== mutation.target['className']) {\n          this.reorderActive = mutation.target['className'].includes('reorder-list-active');\n        }\n      }\n    };\n    this.observer = new MutationObserver(callback);\n\n    this.reorderGroupContainer.forEach((div: ElementRef) => {\n      this.observer.observe(div.nativeElement, {\n        attributes: true,\n        attributeFilter: ['class'],\n        attributeOldValue: true,\n        childList: false,\n        subtree: true,\n      });\n    });\n  }\n\n  doReorder(ev: CustomEvent) {\n    this.itemReorder.emit(new ReorderEvent(ev));\n  }\n\n  doSubReorder(ev: CustomEvent, parentItem: any) {\n    this.subItemReorder.emit(new ReorderEvent(ev, parentItem));\n  }\n\n  ngOnDestroy() {\n    //clean up the observer\n    this.observer && this.observer.disconnect();\n    delete this.observer;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\nion-backdrop {\n  opacity: 0.3;\n  z-index: 101;\n  position: fixed;\n}\n\n.reorder-selected {\n  box-shadow: none;\n  opacity: 1;\n  z-index: 104;\n\n  kirby-card {\n    transform: scale(1.05, 1.05);\n\n    & div:first-child {\n      border-top: 1px solid var(--kirby-background-color);\n    }\n  }\n\n  @include slotted('kirby-item') {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n    transform: scale(1.05, 1.05);\n    border-radius: $border-radius;\n    overflow: hidden;\n  }\n}\n\n.reorder-list-active {\n  & > * {\n    position: relative;\n    z-index: 103;\n  }\n  & > .reorder-selected {\n    z-index: 104;\n  }\n  & div:first-child {\n    border-top: none;\n  }\n\n  @include slotted('div:last-child kirby-item') {\n    border-bottom-left-radius: $border-radius;\n    border-bottom-right-radius: $border-radius;\n    overflow: hidden;\n  }\n\n  .reorder-selected {\n    @include slotted('kirby-item') {\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n      transform: scale(1.05, 1.05);\n      border-radius: $border-radius;\n      overflow: hidden;\n    }\n  }\n}\n\n.outerGroup {\n  border-bottom: 20px transparent solid;\n}\n\nkirby-card {\n  overflow: inherit;\n  z-index: auto;\n\n  @include slotted('div:last-child ion-reorder-group div:last-child>kirby-item') {\n    border-bottom-left-radius: $border-radius;\n    border-bottom-right-radius: $border-radius;\n    overflow: hidden;\n  }\n\n  @include slotted('div kirby-item') {\n    z-index: 1; // for showing rounded corners on ios devices\n  }\n\n  @include slotted('div:first-child>kirby-item') {\n    border-radius: $border-radius;\n    overflow: hidden;\n  }\n\n  @include slotted('div .reorder-list-active kirby-item') {\n    z-index: 103;\n  }\n\n  & div:first-child {\n    border-top: 1px solid var(--kirby-background-color);\n  }\n}\n",
          "styleUrl": "./reorder-list.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnChanges", "OnDestroy"],
      "templateData": "<ion-backdrop *ngIf=\"reorderActive\" [tappable]=\"false\" [visible]=\"true\" [stopPropagation]=\"false\">\n</ion-backdrop>\n<ion-reorder-group (ionItemReorder)=\"doReorder($event)\" disabled=\"false\">\n  <div *ngFor=\"let reorderItem of items\" class=\"outerGroup\">\n    <kirby-card>\n      <ng-container\n        *ngTemplateOutlet=\"itemTemplate || defaultItemTemplate; context: { $implicit: reorderItem }\"\n      >\n      </ng-container>\n      <div *ngIf=\"reorderItem[subItemsName]\" #reorderGroupContainer>\n        <ion-reorder-group (ionItemReorder)=\"doSubReorder($event, reorderItem)\" disabled=\"false\">\n          <div *ngFor=\"let subItem of reorderItem[subItemsName]\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                itemTemplate || defaultItemTemplate;\n                context: { $implicit: subItem, isSubItem: true }\n              \"\n            ></ng-container>\n          </div>\n        </ion-reorder-group>\n      </div>\n    </kirby-card>\n  </div>\n</ion-reorder-group>\n\n<ng-template #defaultItemTemplate let-item let-isSubItem>\n  <kirby-item [reorderable]=\"true\">\n    <h3>{{ getItemTextDefault(item) }}</h3>\n  </kirby-item>\n</ng-template>\n"
    },
    {
      "name": "RouterOutletComponent",
      "id": "component-RouterOutletComponent-6c094490e815cb8c891e9332b7efc1c7",
      "file": "libs/designsystem/src/lib/components/router-outlet/router-outlet.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-router-outlet",
      "styleUrls": ["./router-outlet.component.scss"],
      "styles": [],
      "templateUrl": ["./router-outlet.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "main",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'kirby-router-outlet',\n  templateUrl: './router-outlet.component.html',\n  styleUrls: ['./router-outlet.component.scss'],\n})\nexport class RouterOutletComponent {\n  @Input() main: boolean;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  left: 0px;\n  right: 0px;\n  top: 0px;\n  bottom: 0px;\n  position: absolute;\n  contain: size layout style;\n  z-index: 0;\n  overflow: hidden;\n  background-color: get-color('background-color');\n}\n",
          "styleUrl": "./router-outlet.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ng-container *ngIf=\"main\">\n  <ion-router-outlet main></ion-router-outlet>\n</ng-container>\n<ng-container *ngIf=\"!main\">\n  <ion-router-outlet></ion-router-outlet>\n</ng-container>\n"
    },
    {
      "name": "SegmentedControlComponent",
      "id": "component-SegmentedControlComponent-c9495e246f230b35711dc4cfc0234c89",
      "file": "libs/designsystem/src/lib/components/segmented-control/segmented-control.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-segmented-control",
      "styleUrls": ["./segmented-control.component.scss"],
      "styles": [],
      "templateUrl": ["./segmented-control.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "[]"
        },
        {
          "name": "mode",
          "defaultValue": "SegmentedControlMode.default",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SegmentedControlMode"
        },
        {
          "name": "selectedIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "number"
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": ""
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "segmentSelect",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "EventEmitter<SegmentItem>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_items",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SegmentItem[]",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [121]
        },
        {
          "name": "_selectedIndex",
          "defaultValue": "-1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [121]
        },
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SegmentItem",
          "optional": false,
          "description": "",
          "line": 67,
          "modifierKind": [121]
        },
        {
          "name": "isSmallSize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 77,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sm'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "onSegmentSelect",
          "args": [
            {
              "name": "selectedId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "selectedId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "preventWrapperClick",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string"
        },
        {
          "name": "class.sm",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\n\nimport { SegmentItem } from './segment-item';\n\nexport enum SegmentedControlMode {\n  chip = 'chip',\n  compactChip = 'compactChip',\n  default = 'default',\n}\n\n@Component({\n  selector: 'kirby-segmented-control',\n  templateUrl: './segmented-control.component.html',\n  styleUrls: ['./segmented-control.component.scss'],\n  // tslint:disable-next-line: no-host-metadata-property\n  host: { role: 'group' },\n})\nexport class SegmentedControlComponent {\n  preventWrapperClick(event: Event) {\n    if (event.target instanceof HTMLElement) {\n      if (event.target.classList.contains('segment-btn-wrapper')) {\n        event.stopImmediatePropagation();\n      }\n    }\n  }\n\n  @Input() mode: SegmentedControlMode = SegmentedControlMode.default;\n\n  @HostBinding('class')\n  get _modeCssClass() {\n    return {\n      [SegmentedControlMode.chip]: 'chip-mode',\n      [SegmentedControlMode.default]: 'default-mode',\n      [SegmentedControlMode.compactChip]: 'compact chip-mode',\n    }[this.mode];\n  }\n\n  private _items: SegmentItem[] = [];\n  get items(): SegmentItem[] {\n    return this._items;\n  }\n\n  @Input() set items(value: SegmentItem[]) {\n    this._items = value || [];\n    const checkedItemIndex = this.items.findIndex((item) => item.checked);\n    if (checkedItemIndex > -1) {\n      console.warn(\n        'SegmentItem.checked is deprecated - please remove from your `items` configuration. Use `selectedIndex` or `value` on `<kirby-segmented-control>` instead '\n      );\n      this._selectedIndex = checkedItemIndex;\n    }\n    this._value = this.items[this.selectedIndex];\n  }\n\n  private _selectedIndex: number = -1;\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n\n  @Input() set selectedIndex(value: number) {\n    if (value !== this._selectedIndex) {\n      this._selectedIndex = value;\n      this._value = this.items[this.selectedIndex];\n    }\n  }\n\n  private _value: SegmentItem;\n  get value(): SegmentItem {\n    return this._value;\n  }\n\n  @Input() set value(value: SegmentItem) {\n    this.selectedIndex = this.items.indexOf(value);\n  }\n\n  @HostBinding('class.sm')\n  isSmallSize: boolean;\n\n  @Input() set size(size: 'sm' | 'md') {\n    this.isSmallSize = size === 'sm';\n  }\n\n  @Output() segmentSelect: EventEmitter<SegmentItem> = new EventEmitter();\n\n  onSegmentSelect(selectedId: string) {\n    const selectedItemIndex = this.items.findIndex((item) => selectedId === item.id);\n    if (selectedItemIndex !== this.selectedIndex) {\n      this.selectedIndex = selectedItemIndex;\n      this.segmentSelect.emit(this.value);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host {\n  display: block;\n  user-select: none;\n\n  --kirby-badge-elevation: #{get-elevation(2)};\n  --kirby-badge-position: absolute;\n  --kirby-badge-top: -#{size('xxs')};\n  --kirby-badge-right: #{size('xxs')};\n  --kirby-badge-z-index: z('segmentBadge');\n\n  &.sm {\n    ion-segment-button {\n      min-height: size('l');\n      font-size: font-size('xs');\n      --padding-start: #{size('s')};\n      --padding-end: #{size('s')};\n    }\n  }\n\n  &.chip-mode {\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden; // chip touch area height is bigger than segmented control height\n    // Hide scrollbar on touch device:\n    @include touch() {\n      scrollbar-width: none; /* Firefox */\n      &::-webkit-scrollbar {\n        display: none;\n      }\n    }\n  }\n}\n\nion-segment {\n  display: inline-flex; //The segmented control itself is block-level, but we don't want the background to stretch\n  width: auto; //The segmented control itself is block-level, but we don't want the background to stretch\n  overflow: visible; //Ensures the badge is not cut off\n  contain: unset; //Ensures the badge is not cut off\n  --background: #{get-color('white')};\n  border-radius: $border-radius-round;\n}\n\nion-segment-button {\n  @include accessible-target-size();\n\n  min-height: size('xl');\n  font-weight: font-weight('normal');\n  font-size: font-size('s');\n  text-transform: none;\n  --border-radius: #{$border-radius-round};\n  --border-style: none;\n  --background: none;\n  --color: #{get-color('white-contrast')};\n  --indicator-color: #{get-color('black')};\n  --color-checked: #{get-color('black-contrast')};\n  --color-hover: #{get-color('black-tint')};\n  --indicator-box-shadow: none;\n  --padding-start: #{size('m')};\n  --padding-end: #{size('m')};\n  --margin-bottom: 0;\n  --margin-end: 0;\n  --margin-start: 0;\n  --margin-top: 0;\n  margin: 0;\n}\n\n.segment-btn-wrapper {\n  position: relative;\n}\n\n:host-context(.plt-desktop) {\n  ion-segment-button:focus-within {\n    outline-color: -webkit-focus-ring-color;\n    outline-style: auto;\n  }\n}\n",
          "styleUrl": "./segmented-control.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "_modeCssClass": {
          "name": "_modeCssClass",
          "getSignature": {
            "name": "_modeCssClass",
            "type": "",
            "returnType": "",
            "line": 30
          }
        },
        "items": {
          "name": "items",
          "setSignature": {
            "name": "items",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SegmentItem[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SegmentItem[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "items",
            "type": "[]",
            "returnType": "SegmentItem[]",
            "line": 39
          }
        },
        "selectedIndex": {
          "name": "selectedIndex",
          "setSignature": {
            "name": "selectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedIndex",
            "type": "number",
            "returnType": "number",
            "line": 56
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SegmentItem",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SegmentItem",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "SegmentItem",
            "line": 68
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "size",
                "type": "\"sm\" | \"md\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "size",
                "type": "\"sm\" | \"md\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<ion-segment\n  *ngIf=\"mode === 'default'\"\n  [value]=\"value?.id\"\n  (ionChange)=\"onSegmentSelect($event.detail.value)\"\n  (click)=\"preventWrapperClick($event)\"\n>\n  <div *ngFor=\"let item of items\" class=\"segment-btn-wrapper\">\n    <ion-segment-button [value]=\"item.id\">{{ item.text }}</ion-segment-button>\n    <kirby-badge\n      *ngIf=\"item.badge\"\n      role=\"text\"\n      [attr.aria-label]=\"item.badge.description\"\n      [themeColor]=\"item.badge.themeColor\"\n    >\n      <kirby-icon\n        *ngIf=\"item.badge.icon; else badgeContent\"\n        [customName]=\"item.badge.icon\"\n        [name]=\"item.badge.icon\"\n      ></kirby-icon>\n      <ng-template #badgeContent>\n        {{ item.badge.content }}\n      </ng-template>\n    </kirby-badge>\n  </div>\n</ion-segment>\n\n<ng-container *ngIf=\"mode === 'chip' || mode === 'compactChip'\">\n  <kirby-chip\n    *ngFor=\"let item of items; let index = index\"\n    [text]=\"item.text\"\n    [isSelected]=\"index === selectedIndex\"\n    (click)=\"onSegmentSelect(item.id)\"\n    role=\"button\"\n  ></kirby-chip>\n</ng-container>\n"
    },
    {
      "name": "SlideButtonComponent",
      "id": "component-SlideButtonComponent-f068726ae4a16e562195c5de84366cac",
      "file": "libs/designsystem/src/lib/components/slide-button/slide-button.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-slide-button",
      "styleUrls": ["./slide-button.component.scss"],
      "styles": [],
      "templateUrl": ["./slide-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "expand",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": ""
        },
        {
          "name": "text",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "slideDone",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "EventEmitter"
        },
        {
          "name": "slidingPercentageChanged",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_value",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [121]
        },
        {
          "name": "isSlideDone",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "pctInTens",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "resetSliderIntervalTimer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [121]
        },
        {
          "name": "slideDoneFadeTime",
          "defaultValue": "500",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [143]
        },
        {
          "name": "slideResetTime",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [143]
        }
      ],
      "methodsClass": [
        {
          "name": "calculatePctInTens",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "handleSlideDone",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSliderMousedown",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSliderMouseup",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSliderValueChange",
          "args": [
            {
              "name": "val",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "val",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\n@Component({\n  selector: 'kirby-slide-button',\n  templateUrl: './slide-button.component.html',\n  styleUrls: ['./slide-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SlideButtonComponent implements OnDestroy {\n  @Input() text = '';\n  @Input() expand: 'block';\n\n  @Output() slideDone = new EventEmitter();\n  @Output() slidingPercentageChanged = new EventEmitter<number>();\n\n  readonly slideDoneFadeTime = 500;\n  readonly slideResetTime = 100;\n\n  isSlideDone = false;\n  pctInTens = 0;\n\n  get value(): number {\n    return this._value;\n  }\n  set value(v: number) {\n    this._value = v;\n    this.calculatePctInTens();\n  }\n\n  private _value: number = 0;\n  private resetSliderIntervalTimer: any;\n  private calculatePctInTens() {\n    this.pctInTens = Math.ceil(this.value / 10) * 10;\n  }\n\n  constructor(private changeDetectionRef: ChangeDetectorRef) {}\n\n  ngOnDestroy(): void {\n    if (this.resetSliderIntervalTimer) {\n      clearInterval(this.resetSliderIntervalTimer);\n    }\n  }\n\n  onSliderMouseup() {\n    if (this.value == 100) {\n      this.handleSlideDone();\n    } else {\n      this.resetSliderIntervalTimer = setInterval(() => {\n        if (this.value > 0) {\n          this.value -= 2;\n        } else {\n          clearInterval(this.resetSliderIntervalTimer);\n        }\n\n        this.changeDetectionRef.markForCheck();\n      }, 1);\n    }\n  }\n\n  onSliderValueChange(val: string) {\n    this.value = +val;\n    this.slidingPercentageChanged.emit(this.value);\n  }\n\n  onSliderMousedown() {\n    clearInterval(this.resetSliderIntervalTimer);\n  }\n\n  private handleSlideDone() {\n    this.slideDone.emit();\n    this.isSlideDone = true;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n@import 'slide-button.component.shared';\n\n@mixin _slider-thumb() {\n  -webkit-appearance: none;\n  border-radius: 50%;\n  background-color: $slider-thumb-bg-color;\n  background-image: url('/assets/kirby/icons/svg/arrow-more.svg');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: size('m');\n  width: $slide-button-width;\n  height: $slide-button-width;\n  border: none;\n  cursor: pointer;\n}\n\n:host {\n  position: relative;\n  display: inline-block;\n  width: $slide-button-container-width;\n  user-select: none;\n\n  &[expand='block'] {\n    display: block;\n    width: 100%;\n  }\n\n  .slide-button-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: $slide-button-text-color;\n    background-color: $slide-button-container-bg-color;\n    height: $slide-button-container-height;\n    border-radius: $slide-button-container-radius;\n  }\n\n  @for $i from 1 through 10 {\n    $iTenth: $i * 10;\n    .slide-#{$iTenth}-pct {\n      opacity: 1- ($i/10);\n    }\n  }\n\n  .slide-button-text {\n    position: absolute;\n    font-size: font-size('n');\n    margin: 0;\n    line-height: 1;\n    z-index: 1;\n    width: 100%;\n    text-align: center;\n    padding: $slide-button-text-padding;\n  }\n\n  .slide-button {\n    width: 100%;\n    height: 100%;\n    -webkit-appearance: none;\n    background: transparent;\n    z-index: 2;\n  }\n\n  .slide-button::-webkit-slider-thumb {\n    @include _slider-thumb;\n  }\n\n  .slide-button::-moz-range-thumb {\n    @include _slider-thumb;\n  }\n\n  .slide-done {\n    transition: all 0.3s ease-in-out;\n    opacity: 0;\n    height: 0;\n    transform: scale(0);\n    pointer-events: none;\n  }\n}\n",
          "styleUrl": "./slide-button.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "changeDetectionRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 42,
        "jsdoctags": [
          {
            "name": "changeDetectionRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "v",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "v",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "number",
            "returnType": "number",
            "line": 30
          }
        }
      },
      "templateData": "<div class=\"slide-button-container\" [ngClass]=\"{ 'slide-done': isSlideDone }\">\n  <input\n    type=\"range\"\n    (mouseup)=\"onSliderMouseup()\"\n    (touchend)=\"onSliderMouseup()\"\n    (input)=\"onSliderValueChange($event.target.value)\"\n    (mousedown)=\"onSliderMousedown()\"\n    (touchstart)=\"onSliderMousedown()\"\n    class=\"slide-button\"\n    [value]=\"value\"\n    max=\"100\"\n  />\n  <p class=\"slide-button-text slide-{{ pctInTens }}-pct\">{{ text }}</p>\n</div>\n"
    },
    {
      "name": "SlidesComponent",
      "id": "component-SlidesComponent-8bb57cc9235738de61db219b0a9d785d",
      "file": "libs/designsystem/src/lib/components/slides/slides.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-slides",
      "styleUrls": [],
      "styles": [],
      "template": "<ion-slides [options]=\"slidesOptions\" #ionslides (ionSlideDidChange)=\"onSlideChanged()\">\n  <ion-slide *ngFor=\"let slide of slides; let i = index\">\n    <ng-container\n      *ngTemplateOutlet=\"slideTemplate; context: { $implicit: slide, index: i }\"\n    ></ng-container>\n  </ion-slide>\n</ion-slides>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "slides",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "any[]"
        },
        {
          "name": "slidesOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "any"
        }
      ],
      "outputsClass": [
        {
          "name": "selectedSlide",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "ionSlides",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IonSlides",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'ionslides', {static: false}"
            }
          ]
        },
        {
          "name": "slideTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "SlideDirective, {static: true, read: TemplateRef}"
            }
          ],
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSlideChanged",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "slideTo",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { AfterViewInit, EventEmitter } from '@angular/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { IonSlides } from '@ionic/angular';\n\n@Directive({\n  selector: '[kirbySlide]',\n})\nexport class SlideDirective {}\n\n@Component({\n  selector: 'kirby-slides',\n  template: `\n    <ion-slides [options]=\"slidesOptions\" #ionslides (ionSlideDidChange)=\"onSlideChanged()\">\n      <ion-slide *ngFor=\"let slide of slides; let i = index\">\n        <ng-container\n          *ngTemplateOutlet=\"slideTemplate; context: { $implicit: slide, index: i }\"\n        ></ng-container>\n      </ion-slide>\n    </ion-slides>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SlidesComponent implements AfterViewInit {\n  @ViewChild('ionslides', { static: false }) ionSlides: IonSlides;\n  @Input() slidesOptions: any;\n  @Input() slides: any[];\n  @Output() selectedSlide = new EventEmitter<any>();\n\n  @ContentChild(SlideDirective, { static: true, read: TemplateRef })\n  public slideTemplate: TemplateRef<any>;\n\n  ngAfterViewInit() {\n    this.slideTo(0);\n  }\n\n  onSlideChanged() {\n    this.ionSlides.getActiveIndex().then((selectedIndex) => {\n      this.selectedSlide.emit({\n        slide: this.slides[selectedIndex],\n        index: selectedIndex,\n      });\n    });\n  }\n\n  slideTo(index: number) {\n    this.ionSlides.slideTo(index);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["AfterViewInit"]
    },
    {
      "name": "SpinnerComponent",
      "id": "component-SpinnerComponent-3d39af227ae2bd970a160990cac98153",
      "file": "libs/designsystem/src/lib/components/spinner/spinner.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-spinner",
      "styleUrls": ["./spinner.component.scss"],
      "styles": [],
      "templateUrl": ["./spinner.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kirby-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss'],\n})\nexport class SpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n.spinner {\n  overflow: hidden;\n  width: size('l');\n  height: size('l');\n  position: relative;\n  margin: 0 auto;\n}\n\n.inner-circle,\n.outer-circle {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: get-color('primary');\n  opacity: 0.6;\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation: sk-bounce 2s infinite ease-in-out;\n}\n\n.outer-circle {\n  animation-delay: -1s;\n}\n\n@keyframes sk-bounce {\n  0%,\n  100% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1);\n  }\n}\n",
          "styleUrl": "./spinner.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"spinner\">\n  <div class=\"inner-circle\"></div>\n  <div class=\"outer-circle\"></div>\n</div>\n"
    },
    {
      "name": "StaticFooterEmbeddedComponent",
      "id": "component-StaticFooterEmbeddedComponent-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<div>Some test content</div>\n<kirby-modal-footer>\n  <button kirby-button>Test</button>\n</kirby-modal-footer>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "StaticPageProgressEmbeddedComponent",
      "id": "component-StaticPageProgressEmbeddedComponent-a43a0ac7914b164a69ebb115103f49a9",
      "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<kirby-page-progress> </kirby-page-progress>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { IonButtons, IonContent, IonHeader, IonTitle, IonToolbar } from '@ionic/angular';\nimport { createComponentFactory, Spectator } from '@ngneat/spectator';\nimport { MockComponents } from 'ng-mocks';\n\nimport { WindowRef } from '../../../types';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon';\nimport { PageProgressComponent } from '../../page/page.component';\nimport { ModalFooterComponent } from '../footer/modal-footer.component';\n\nimport { ModalConfig } from './config/modal-config';\nimport { ModalWrapperComponent } from './modal-wrapper.component';\n\nexport class ModalWrapperTestBuilder {\n  private config: ModalConfig = {\n    title: null,\n    component: null,\n    flavor: null,\n  };\n  private readonly createComponent = createComponentFactory({\n    component: ModalWrapperComponent,\n    imports: [RouterTestingModule],\n    entryComponents: [\n      StaticFooterEmbeddedComponent,\n      DynamicFooterEmbeddedComponent,\n      InputEmbeddedComponent,\n      StaticPageProgressEmbeddedComponent,\n      DynamicPageProgressEmbeddedComponent,\n    ],\n    providers: [\n      {\n        provide: WindowRef,\n        useValue: <WindowRef>{ nativeWindow: window },\n      },\n    ],\n    declarations: [\n      MockComponents(\n        IconComponent,\n        ButtonComponent,\n        PageProgressComponent,\n        ModalFooterComponent,\n        IonHeader,\n        IonToolbar,\n        IonTitle,\n        IonButtons,\n        IonContent\n      ),\n    ],\n  });\n\n  title(title: string) {\n    this.config.title = title;\n    return this;\n  }\n\n  flavor(flavor: ModalConfig['flavor']) {\n    this.config.flavor = flavor;\n    return this;\n  }\n\n  interactWithBackground(interactWithBackground: boolean = true) {\n    this.config.interactWithBackground = interactWithBackground;\n    return this;\n  }\n\n  withStaticFooter() {\n    this.config.component = StaticFooterEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicFooter() {\n    this.config.component = DynamicFooterEmbeddedComponent;\n    return this;\n  }\n\n  withEmbeddedInputComponent() {\n    this.config.component = InputEmbeddedComponent;\n    return this;\n  }\n\n  withStaticPageProgress() {\n    this.config.component = StaticPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  withDynamicPageProgress() {\n    this.config.component = DynamicPageProgressEmbeddedComponent;\n    return this;\n  }\n\n  component(component: any) {\n    this.config.component = component;\n    return this;\n  }\n\n  build() {\n    const spectator: Spectator<ModalWrapperComponent> = this.createComponent({\n      props: {\n        config: this.config,\n      },\n      detectChanges: false,\n    });\n    spyOn(spectator.component['ionContent'], 'getScrollElement').and.returnValue(\n      Promise.resolve(document.createElement('DIV'))\n    );\n\n    // TODO: Figure out how to mock ResizeObserverService methods - at this point it's too late as ModalWrapper calls .observe in it's constructor\n    // const resizeObserverService = spectator.inject(ResizeObserverService);\n    // spyOn(resizeObserverService, 'observe');\n    // spyOn(resizeObserverService, 'unobserve');\n\n    const ionModalWrapper = document.createElement('div');\n    const ionModal = document.createElement('div');\n    ionModal['dismiss'] = jasmine.createSpy('dissmissSpy').and.resolveTo(true);\n    spyOn(spectator.element, 'closest')\n      .withArgs('.modal-wrapper')\n      .and.returnValue(ionModalWrapper)\n      .withArgs('ion-modal')\n      .and.returnValue(ionModal);\n\n    spectator.detectChanges();\n\n    return spectator;\n  }\n}\n\n@Component({\n  template: `\n    <div>Some test content</div>\n    <kirby-modal-footer>\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class StaticFooterEmbeddedComponent {}\n\n@Component({\n  template: `\n    <div>DynamicFooterEmbeddedComponent - Some test content</div>\n    <kirby-modal-footer *ngIf=\"showFooter\" [class.enabled]=\"isEnabled\">\n      <button kirby-button>Test</button>\n    </kirby-modal-footer>\n  `,\n})\nexport class DynamicFooterEmbeddedComponent {\n  showFooter = false;\n  isEnabled = false;\n}\n\n@Component({\n  template: `\n    <h2>Embedded Input</h2>\n    <input />\n    <textarea></textarea>\n    <button>Test Button</button>\n  `,\n})\nexport class InputEmbeddedComponent {}\n\n@Component({\n  template: `\n    <kirby-page-progress> </kirby-page-progress>\n  `,\n})\nexport class StaticPageProgressEmbeddedComponent {}\n@Component({\n  template: `\n    <kirby-page-progress *ngIf=\"showPageProgress\"> </kirby-page-progress>\n  `,\n})\nexport class DynamicPageProgressEmbeddedComponent {\n  showPageProgress = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "StockChartDeprecatedComponent",
      "id": "component-StockChartDeprecatedComponent-bea2d4a9a033ce9d7dc688bb937180fb",
      "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/stock-chart-deprecated.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-stock-chart-deprecated",
      "styleUrls": ["./stock-chart-deprecated.component.scss"],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "[]"
        },
        {
          "name": "description",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string"
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "number"
        },
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": ""
        },
        {
          "name": "showDataLabels",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StockChartDeprecatedDataPoint[]",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [121]
        },
        {
          "name": "_height",
          "defaultValue": "300",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [121]
        },
        {
          "name": "_options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [121]
        },
        {
          "name": "chart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Highcharts.Chart",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "chartContainer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "methodsClass": [
        {
          "name": "onDataChanges",
          "args": [
            {
              "name": "data",
              "type": "StockChartDeprecatedDataPoint[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "StockChartDeprecatedDataPoint[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onOptionsChanges",
          "args": [
            {
              "name": "options",
              "type": "Options",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "Options",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, Inject, Input, LOCALE_ID } from '@angular/core';\nimport { Options } from 'highcharts';\nimport * as Highcharts from 'highcharts/highstock';\nimport AnnotationsModule from 'highcharts/modules/annotations';\n\nimport {\n  annotations,\n  StockChartDeprecatedDataPoint,\n} from './options/stock-chart-deprecated-options';\n\n// @ts-ignore\nAnnotationsModule(Highcharts);\n\n@Component({\n  selector: 'kirby-stock-chart-deprecated',\n  template: '',\n  styleUrls: ['./stock-chart-deprecated.component.scss'],\n})\nexport class StockChartDeprecatedComponent {\n  chartContainer: ElementRef;\n  private _data: StockChartDeprecatedDataPoint[];\n  @Input() set data(val: StockChartDeprecatedDataPoint[]) {\n    this.onDataChanges(val);\n  }\n  get data() {\n    return this._data;\n  }\n  private _options: Options;\n  @Input() set options(val: Options) {\n    this.onOptionsChanges(val);\n  }\n  get options() {\n    return this._options;\n  }\n  private _height = 300;\n  @Input() set height(height: number) {\n    this._height = height;\n    if (this.chart) {\n      this.chart.setSize(null, height);\n    }\n  }\n  get height() {\n    return this._height;\n  }\n  @Input() description = '';\n  @Input() showDataLabels = true;\n\n  chart: Highcharts.Chart;\n\n  constructor(hostElement: ElementRef, @Inject(LOCALE_ID) private locale: string) {\n    this.chartContainer = hostElement;\n  }\n\n  onOptionsChanges(options: Options) {\n    this._options = options;\n    this.chart = Highcharts.stockChart(this.chartContainer.nativeElement, this._options);\n  }\n\n  onDataChanges(data: StockChartDeprecatedDataPoint[]) {\n    this._data = data;\n\n    if (this.chart != null) {\n      // First delete all points in the previous series.\n      this.chart.update(\n        {\n          series: [],\n        },\n        false,\n        true\n      );\n      // Remove the annotations.\n      this.chart.removeAnnotation('minmax');\n      // Then update the chart with new series data.\n      this.chart.update(\n        {\n          series: [\n            {\n              type: 'area',\n              data: data,\n            },\n          ],\n        },\n        false,\n        true\n      );\n      // Add the new annotations.\n      this.chart.addAnnotation(annotations(this.locale), false);\n      // And finally redraw the graph with all the changes.\n      this.chart.redraw();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: block;\n}\n",
          "styleUrl": "./stock-chart-deprecated.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 48,
        "jsdoctags": [
          {
            "name": "hostElement",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "locale",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "data": {
          "name": "data",
          "setSignature": {
            "name": "data",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "val",
                "type": "StockChartDeprecatedDataPoint[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "val",
                "type": "StockChartDeprecatedDataPoint[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "data",
            "type": "",
            "returnType": "",
            "line": 25
          }
        },
        "options": {
          "name": "options",
          "setSignature": {
            "name": "options",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "val",
                "type": "Options",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "val",
                "type": "Options",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "options",
            "type": "",
            "returnType": "",
            "line": 32
          }
        },
        "height": {
          "name": "height",
          "setSignature": {
            "name": "height",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "height",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "height",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "height",
            "type": "",
            "returnType": "",
            "line": 42
          }
        }
      }
    },
    {
      "name": "TabButtonComponent",
      "id": "component-TabButtonComponent-bc266814e2cda3b53c9382ede7daea3f",
      "file": "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-tab-button",
      "styleUrls": ["./tab-button.component.scss"],
      "styles": [],
      "templateUrl": ["./tab-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "routerLink",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "click",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "icons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<IconComponent>",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "IconComponent"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClick",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "isSelected",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isSelected",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "removeWrapper",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  QueryList,\n  ContentChildren,\n} from '@angular/core';\n\nimport { IconComponent } from '../../icon/icon.component';\nimport { selectedTabClickEvent } from './tab-button.events';\n\n@Component({\n  selector: 'kirby-tab-button',\n  templateUrl: './tab-button.component.html',\n  styleUrls: ['./tab-button.component.scss'],\n})\nexport class TabButtonComponent implements OnInit {\n  @Input() routerLink: string;\n  @Output() click = new EventEmitter<Event>();\n  @ContentChildren(IconComponent) icons: QueryList<IconComponent>;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.removeWrapper();\n  }\n\n  onClick(event: Event, isSelected: boolean) {\n    this.click.emit(event);\n\n    if (isSelected) {\n      const clickEvent = new CustomEvent(selectedTabClickEvent);\n      dispatchEvent(clickEvent);\n    }\n  }\n\n  private removeWrapper() {\n    const parent = this.elementRef.nativeElement.parentNode;\n    const button = this.elementRef.nativeElement.childNodes[0];\n    this.renderer.removeChild(parent, this.elementRef.nativeElement);\n    this.renderer.appendChild(parent, button);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\nion-tab-button {\n  height: 100%;\n  flex: 1 1 0%;\n  max-width: 168px;\n  font-size: font-size('xxs');\n\n  --color-selected: get-color('black');\n\n  --kirby-badge-position: absolute;\n  --kirby-badge-left: calc(50% + 5px);\n  --kirby-badge-top: 0;\n\n  @include media('>=medium') {\n    flex: none;\n    padding: 0 size('m');\n    margin-right: size('m');\n\n    &:last-child {\n      margin-right: 0;\n    }\n\n    font-size: font-size('s');\n    flex-direction: row;\n\n    --kirby-badge-top: -5px;\n    --kirby-badge-left: auto;\n    --kirby-badge-right: -5px;\n\n    .icon-container {\n      position: relative;\n      margin-right: size('xxs');\n    }\n  }\n\n  @include media('>=large') {\n    @include not-touch {\n      padding: 0 size('xs');\n      margin-right: 0;\n    }\n  }\n}\n",
          "styleUrl": "./tab-button.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<ion-tab-button #ionTabButton [tab]=\"routerLink\" (click)=\"onClick($event, ionTabButton.selected)\">\n  <div class=\"icon-container\" *ngIf=\"icons.length\">\n    <ng-content\n      *ngIf=\"icons.length === 1 || !ionTabButton.selected\"\n      select=\"kirby-icon[:not([selected-tab])]\"\n    ></ng-content>\n    <ng-content *ngIf=\"ionTabButton.selected\" select=\"kirby-icon[selected-tab]\"></ng-content>\n    <ng-content select=\"kirby-badge\"></ng-content>\n  </div>\n  <ion-label>\n    <ng-content></ng-content>\n  </ion-label>\n</ion-tab-button>\n"
    },
    {
      "name": "TabsComponent",
      "id": "component-TabsComponent-97a1dd48f0238f5681e0010402d8982c",
      "file": "libs/designsystem/src/lib/components/tabs/tabs.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-tab-bar",
      "styleUrls": ["./tabs.component.scss"],
      "styles": [],
      "templateUrl": ["./tabs.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "tabBarBottomHidden",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.tab-bar-bottom-hidden'"
            }
          ]
        },
        {
          "name": "tabs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IonTabs",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "IonTabs, {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.tab-bar-bottom-hidden",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { AfterViewInit, Component, HostBinding, ViewChild } from '@angular/core';\nimport { IonTabs } from '@ionic/angular';\n\nimport { TabsService } from './tabs.service';\n\n@Component({\n  selector: 'kirby-tab-bar',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss'],\n})\nexport class TabsComponent implements AfterViewInit {\n  @HostBinding('class.tab-bar-bottom-hidden')\n  tabBarBottomHidden = false;\n  @ViewChild(IonTabs, { static: true }) tabs: IonTabs;\n\n  constructor(private tabsService: TabsService) {}\n\n  ngAfterViewInit() {\n    this.tabsService.setOutlet(this.tabs.outlet);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n:host(:not(.tab-bar-bottom-hidden)) {\n  --kirby-page-footer-safe-area-bottom: 0px;\n}\n\nion-tabs {\n  ion-tab-bar {\n    --background: rgba(#{get-color('white-rgb')}, 0.94);\n    --border: 1px solid #{get-color('light')};\n    --color: #{get-color('black')};\n    display: flex;\n    max-width: var(--kirby-tab-bar-max-width, none);\n    justify-content: center;\n    height: var(--kirby-tab-bar-height);\n\n    $padding: calc((100vw - var(--kirby-tab-bar-max-width, none)) / 2);\n    padding-left: $padding;\n    padding-right: $padding;\n    width: 100%;\n\n    &.bottom-hidden {\n      display: none;\n    }\n  }\n\n  @include media('>=medium') {\n    --kirby-tab-bar-height: 70px;\n  }\n\n  // move tabs to top of screen if not touch and large device\n  @include media('>=large') {\n    @include not-touch {\n      flex-direction: column-reverse;\n      // Ensure page-footer falls back to safe-area default\n      --kirby-page-footer-safe-area-bottom: initial;\n\n      ion-tab-bar {\n        margin: 0 auto;\n        justify-content: flex-end;\n\n        // Ensure tabs are not hidden when displayed at top of screen\n        &.bottom-hidden {\n          display: flex;\n        }\n      }\n    }\n  }\n}\n",
          "styleUrl": "./tabs.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "tabsService",
            "type": "TabsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "tabsService",
            "type": "TabsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "templateData": "<ion-tabs>\n  <ion-tab-bar [class.bottom-hidden]=\"tabBarBottomHidden\">\n    <ng-content></ng-content>\n  </ion-tab-bar>\n</ion-tabs>\n"
    },
    {
      "name": "TextareaComponent",
      "id": "component-TextareaComponent-0032a953e510346299567e9a25a39db4",
      "file": "libs/designsystem/src/lib/components/form-field/textarea/textarea.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "textarea[kirby-textarea]",
      "styleUrls": ["./textarea.component.scss"],
      "styles": [],
      "templateUrl": ["./textarea.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "autocorrect",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "\"on\" | \"off\""
        },
        {
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Removes padding, width, rounded borders and drop-shadow when set to `true`.",
          "description": "<p>Removes padding, width, rounded borders and drop-shadow when set to <code>true</code>.</p>\n",
          "line": 29,
          "type": "boolean"
        },
        {
          "name": "hasError",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean"
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "number"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "kirbyChange",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "methodsClass": [
        {
          "name": "_onCutPaste",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'paste', ['$event.target']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'cut', ['$event.target']"
            }
          ],
          "jsdoctags": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_onKeyUp",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keyup', ['$event.target.value']"
            }
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "cut",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54
        },
        {
          "name": "keyup",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target.value"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48
        },
        {
          "name": "paste",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  HostBinding,\n  EventEmitter,\n  HostListener,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line:component-selector\n  selector: 'textarea[kirby-textarea]',\n  styleUrls: ['./textarea.component.scss'],\n  templateUrl: './textarea.component.html',\n})\nexport class TextareaComponent implements OnChanges {\n  kirbyChange = new EventEmitter<string>();\n\n  @Input() value: string;\n\n  /**\n   * Removes padding, width, rounded borders and drop-shadow when set to `true`.\n   */\n  @HostBinding('class.borderless')\n  @Input()\n  borderless: boolean;\n\n  @HostBinding('class.error')\n  @Input()\n  hasError: boolean;\n\n  @HostBinding('attr.autocomplete')\n  @Input()\n  autocomplete: 'on' | 'off' = 'off';\n\n  @HostBinding('attr.autocorrect')\n  @Input()\n  autocorrect: 'on' | 'off' = 'off';\n\n  @HostBinding('attr.maxlength')\n  @Input()\n  maxlength: number;\n\n  @HostListener('keyup', ['$event.target.value'])\n  _onKeyUp(value: string) {\n    this.kirbyChange.emit(value);\n  }\n\n  @HostListener('paste', ['$event.target'])\n  @HostListener('cut', ['$event.target'])\n  _onCutPaste(target: HTMLInputElement) {\n    //Value of textarea element is updated after cut/paste:\n    setTimeout(() => this.kirbyChange.emit(target.value));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.value) {\n      this.kirbyChange.emit(changes.value.currentValue);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../form-field-inputs.shared';\n\n:host {\n  font-family: var(--kirby-font-family);\n\n  resize: none;\n\n  @include media('>=medium') {\n    resize: vertical;\n  }\n}\n",
          "styleUrl": "./textarea.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnChanges"],
      "templateData": "<ng-content *ngIf=\"!value\"></ng-content>\n<ng-container *ngIf=\"value\">{{ value }}</ng-container>\n"
    },
    {
      "name": "ToggleButtonComponent",
      "id": "component-ToggleButtonComponent-950c9e99427952a0dba700a6191b2688",
      "file": "libs/designsystem/src/lib/components/toggle-button/toggle-button.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-toggle-button",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./toggle-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "checkChanged",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'kirby-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToggleButtonComponent {\n  @Input() checked: boolean;\n  @Output() checkChanged = new EventEmitter<boolean>();\n\n  @HostListener('click')\n  onClick() {\n    this.checked = !this.checked;\n    this.checkChanged.emit(this.checked);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "templateData": "<ng-container *ngIf=\"!checked\">\n  <ng-content select=\"button[kirby-button][unchecked]\"></ng-content>\n</ng-container>\n<ng-container *ngIf=\"checked\">\n  <ng-content select=\"button[kirby-button][checked]\"></ng-content>\n</ng-container>\n"
    },
    {
      "name": "ToggleComponent",
      "id": "component-ToggleComponent-2fe06e756be0b5861663e7bf09cc3265",
      "file": "libs/designsystem/src/lib/components/toggle/toggle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "kirby-toggle",
      "styleUrls": ["./toggle.component.scss"],
      "styles": [],
      "templateUrl": ["./toggle.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "boolean"
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "checkedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onCheckedChange",
          "args": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'kirby-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.scss'],\n})\nexport class ToggleComponent {\n  @Input() checked: boolean = false;\n  @Input() disabled: boolean = false;\n  @Output() checkedChange = new EventEmitter<boolean>();\n  onCheckedChange(checked: boolean): void {\n    this.checked = checked;\n    this.checkedChange.emit(this.checked);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~@kirbydesign/core/src/scss/utils';\n\n.toggle-checked {\n  --background-checked: #{get-color('success')};\n}\n",
          "styleUrl": "./toggle.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ion-toggle\n  [checked]=\"checked\"\n  [disabled]=\"disabled\"\n  (ionChange)=\"onCheckedChange($event.detail.checked)\"\n></ion-toggle>\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-64894ed1b37822cff19fcc70d0e1419b",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [CommonModule, IonicModule],\n  exports: [AppComponent],\n})\nexport class AppModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ChartModule",
      "id": "module-ChartModule-e3699921cf87ca1dc72e32a09b72d7bd",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/chart/chart.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { ChartComponent } from './chart.component';\nimport { ChartConfigService } from './configs/chart-config.service';\n\n@NgModule({\n  declarations: [ChartComponent],\n  exports: [ChartComponent],\n  providers: [ChartConfigService],\n})\nexport class ChartModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ChartConfigService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ChartComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ChartComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "FitHeadingModule",
      "id": "module-FitHeadingModule-f35a06b5c587e5384bb05611783bcebf",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { FitHeadingDirective } from './fit-heading.directive';\n\n@NgModule({\n  declarations: [FitHeadingDirective],\n  exports: [FitHeadingDirective],\n})\nexport class FitHeadingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "FitHeadingDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "FitHeadingDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "IconModule",
      "id": "module-IconModule-3600a86e3e1d8f5c7b574e924bb4be78",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/icon/icon.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\n\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  imports: [IonicModule],\n  declarations: [IconComponent],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "IconComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "IconComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ItemModule",
      "id": "module-ItemModule-9ef6ec5718fa3593944fc3e4958e0c5b",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/item/item.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\n\nimport { IconModule } from '../icon/icon.module';\nimport { ItemComponent } from './item.component';\nimport { LabelComponent } from './label/label.component';\n\n@NgModule({\n  imports: [IonicModule, IconModule, CommonModule],\n  declarations: [ItemComponent, LabelComponent],\n  exports: [ItemComponent, LabelComponent],\n})\nexport class ItemModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ItemComponent"
            },
            {
              "name": "LabelComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "IconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ItemComponent"
            },
            {
              "name": "LabelComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "KirbyModule",
      "id": "module-KirbyModule-fa8f7236640bf146a2941d6f726d87bc",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/kirby.module.ts",
      "methods": [
        {
          "name": "forChild",
          "args": [
            {
              "name": "config",
              "type": "KirbyConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "ModuleWithProviders<KirbyModule>",
          "typeParameters": [],
          "line": 202,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "config",
              "type": "KirbyConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "sourceCode": "import { CommonModule, DOCUMENT } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { UiScrollModule } from 'ngx-ui-scroll';\n\nimport { customElementsInitializer } from './app-initialize';\nimport { AccordionItemComponent } from './components/accordion/accordion-item.component';\nimport { AccordionDirective } from './components/accordion/accordion.directive';\nimport { AppModule } from './components/app/app.module';\nimport { AvatarComponent } from './components/avatar/avatar.component';\nimport { ButtonComponent } from './components/button/button.component';\nimport { CalendarComponent } from './components/calendar/calendar.component';\nimport { CardFooterComponent } from './components/card/card-footer/card-footer.component';\nimport { CardHeaderComponent } from './components/card/card-header/card-header.component';\nimport { CardComponent } from './components/card/card.component';\nimport { ChartDeprecatedComponent } from './components/chart-deprecated/chart-deprecated.component';\nimport { ChartModule } from './components/chart/chart.module';\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\nimport { ChipComponent } from './components/chip/chip.component';\nimport { DividerComponent } from './components/divider/divider.component';\nimport { DropdownComponent } from './components/dropdown/dropdown.component';\nimport { EmptyStateComponent } from './components/empty-state/empty-state.component';\nimport { FabSheetComponent } from './components/fab-sheet/fab-sheet.component';\nimport { FlagComponent } from './components/flag/flag.component';\nimport { DateInputDirective } from './components/form-field/directives/date/date-input.directive';\nimport { DecimalMaskDirective } from './components/form-field/directives/decimal-mask/decimal-mask.directive';\nimport { FormFieldMessageComponent } from './components/form-field/form-field-message/form-field-message.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { InputCounterComponent } from './components/form-field/input-counter/input-counter.component';\nimport { InputComponent } from './components/form-field/input/input.component';\nimport { TextareaComponent } from './components/form-field/textarea/textarea.component';\nimport { BreakpointHelperService } from './components/grid/breakpoint-helper.service';\nimport { GridComponent } from './components/grid/grid.component';\nimport { IconModule } from './components/icon/icon.module';\nimport { ItemModule } from './components/item/item.module';\nimport { ListModule } from './components/list/list.module';\nimport { GroupByPipe } from './components/list/pipes/group-by.pipe';\nimport { LoadingOverlayComponent } from './components/loading-overlay/loading-overlay.component';\nimport { LoadingOverlayService } from './components/loading-overlay/loading-overlay.service';\nimport { ActionSheetComponent } from './components/modal/action-sheet/action-sheet.component';\nimport { AlertComponent } from './components/modal/alert/alert.component';\nimport { ModalFooterComponent } from './components/modal/footer/modal-footer.component';\nimport { ModalCompactWrapperComponent } from './components/modal/modal-wrapper/compact/modal-compact-wrapper.component';\nimport { ModalWrapperComponent } from './components/modal/modal-wrapper/modal-wrapper.component';\nimport { ActionSheetHelper } from './components/modal/services/action-sheet.helper';\nimport { AlertHelper } from './components/modal/services/alert.helper';\nimport { ModalController } from './components/modal/services/modal.controller';\nimport { ModalHelper } from './components/modal/services/modal.helper';\nimport { PageModule } from './components/page/page.module';\nimport { PopoverComponent } from './components/popover/popover.component';\nimport { ProgressCircleRingComponent } from './components/progress-circle/progress-circle-ring.component';\nimport { ProgressCircleComponent } from './components/progress-circle/progress-circle.component';\nimport { RadioGroupComponent } from './components/radio/radio-group/radio-group.component';\nimport { RadioComponent } from './components/radio/radio.component';\nimport { RangeComponent } from './components/range/range.component';\nimport { ReorderListComponent } from './components/reorder-list/reorder-list.component';\nimport { RouterOutletModule } from './components/router-outlet/router-outlet.module';\nimport { SegmentedControlComponent } from './components/segmented-control/segmented-control.component';\nimport { ComponentLoaderDirective } from './components/shared/component-loader.directive';\nimport { ResizeObserverFactory } from './components/shared/resize-observer/resize-observer.factory';\nimport { ResizeObserverService } from './components/shared/resize-observer/resize-observer.service';\nimport { SlideButtonComponent } from './components/slide-button/slide-button.component';\nimport { SlideDirective, SlidesComponent } from './components/slides/slides.component';\nimport { SpinnerModule } from './components/spinner/spinner.module';\nimport { StockChartDeprecatedComponent } from './components/stock-chart-deprecated/stock-chart-deprecated.component';\nimport { TabsModule } from './components/tabs/tabs.module';\nimport { ToastController } from './components/toast/services/toast.controller';\nimport { ToastHelper } from './components/toast/services/toast.helper';\nimport { ToggleButtonModule } from './components/toggle-button/toggle-button.module';\nimport { ToggleComponent } from './components/toggle/toggle.component';\nimport { KirbyBadge as BadgeComponent } from './components/web-component-proxies.component';\nimport { KeyHandlerDirective } from './directives/key-handler/key-handler.directive';\nimport { ModalRouterLinkDirective } from './directives/modal-router-link/modal-router-link.directive';\nimport { ThemeColorDirective } from './directives/theme-color/theme-color.directive';\n\nconst exportedDeclarations = [\n  CardComponent,\n  CardHeaderComponent,\n  CardFooterComponent,\n  ButtonComponent,\n  ChartDeprecatedComponent,\n  StockChartDeprecatedComponent,\n  GridComponent,\n  ComponentLoaderDirective,\n  AvatarComponent,\n  GroupByPipe,\n  CalendarComponent,\n  CheckboxComponent,\n  ActionSheetComponent,\n  ModalFooterComponent,\n  ModalRouterLinkDirective,\n  SegmentedControlComponent,\n  ChipComponent,\n  BadgeComponent,\n  ThemeColorDirective,\n  DateInputDirective,\n  DecimalMaskDirective,\n  SlideButtonComponent,\n  ToggleComponent,\n  EmptyStateComponent,\n  FormFieldComponent,\n  InputComponent,\n  InputCounterComponent,\n  TextareaComponent,\n  FabSheetComponent,\n  DividerComponent,\n  ReorderListComponent,\n  DropdownComponent,\n  LoadingOverlayComponent,\n  ProgressCircleComponent,\n  FlagComponent,\n  SlidesComponent,\n  SlideDirective,\n  AccordionDirective,\n  AccordionItemComponent,\n  RadioComponent,\n  RadioGroupComponent,\n  RangeComponent,\n];\n\nconst declarations = [\n  ...exportedDeclarations,\n  KeyHandlerDirective,\n  FormFieldMessageComponent,\n  AlertComponent,\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ProgressCircleRingComponent,\n  PopoverComponent,\n];\n\nconst exportedModules = [\n  AppModule,\n  RouterOutletModule,\n  PageModule,\n  TabsModule,\n  IconModule,\n  ItemModule,\n  ToggleButtonModule,\n  ListModule,\n  ChartModule,\n  SpinnerModule,\n];\n\nconst exports = [...exportedModules, ...exportedDeclarations];\n\nconst importedModules = [...exportedModules];\n\nconst providers = [\n  ModalController,\n  ActionSheetHelper,\n  ModalHelper,\n  AlertHelper,\n  ToastHelper,\n  ToastController,\n  BreakpointHelperService,\n  LoadingOverlayService,\n  ResizeObserverFactory,\n  ResizeObserverService,\n  customElementsInitializer(),\n];\n\nconst entryComponents = [\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ActionSheetComponent,\n  AlertComponent,\n];\n\nconst ConfigToken = new InjectionToken<any>('USERCONFIG');\nexport interface KirbyConfig {\n  moduleRootRoutePath?: string;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UiScrollModule,\n    IonicModule.forRoot({\n      mode: 'ios',\n      inputShims: true,\n      scrollAssist: true,\n      scrollPadding: false,\n    }),\n    ...importedModules,\n  ],\n  declarations: declarations,\n  providers: providers,\n  entryComponents: entryComponents,\n  exports: exports,\n})\nexport class KirbyModule {\n  static forChild(config?: KirbyConfig): ModuleWithProviders<KirbyModule> {\n    return {\n      ngModule: KirbyModule,\n      providers: [\n        {\n          provide: ConfigToken,\n          useValue: config,\n        },\n      ],\n    };\n  }\n\n  constructor(\n    modalController: ModalController,\n    @Optional() @Inject(ConfigToken) config?: KirbyConfig\n  ) {\n    modalController.initialize(config && config.moduleRootRoutePath);\n  }\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ActionSheetHelper"
            },
            {
              "name": "AlertHelper"
            },
            {
              "name": "BreakpointHelperService"
            },
            {
              "name": "LoadingOverlayService"
            },
            {
              "name": "ModalController"
            },
            {
              "name": "ModalHelper"
            },
            {
              "name": "ResizeObserverFactory"
            },
            {
              "name": "ResizeObserverService"
            },
            {
              "name": "ToastController"
            },
            {
              "name": "ToastHelper"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AlertComponent"
            },
            {
              "name": "FormFieldMessageComponent"
            },
            {
              "name": "KeyHandlerDirective"
            },
            {
              "name": "ModalCompactWrapperComponent"
            },
            {
              "name": "ModalWrapperComponent"
            },
            {
              "name": "PopoverComponent"
            },
            {
              "name": "ProgressCircleRingComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "KirbyTestingBaseModule",
      "id": "module-KirbyTestingBaseModule-54be0751ceac59bcd4aa02257024a9b9",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/testing-base/src/lib/kirby-testing-base.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { MOCK_COMPONENTS } from './mock-components';\nimport { MOCK_DIRECTIVES } from './mock-directives';\n\n@NgModule({\n  declarations: [MOCK_COMPONENTS, MOCK_DIRECTIVES],\n  exports: [MOCK_COMPONENTS, MOCK_DIRECTIVES],\n})\nexport class KirbyTestingBaseModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "MockAccordionItemComponent"
            },
            {
              "name": "MockActionSheetComponent"
            },
            {
              "name": "MockAppComponent"
            },
            {
              "name": "MockAvatarComponent"
            },
            {
              "name": "MockButtonComponent"
            },
            {
              "name": "MockCalendarComponent"
            },
            {
              "name": "MockCardComponent"
            },
            {
              "name": "MockCardFooterComponent"
            },
            {
              "name": "MockCardHeaderComponent"
            },
            {
              "name": "MockChartComponent"
            },
            {
              "name": "MockChartDeprecatedComponent"
            },
            {
              "name": "MockCheckboxComponent"
            },
            {
              "name": "MockChipComponent"
            },
            {
              "name": "MockDividerComponent"
            },
            {
              "name": "MockDropdownComponent"
            },
            {
              "name": "MockEmptyStateComponent"
            },
            {
              "name": "MockFabSheetComponent"
            },
            {
              "name": "MockFitHeadingDirective"
            },
            {
              "name": "MockFlagComponent"
            },
            {
              "name": "MockFormFieldComponent"
            },
            {
              "name": "MockFormFieldMessageComponent"
            },
            {
              "name": "MockGridComponent"
            },
            {
              "name": "MockIconComponent"
            },
            {
              "name": "MockInputComponent"
            },
            {
              "name": "MockInputCounterComponent"
            },
            {
              "name": "MockItemComponent"
            },
            {
              "name": "MockLabelComponent"
            },
            {
              "name": "MockListComponent"
            },
            {
              "name": "MockListHeaderComponent"
            },
            {
              "name": "MockListItemComponent"
            },
            {
              "name": "MockListSectionHeaderComponent"
            },
            {
              "name": "MockLoadingOverlayComponent"
            },
            {
              "name": "MockModalFooterComponent"
            },
            {
              "name": "MockPageActionsComponent"
            },
            {
              "name": "MockPageActionsDirective"
            },
            {
              "name": "MockPageComponent"
            },
            {
              "name": "MockPageContentComponent"
            },
            {
              "name": "MockPageContentDirective"
            },
            {
              "name": "MockPageFooterComponent"
            },
            {
              "name": "MockPageProgressComponent"
            },
            {
              "name": "MockPageTitleComponent"
            },
            {
              "name": "MockPageTitleDirective"
            },
            {
              "name": "MockPageToolbarTitleDirective"
            },
            {
              "name": "MockPopoverComponent"
            },
            {
              "name": "MockProgressCircleComponent"
            },
            {
              "name": "MockRadioComponent"
            },
            {
              "name": "MockRadioGroupComponent"
            },
            {
              "name": "MockRangeComponent"
            },
            {
              "name": "MockReorderListComponent"
            },
            {
              "name": "MockRouterOutletComponent"
            },
            {
              "name": "MockSegmentedControlComponent"
            },
            {
              "name": "MockSlideButtonComponent"
            },
            {
              "name": "MockSpinnerComponent"
            },
            {
              "name": "MockTabButtonComponent"
            },
            {
              "name": "MockTabsComponent"
            },
            {
              "name": "MockTextareaComponent"
            },
            {
              "name": "MockThemeColorDirective"
            },
            {
              "name": "MockToggleButtonComponent"
            },
            {
              "name": "MockToggleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "MockAccordionItemComponent"
            },
            {
              "name": "MockActionSheetComponent"
            },
            {
              "name": "MockAppComponent"
            },
            {
              "name": "MockAvatarComponent"
            },
            {
              "name": "MockButtonComponent"
            },
            {
              "name": "MockCalendarComponent"
            },
            {
              "name": "MockCardComponent"
            },
            {
              "name": "MockCardFooterComponent"
            },
            {
              "name": "MockCardHeaderComponent"
            },
            {
              "name": "MockChartComponent"
            },
            {
              "name": "MockChartDeprecatedComponent"
            },
            {
              "name": "MockCheckboxComponent"
            },
            {
              "name": "MockChipComponent"
            },
            {
              "name": "MockDividerComponent"
            },
            {
              "name": "MockDropdownComponent"
            },
            {
              "name": "MockEmptyStateComponent"
            },
            {
              "name": "MockFabSheetComponent"
            },
            {
              "name": "MockFitHeadingDirective"
            },
            {
              "name": "MockFlagComponent"
            },
            {
              "name": "MockFormFieldComponent"
            },
            {
              "name": "MockFormFieldMessageComponent"
            },
            {
              "name": "MockGridComponent"
            },
            {
              "name": "MockIconComponent"
            },
            {
              "name": "MockInputComponent"
            },
            {
              "name": "MockInputCounterComponent"
            },
            {
              "name": "MockItemComponent"
            },
            {
              "name": "MockLabelComponent"
            },
            {
              "name": "MockListComponent"
            },
            {
              "name": "MockListHeaderComponent"
            },
            {
              "name": "MockListItemComponent"
            },
            {
              "name": "MockListSectionHeaderComponent"
            },
            {
              "name": "MockLoadingOverlayComponent"
            },
            {
              "name": "MockModalFooterComponent"
            },
            {
              "name": "MockPageActionsComponent"
            },
            {
              "name": "MockPageActionsDirective"
            },
            {
              "name": "MockPageComponent"
            },
            {
              "name": "MockPageContentComponent"
            },
            {
              "name": "MockPageContentDirective"
            },
            {
              "name": "MockPageFooterComponent"
            },
            {
              "name": "MockPageProgressComponent"
            },
            {
              "name": "MockPageTitleComponent"
            },
            {
              "name": "MockPageTitleDirective"
            },
            {
              "name": "MockPageToolbarTitleDirective"
            },
            {
              "name": "MockPopoverComponent"
            },
            {
              "name": "MockProgressCircleComponent"
            },
            {
              "name": "MockRadioComponent"
            },
            {
              "name": "MockRadioGroupComponent"
            },
            {
              "name": "MockRangeComponent"
            },
            {
              "name": "MockReorderListComponent"
            },
            {
              "name": "MockRouterOutletComponent"
            },
            {
              "name": "MockSegmentedControlComponent"
            },
            {
              "name": "MockSlideButtonComponent"
            },
            {
              "name": "MockSpinnerComponent"
            },
            {
              "name": "MockTabButtonComponent"
            },
            {
              "name": "MockTabsComponent"
            },
            {
              "name": "MockTextareaComponent"
            },
            {
              "name": "MockThemeColorDirective"
            },
            {
              "name": "MockToggleButtonComponent"
            },
            {
              "name": "MockToggleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "KirbyTestingModule",
      "id": "module-KirbyTestingModule-fabb4c680e75b11523e96c87461ddab2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/testing-jasmine/src/lib/kirby-testing.module.ts",
      "methods": [],
      "sourceCode": "/// <reference path='../../../../../node_modules/@types/jasmine/index.d.ts' />\n\nimport { NgModule } from '@angular/core';\n\nimport { KirbyTestingBaseModule } from '@kirbydesign/designsystem/testing-base';\n\nimport { MOCK_PROVIDERS } from './mock-providers';\n\n@NgModule({\n  imports: [KirbyTestingBaseModule],\n  exports: [KirbyTestingBaseModule],\n  providers: [...MOCK_PROVIDERS],\n})\nexport class KirbyTestingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "KirbyTestingBaseModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "KirbyTestingBaseModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "KirbyTestingModule",
      "id": "module-KirbyTestingModule-fabb4c680e75b11523e96c87461ddab2-1",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/testing-jest/src/lib/kirby-testing.module.ts",
      "methods": [],
      "sourceCode": "/// <reference path='../../../../../node_modules/@types/jest/index.d.ts' />\n\nimport { NgModule } from '@angular/core';\n\nimport { KirbyTestingBaseModule } from '@kirbydesign/designsystem/testing-base';\n\nimport { MOCK_PROVIDERS } from './mock-providers';\n\n@NgModule({\n  imports: [KirbyTestingBaseModule],\n  exports: [KirbyTestingBaseModule],\n  providers: [...MOCK_PROVIDERS],\n})\nexport class KirbyTestingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "KirbyTestingBaseModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "KirbyTestingBaseModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ListModule",
      "id": "module-ListModule-2e4cfa233bc642437ae8d3e70afdccd4",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/list/list.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { UiScrollModule } from 'ngx-ui-scroll';\n\nimport { IconModule } from '../icon/icon.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\n\nimport { InfiniteScrollDirective } from './directives/infinite-scroll.directive';\nimport { ListItemColorDirective } from './directives/list-item-color.directive';\nimport { ListHeaderComponent } from './list-header/list-header.component';\nimport { ListItemComponent } from './list-item/list-item.component';\nimport { ListSectionHeaderComponent } from './list-section-header/list-section-header.component';\nimport { ListComponent } from './list.component';\nimport {\n  ListFlexItemDirective,\n  ListFooterDirective,\n  ListHeaderDirective,\n  ListItemDirective,\n  ListItemTemplateDirective,\n  ListSectionHeaderDirective,\n} from './list.directive';\n\nconst exportedDeclarations = [\n  ListComponent,\n  ListItemComponent,\n  ListItemDirective,\n  ListFlexItemDirective,\n  ListItemTemplateDirective,\n  ListSectionHeaderComponent,\n  ListSectionHeaderDirective,\n  ListHeaderDirective,\n  ListHeaderComponent,\n  ListFooterDirective,\n];\n\nconst declarations = [\n  ...exportedDeclarations,\n  ListItemColorDirective,\n  InfiniteScrollDirective,\n  ListItemComponent,\n];\n\n@NgModule({\n  declarations: declarations,\n  imports: [CommonModule, IconModule, IonicModule, SpinnerModule, UiScrollModule],\n  exports: exportedDeclarations,\n  providers: [],\n})\nexport class ListModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AlertComponent"
            },
            {
              "name": "FormFieldMessageComponent"
            },
            {
              "name": "KeyHandlerDirective"
            },
            {
              "name": "ModalCompactWrapperComponent"
            },
            {
              "name": "ModalWrapperComponent"
            },
            {
              "name": "PopoverComponent"
            },
            {
              "name": "ProgressCircleRingComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "IconModule"
            },
            {
              "name": "SpinnerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "AccordionDirective"
            },
            {
              "name": "AccordionItemComponent"
            },
            {
              "name": "ActionSheetComponent"
            },
            {
              "name": "AvatarComponent"
            },
            {
              "name": "ButtonComponent"
            },
            {
              "name": "CalendarComponent"
            },
            {
              "name": "CardComponent"
            },
            {
              "name": "CardFooterComponent"
            },
            {
              "name": "CardHeaderComponent"
            },
            {
              "name": "ChartDeprecatedComponent"
            },
            {
              "name": "CheckboxComponent"
            },
            {
              "name": "ChipComponent"
            },
            {
              "name": "ComponentLoaderDirective"
            },
            {
              "name": "DateInputDirective"
            },
            {
              "name": "DecimalMaskDirective"
            },
            {
              "name": "DividerComponent"
            },
            {
              "name": "DropdownComponent"
            },
            {
              "name": "EmptyStateComponent"
            },
            {
              "name": "FabSheetComponent"
            },
            {
              "name": "FlagComponent"
            },
            {
              "name": "FormFieldComponent"
            },
            {
              "name": "GridComponent"
            },
            {
              "name": "GroupByPipe"
            },
            {
              "name": "InputComponent"
            },
            {
              "name": "InputCounterComponent"
            },
            {
              "name": "LoadingOverlayComponent"
            },
            {
              "name": "ModalFooterComponent"
            },
            {
              "name": "ModalRouterLinkDirective"
            },
            {
              "name": "ProgressCircleComponent"
            },
            {
              "name": "RadioComponent"
            },
            {
              "name": "RadioGroupComponent"
            },
            {
              "name": "RangeComponent"
            },
            {
              "name": "ReorderListComponent"
            },
            {
              "name": "SegmentedControlComponent"
            },
            {
              "name": "SlideButtonComponent"
            },
            {
              "name": "SlideDirective"
            },
            {
              "name": "SlidesComponent"
            },
            {
              "name": "StockChartDeprecatedComponent"
            },
            {
              "name": "TextareaComponent"
            },
            {
              "name": "ThemeColorDirective"
            },
            {
              "name": "ToggleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PageModule",
      "id": "module-PageModule-796a0f8ac68a1c03aca2afeeeee00dc8",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/page/page.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\n\nimport { FitHeadingModule } from '../../directives/fit-heading/fit-heading.module';\n\nimport { PageFooterComponent } from './page-footer/page-footer.component';\nimport {\n  PageActionsComponent,\n  PageActionsDirective,\n  PageComponent,\n  PageContentComponent,\n  PageContentDirective,\n  PageProgressComponent,\n  PageTitleComponent,\n  PageTitleDirective,\n  PageToolbarTitleDirective,\n} from './page.component';\n\n@NgModule({\n  declarations: [\n    PageComponent,\n    PageActionsComponent,\n    PageActionsDirective,\n    PageContentComponent,\n    PageFooterComponent,\n    PageContentDirective,\n    PageProgressComponent,\n    PageTitleComponent,\n    PageTitleDirective,\n    PageToolbarTitleDirective,\n  ],\n  imports: [CommonModule, IonicModule, FitHeadingModule],\n  exports: [\n    PageComponent,\n    PageActionsComponent,\n    PageActionsDirective,\n    PageContentComponent,\n    PageFooterComponent,\n    PageContentDirective,\n    PageProgressComponent,\n    PageTitleComponent,\n    PageTitleDirective,\n    PageToolbarTitleDirective,\n    FitHeadingModule,\n  ],\n})\nexport class PageModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PageActionsComponent"
            },
            {
              "name": "PageActionsDirective"
            },
            {
              "name": "PageComponent"
            },
            {
              "name": "PageContentComponent"
            },
            {
              "name": "PageContentDirective"
            },
            {
              "name": "PageFooterComponent"
            },
            {
              "name": "PageProgressComponent"
            },
            {
              "name": "PageTitleComponent"
            },
            {
              "name": "PageTitleDirective"
            },
            {
              "name": "PageToolbarTitleDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "FitHeadingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "FitHeadingModule"
            },
            {
              "name": "PageActionsComponent"
            },
            {
              "name": "PageActionsDirective"
            },
            {
              "name": "PageComponent"
            },
            {
              "name": "PageContentComponent"
            },
            {
              "name": "PageContentDirective"
            },
            {
              "name": "PageFooterComponent"
            },
            {
              "name": "PageProgressComponent"
            },
            {
              "name": "PageTitleComponent"
            },
            {
              "name": "PageTitleDirective"
            },
            {
              "name": "PageToolbarTitleDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "RouterOutletModule",
      "id": "module-RouterOutletModule-dff471fc77206015963bc8011b6d9954",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/router-outlet/router-outlet.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { RouterOutletComponent } from './router-outlet.component';\n\n@NgModule({\n  declarations: [RouterOutletComponent],\n  imports: [CommonModule, IonicModule],\n  exports: [RouterOutletComponent],\n})\nexport class RouterOutletModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "RouterOutletComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "RouterOutletComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SpinnerModule",
      "id": "module-SpinnerModule-a331e0f427bae0fef91e26e7f67435f9",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/spinner/spinner.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  declarations: [SpinnerComponent],\n  imports: [CommonModule],\n  exports: [SpinnerComponent],\n  providers: [],\n})\nexport class SpinnerModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "SpinnerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "SpinnerComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TabsModule",
      "id": "module-TabsModule-dbed2990e42d2f4ce6e76a0ec7b76404",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/tabs/tabs.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\n\nimport { TabsComponent } from './tabs.component';\nimport { TabButtonComponent } from './tab-button/tab-button.component';\nimport { IconModule } from '../icon/icon.module';\nimport { TabsService } from './tabs.service';\n\n@NgModule({\n  imports: [IonicModule, IconModule, CommonModule],\n  providers: [TabsService],\n  declarations: [TabsComponent, TabButtonComponent],\n  exports: [TabsComponent, TabButtonComponent],\n})\nexport class TabsModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "TabsService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TabButtonComponent"
            },
            {
              "name": "TabsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "IconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TabButtonComponent"
            },
            {
              "name": "TabsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ToggleButtonModule",
      "id": "module-ToggleButtonModule-34d22dd6863666a48376a615af8d7bdd",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/designsystem/src/lib/components/toggle-button/toggle-button.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ToggleButtonComponent } from './toggle-button.component';\n\nconst DECLARATIONS = [ToggleButtonComponent];\n\n@NgModule({\n  declarations: [...DECLARATIONS],\n  imports: [CommonModule],\n  exports: [...DECLARATIONS],\n})\nexport class ToggleButtonModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ToggleButtonComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ToggleButtonComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "ACTIVITYGAUGE_OPTIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<Options>('ActivityGaugeOptions')"
      },
      {
        "name": "ActivityGaugeOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    style: {\n      fontFamily: 'Roboto, sans-serif',\n      fontWeight: '300',\n    },\n    backgroundColor: 'transparent',\n    type: 'solidgauge',\n    height: '110%',\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    align: 'center',\n    verticalAlign: 'middle',\n    text: '',\n    y: 0,\n    floating: false,\n    style: {\n      fontSize: '30px',\n      color: '#fff',\n      fontWeight: 'bold',\n    },\n  },\n  subtitle: {\n    text: '',\n    align: 'center',\n    y: 25,\n    verticalAlign: 'middle',\n    style: {\n      color: '#fff',\n      fontSize: '14px',\n      fontWeight: 'normal',\n    },\n  },\n  credits: {\n    enabled: false,\n  },\n  tooltip: {\n    enabled: false,\n    animation: false,\n  },\n  pane: {\n    startAngle: 0,\n    endAngle: 360,\n    background: [\n      {\n        backgroundColor: {\n          linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n          stops: [\n            [1, 'rgba(255, 255, 255, 0.3)'],\n            [0, 'rgba(255, 255, 255, 0.3)'],\n          ],\n        },\n        outerRadius: '112%',\n        innerRadius: '88%',\n        borderWidth: 0,\n      },\n    ],\n  },\n  yAxis: {\n    min: 0,\n    max: 100,\n    lineWidth: 0,\n    tickPositions: [],\n  },\n  plotOptions: {\n    solidgauge: {\n      dataLabels: {\n        enabled: false,\n      },\n      linecap: 'round',\n      stickyTracking: false,\n      rounded: true,\n    },\n  },\n  series: [\n    {\n      type: 'solidgauge',\n    },\n  ],\n}"
      },
      {
        "name": "annotations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(locale: string): Highcharts.AnnotationsOptions => {\n  return {\n    id: 'minmax',\n    zIndex: 2,\n    labels: [\n      {\n        point: 'max',\n        shape: 'rect',\n        distance: 5,\n        align: 'center',\n        verticalAlign: 'top',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n      {\n        point: 'min',\n        shape: 'rect',\n        distance: -28,\n        align: 'center',\n        verticalAlign: 'bottom',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n    ],\n    labelOptions: {\n      y: 0,\n      allowOverlap: true,\n    },\n  };\n}"
      },
      {
        "name": "appInitialize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/app-initialize.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(doc: Document) => {\n  return () => {\n    defineCustomElements(doc.defaultView);\n  };\n}"
      },
      {
        "name": "AREASPLINE_OPTIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<Options>('AreasplineOptions')"
      },
      {
        "name": "AreaSplineOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    type: 'areaspline',\n    borderWidth: 0,\n    plotBorderWidth: 0,\n    margin: 0,\n    marginTop: 48,\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    text: '',\n  },\n  credits: {\n    enabled: false,\n  },\n  exporting: {\n    enabled: false,\n  },\n  tooltip: {\n    enabled: true,\n    animation: false,\n    shape: 'square',\n    borderColor: '#FFFFFF',\n    shadow: false,\n    backgroundColor: '#FFFFFF',\n    style: {\n      fontSize: '1.25rem',\n    },\n    formatter: function(): string {\n      return String(this.y);\n    },\n    positioner: function() {\n      return { x: this.chart.plotSizeX / 2 - this.label.width / 2, y: 0 };\n    },\n  },\n  xAxis: {\n    visible: false,\n    minPadding: 0,\n    maxPadding: 0,\n    crosshair: {\n      zIndex: 3,\n      width: 1,\n      color: '#177E17',\n    },\n  },\n  yAxis: {\n    visible: false,\n    endOnTick: false,\n    startOnTick: false,\n  },\n  plotOptions: {\n    areaspline: {\n      shadow: true,\n      showInLegend: false,\n      fillColor: {\n        linearGradient: { x1: 0, x2: 0, y1: 0, y2: 0.8 },\n        stops: [\n          [0, '#C9E5C9'],\n          [1, '#FFFFFF'],\n        ],\n      },\n      lineColor: '#177E17',\n      lineWidth: 2,\n    },\n    series: {\n      states: {\n        hover: {\n          halo: {\n            size: 0,\n          },\n        },\n      },\n      marker: {\n        enabled: false,\n        states: {\n          hover: {\n            enabled: true,\n            fillColor: '#177E17',\n          },\n        },\n      },\n    },\n  },\n  series: [\n    {\n      type: 'areaspline',\n    },\n  ],\n}"
      },
      {
        "name": "backgroundColor",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "getThemeColorHexString('secondary')"
      },
      {
        "name": "barOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    type: 'bar',\n    animation: {\n      duration: 150,\n    },\n    backgroundColor: 'transparent',\n    events: {\n      load: colorPoints,\n      redraw: colorPoints,\n    },\n  },\n  accessibility: {\n    description: 'Bar chart',\n  },\n  credits: {\n    enabled: false,\n  },\n  title: {\n    text: '',\n  },\n  xAxis: {\n    labels: {\n      style: {\n        fontSize: fontSize('s'),\n        fontFamily: 'Roboto',\n        color: getColor('black').value,\n      },\n    },\n    min: 0,\n    lineColor: 'transparent',\n  },\n  yAxis: {\n    title: {\n      text: '',\n    },\n    labels: {\n      enabled: false,\n    },\n    min: 0,\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    gridLineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n    maxPadding: 0,\n    endOnTick: false,\n    showLastLabel: false,\n    showFirstLabel: false,\n  },\n  plotOptions: {\n    bar: {\n      events: {},\n    },\n    series: {\n      color: getColor('secondary').value,\n      stacking: 'normal',\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n  },\n  tooltip: {\n    enabled: false,\n  },\n  legend: {\n    enabled: false,\n  },\n}"
      },
      {
        "name": "borderColor",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "getThemeColorHexString('semi-dark')"
      },
      {
        "name": "borderDash",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "[6, 3]"
      },
      {
        "name": "borderWidth",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "number",
        "defaultValue": "1"
      },
      {
        "name": "CHART_ANNOTATIONS_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "AnnotationTypeRegistry",
        "defaultValue": "{\n  line: {\n    borderDash,\n    borderWidth,\n    borderColor,\n  },\n  ellipse: {\n    borderDash,\n    borderWidth,\n    borderColor,\n    backgroundColor: 'transparent',\n  },\n  box: {\n    borderDash,\n    borderWidth,\n    borderColor,\n    backgroundColor: 'transparent',\n  },\n  point: {\n    backgroundColor: 'initial',\n  },\n}"
      },
      {
        "name": "CHART_CONTROLLERS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[BarController, LineController]"
      },
      {
        "name": "CHART_ELEMENTS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[BarElement, LineElement, PointElement]"
      },
      {
        "name": "CHART_GLOBAL_DEFAULTS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  maintainAspectRatio: false,\n  color: getThemeColorHexString('black'),\n  resizeDelay: 10,\n  elements: {\n    bar: {\n      backgroundColor: scriptedBackgroundColor,\n      hoverBackgroundColor: scriptedHoverBackgroundColor,\n    },\n    line: {\n      borderColor: scriptedBackgroundColor,\n      borderWidth: 2,\n      tension: 0.3,\n    },\n  },\n  scales: {\n    linear: {\n      display: false,\n      ticks: {\n        display: false,\n      },\n    },\n    category: {\n      display: true,\n      grid: {\n        display: false,\n      },\n    },\n  },\n  font: {\n    family: 'Roboto',\n  },\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n}"
      },
      {
        "name": "CHART_INTERACTION_FUNCTIONS_EXTENSIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/interaction-functions-extensions.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  onHover: (\n    _event: ChartEvent,\n    activeElements: ActiveElement[],\n    _chart: Chart,\n    callback: ChartOptions['onHover']\n  ) => {\n    if (_chart.options.onClick) {\n      _chart.canvas.style.cursor = activeElements[0] ? 'pointer' : 'default';\n    }\n\n    if (callback) callback(_event, activeElements, _chart);\n  },\n}"
      },
      {
        "name": "CHART_PLUGINS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[annotationPlugin]"
      },
      {
        "name": "CHART_SCALES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[CategoryScale, LinearScale]"
      },
      {
        "name": "CHART_TYPES_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ChartTypesConfig",
        "defaultValue": "{\n  bar: {\n    type: 'bar',\n    options: {\n      datasets: {\n        bar: {\n          barPercentage: 0.6,\n        },\n        line: {\n          spanGaps: true,\n        },\n      },\n      indexAxis: 'y',\n      scales: {\n        y: {\n          grid: {\n            drawBorder: false,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('s')),\n            },\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n        line: {\n          borderColor: getThemeColorHexString('medium'),\n        },\n      },\n    },\n  },\n  column: {\n    type: 'bar',\n    options: {\n      datasets: {\n        bar: {\n          barPercentage: 0.6,\n        },\n        line: {\n          spanGaps: true,\n        },\n      },\n      indexAxis: 'x',\n      scales: {\n        x: {\n          grid: {\n            drawBorder: false,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('xs')),\n            },\n          },\n        },\n      },\n      elements: {\n        line: {\n          tension: 0.2,\n          borderColor: getThemeColorHexString('medium'),\n        },\n        point: {\n          radius: 0,\n        },\n      },\n    },\n  },\n  line: {\n    type: 'line',\n    options: {\n      scales: {\n        x: {\n          grid: {\n            borderColor: getThemeColorHexString('medium'),\n            borderWidth: 1,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('xs')),\n            },\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n      },\n    },\n  },\n}"
      },
      {
        "name": "columnOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    animation: {\n      duration: 500,\n    },\n    backgroundColor: 'transparent',\n    type: 'column',\n    events: {\n      load: colorPoints,\n      redraw: colorPoints,\n    },\n  },\n  title: {\n    text: '',\n  },\n  accessibility: {\n    description: 'Column chart',\n  },\n  xAxis: {\n    labels: {\n      style: {\n        fontSize: fontSize('xxs'),\n        fontFamily: 'Roboto',\n        color: getColor('black').value,\n      },\n    },\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    lineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n  },\n  yAxis: {\n    title: {\n      text: '',\n    },\n    labels: {\n      enabled: false,\n    },\n    min: 0,\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    gridLineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n    showLastLabel: false,\n    showFirstLabel: false,\n  },\n  credits: {\n    enabled: false,\n  },\n  plotOptions: {\n    column: {\n      stacking: 'normal',\n    },\n    series: {\n      color: getColor('secondary').value,\n      zIndex: 10,\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n    line: {\n      className: 'avg-line',\n      marker: {\n        enabled: false,\n      },\n      allowPointSelect: false,\n    },\n  },\n  tooltip: {\n    enabled: false,\n  },\n  legend: {\n    enabled: false,\n  },\n}"
      },
      {
        "name": "COMPONENT_PROPS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.helper.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<string>('componentProps')"
      },
      {
        "name": "config",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/helpers/line-clamp-helper.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Object.freeze({\n  className: 'kirby-line-clamp',\n  lineClamp: '--line-clamp',\n  lineHeight: '--line-height',\n})"
      },
      {
        "name": "ConfigToken",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<any>('USERCONFIG')"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ...exportedDeclarations,\n  KeyHandlerDirective,\n  FormFieldMessageComponent,\n  AlertComponent,\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ProgressCircleRingComponent,\n  PopoverComponent,\n]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/list/list.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ...exportedDeclarations,\n  ListItemColorDirective,\n  InfiniteScrollDirective,\n  ListItemComponent,\n]"
      },
      {
        "name": "DECLARATIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/toggle-button/toggle-button.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[ToggleButtonComponent]"
      },
      {
        "name": "defaultIcons",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "kirbyIconSettings.icons.map((icon) => icon.name)"
      },
      {
        "name": "defaultOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(locale: string) => {\n  return {\n    chart: {\n      zoomType: 'x',\n      type: 'StockChart',\n      spacingTop: 30,\n      //spacingRight: 55,\n    },\n    navigator: {\n      enabled: false,\n    },\n    rangeSelector: {\n      enabled: false,\n    },\n    scrollbar: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    title: {\n      text: '',\n    },\n    subtitle: {\n      text: '',\n    },\n    xAxis: {\n      ordinal: true,\n      type: 'datetime',\n      lineWidth: 0.5,\n      opposite: false,\n      labels: {\n        format: '{value:%Y-%b-%e %l:%M %p }',\n      },\n    },\n    yAxis: {\n      opposite: false,\n      title: {\n        text: '',\n      },\n      /* Doesn't work before upgrade.\n        labels: {\n          x: 0,\n          y: 10,\n          align: 'right',\n        },\n         */\n    },\n    annotations: [annotations(locale)],\n    legend: {\n      enabled: false,\n    },\n    tooltip: {\n      crosshairs: {\n        width: 1,\n        zIndex: 2,\n      },\n      shadow: false,\n      borderWidth: 0,\n    },\n    plotOptions: {\n      area: {\n        marker: {\n          lineWidth: 16,\n          radius: 7,\n        },\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        events: {},\n        threshold: null,\n      },\n      series: {\n        marker: {\n          zIndex: 100,\n          enabledThreshold: 50,\n        },\n      },\n    },\n    series: [\n      {\n        type: 'area',\n        data: [],\n      },\n    ],\n  };\n}"
      },
      {
        "name": "DONUT_OPTIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<Options>('DonutOptions')"
      },
      {
        "name": "DonutOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    style: {\n      fontFamily: 'Roboto',\n      fontWeight: '300',\n    },\n    backgroundColor: 'transparent',\n    type: '',\n  },\n  accessibility: {\n    description: 'Donut chart',\n  },\n  title: {\n    text: '',\n  },\n  tooltip: {\n    enabled: false,\n    animation: false,\n  },\n  legend: {\n    layout: 'vertical',\n    symbolRadius: 0,\n    itemStyle: {\n      fontSize: '.875rem',\n    },\n  },\n  plotOptions: {\n    pie: {\n      colors: ['#015132', '#B2D1BF', '#AABC08', '#1FA05A', 'yellowgreen'],\n      allowPointSelect: false,\n      cursor: 'pointer',\n      showInLegend: true,\n      borderColor: null,\n      dataLabels: {\n        format: '{point.label}',\n        enabled: true,\n        connectorWidth: 0,\n        distance: 5,\n        style: {\n          fontSize: '1rem',\n          fontWeight: '200',\n        },\n      },\n      point: {\n        events: {\n          legendItemClick: () => {\n            // Prevent the default behavior (toggle visibility of slices when clicking on legends)\n            return false;\n          },\n        },\n      },\n      states: {\n        hover: {\n          enabled: false,\n        },\n      },\n    },\n    series: {\n      animation: true,\n      dataLabels: {},\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n  },\n  series: [\n    {\n      name: '',\n      type: 'pie',\n    },\n  ],\n  credits: {\n    enabled: false,\n  },\n  exporting: {\n    enabled: false,\n  },\n  responsive: {\n    rules: [\n      {\n        condition: {\n          minWidth: 640,\n        },\n        chartOptions: {\n          legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            itemMarginTop: 12,\n            symbolRadius: 0,\n            symbolWidth: 14,\n            symbolHeight: 14,\n            x: -100,\n          },\n        },\n      },\n      {\n        condition: {\n          minWidth: 0,\n        },\n        chartOptions: {\n          legend: {\n            symbolRadius: 0,\n          },\n        },\n      },\n    ],\n  },\n}"
      },
      {
        "name": "Easing",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/animation/kirby-animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.transitionEasings()"
      },
      {
        "name": "ElementCssCustomMatchers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "CustomMatcherFactories",
        "defaultValue": "{\n  toHaveComputedStyle: (util: MatchersUtil, customEqualityTesters: CustomEqualityTester[]) =>\n    cssPropertyMatcher(util, customEqualityTesters),\n}"
      },
      {
        "name": "entryComponents",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ActionSheetComponent,\n  AlertComponent,\n]"
      },
      {
        "name": "exportedDeclarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  CardComponent,\n  CardHeaderComponent,\n  CardFooterComponent,\n  ButtonComponent,\n  ChartDeprecatedComponent,\n  StockChartDeprecatedComponent,\n  GridComponent,\n  ComponentLoaderDirective,\n  AvatarComponent,\n  GroupByPipe,\n  CalendarComponent,\n  CheckboxComponent,\n  ActionSheetComponent,\n  ModalFooterComponent,\n  ModalRouterLinkDirective,\n  SegmentedControlComponent,\n  ChipComponent,\n  BadgeComponent,\n  ThemeColorDirective,\n  DateInputDirective,\n  DecimalMaskDirective,\n  SlideButtonComponent,\n  ToggleComponent,\n  EmptyStateComponent,\n  FormFieldComponent,\n  InputComponent,\n  InputCounterComponent,\n  TextareaComponent,\n  FabSheetComponent,\n  DividerComponent,\n  ReorderListComponent,\n  DropdownComponent,\n  LoadingOverlayComponent,\n  ProgressCircleComponent,\n  FlagComponent,\n  SlidesComponent,\n  SlideDirective,\n  AccordionDirective,\n  AccordionItemComponent,\n  RadioComponent,\n  RadioGroupComponent,\n  RangeComponent,\n]"
      },
      {
        "name": "exportedDeclarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/list/list.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ListComponent,\n  ListItemComponent,\n  ListItemDirective,\n  ListFlexItemDirective,\n  ListItemTemplateDirective,\n  ListSectionHeaderComponent,\n  ListSectionHeaderDirective,\n  ListHeaderDirective,\n  ListHeaderComponent,\n  ListFooterDirective,\n]"
      },
      {
        "name": "exportedModules",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AppModule,\n  RouterOutletModule,\n  PageModule,\n  TabsModule,\n  IconModule,\n  ItemModule,\n  ToggleButtonModule,\n  ListModule,\n  ChartModule,\n  SpinnerModule,\n]"
      },
      {
        "name": "exports",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[...exportedModules, ...exportedDeclarations]"
      },
      {
        "name": "fontSize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.fontSize"
      },
      {
        "name": "fontSize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.fontSize"
      },
      {
        "name": "fontSize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.fontSize"
      },
      {
        "name": "getColor",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.getColor"
      },
      {
        "name": "getColor",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.getColor"
      },
      {
        "name": "hoverBackgroundColor",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "getThemeColorHexString('primary')"
      },
      {
        "name": "ICON_SETTINGS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<IconSettings>('IconSettings')"
      },
      {
        "name": "importedModules",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[...exportedModules]"
      },
      {
        "name": "INFINITE_SCROLL_DEBOUNCE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "number",
        "defaultValue": "100",
        "rawdescription": "Specify debounce duration in ms",
        "description": "<p>Specify debounce duration in ms</p>\n"
      },
      {
        "name": "INTERVAL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/list/list.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "number",
        "defaultValue": "400"
      },
      {
        "name": "kirbyIconSettings",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "IconSettings",
        "defaultValue": "{\n  icons: [\n    { name: 'accounts-outline', svg: 'assets/kirby/icons/svg/accounts-outline.svg' },\n    { name: 'accounts', svg: 'assets/kirby/icons/svg/accounts.svg' },\n    { name: 'add', svg: 'assets/kirby/icons/svg/add.svg' },\n    { name: 'remove', svg: 'assets/kirby/icons/svg/remove.svg' },\n    { name: 'unsubscribe', svg: 'assets/kirby/icons/svg/unsubscribe.svg' },\n    { name: 'arrow-back', svg: 'assets/kirby/icons/svg/arrow-back.svg' },\n    { name: 'arrow-down', svg: 'assets/kirby/icons/svg/arrow-down.svg' },\n    { name: 'arrow-more', svg: 'assets/kirby/icons/svg/arrow-more.svg' },\n    { name: 'arrow-up', svg: 'assets/kirby/icons/svg/arrow-up.svg' },\n    { name: 'attach', svg: 'assets/kirby/icons/svg/attach.svg' },\n    { name: 'backspace', svg: 'assets/kirby/icons/svg/backspace.svg' },\n    { name: 'calendar', svg: 'assets/kirby/icons/svg/calendar.svg' },\n    { name: 'camera', svg: 'assets/kirby/icons/svg/camera.svg' },\n    { name: 'checkbox-outline', svg: 'assets/kirby/icons/svg/checkbox-outline.svg' },\n    { name: 'checkbox', svg: 'assets/kirby/icons/svg/checkbox.svg' },\n    { name: 'checkmark-selected', svg: 'assets/kirby/icons/svg/checkmark-selected.svg' },\n    { name: 'close', svg: 'assets/kirby/icons/svg/close.svg' },\n    { name: 'cog', svg: 'assets/kirby/icons/svg/cog.svg' },\n    { name: 'copy', svg: 'assets/kirby/icons/svg/copy.svg' },\n    { name: 'flag', svg: 'assets/kirby/icons/svg/flag.svg' },\n    { name: 'edit', svg: 'assets/kirby/icons/svg/edit.svg' },\n    { name: 'filter', svg: 'assets/kirby/icons/svg/filter.svg' },\n    { name: 'flash-off', svg: 'assets/kirby/icons/svg/flash-off.svg' },\n    { name: 'flash', svg: 'assets/kirby/icons/svg/flash.svg' },\n    { name: 'moneybag', svg: 'assets/kirby/icons/svg/moneybag.svg' },\n    { name: 'help', svg: 'assets/kirby/icons/svg/help.svg' },\n    { name: 'home', svg: 'assets/kirby/icons/svg/home.svg' },\n    { name: 'inbox', svg: 'assets/kirby/icons/svg/inbox.svg' },\n    { name: 'inbox-outline', svg: 'assets/kirby/icons/svg/inbox-outline.svg' },\n    { name: 'information', svg: 'assets/kirby/icons/svg/information.svg' },\n    { name: 'investment', svg: 'assets/kirby/icons/svg/investment.svg' },\n    { name: 'kirby', svg: 'assets/kirby/icons/svg/kirby.svg' },\n    { name: 'link', svg: 'assets/kirby/icons/svg/link.svg' },\n    { name: 'log-out', svg: 'assets/kirby/icons/svg/log-out.svg' },\n    { name: 'menu-outline', svg: 'assets/kirby/icons/svg/menu-outline.svg' },\n    { name: 'menu', svg: 'assets/kirby/icons/svg/menu.svg' },\n    { name: 'misc', svg: 'assets/kirby/icons/svg/misc.svg' },\n    { name: 'more', svg: 'assets/kirby/icons/svg/more.svg' },\n    { name: 'move', svg: 'assets/kirby/icons/svg/move.svg' },\n    { name: 'pension', svg: 'assets/kirby/icons/svg/pension.svg' },\n    { name: 'person-outline', svg: 'assets/kirby/icons/svg/person-outline.svg' },\n    { name: 'person', svg: 'assets/kirby/icons/svg/person.svg' },\n    { name: 'qr', svg: 'assets/kirby/icons/svg/QR.svg' },\n    { name: 'search', svg: 'assets/kirby/icons/svg/search.svg' },\n    { name: 'share', svg: 'assets/kirby/icons/svg/share.svg' },\n    { name: 'sort', svg: 'assets/kirby/icons/svg/sort.svg' },\n    { name: 'support', svg: 'assets/kirby/icons/svg/support.svg' },\n    { name: 'swap', svg: 'assets/kirby/icons/svg/swap.svg' },\n    { name: 'trash', svg: 'assets/kirby/icons/svg/trash.svg' },\n    { name: 'foreign-payment', svg: 'assets/kirby/icons/svg/foreign-payment.svg' },\n    { name: 'clock', svg: 'assets/kirby/icons/svg/clock.svg' },\n    { name: 'verify', svg: 'assets/kirby/icons/svg/verify.svg' },\n    { name: 'warning', svg: 'assets/kirby/icons/svg/warning.svg' },\n    { name: 'write-message', svg: 'assets/kirby/icons/svg/write-message.svg' },\n    { name: 'reorder', svg: 'assets/kirby/icons/svg/reorder.svg' },\n  ],\n}"
      },
      {
        "name": "lineHeight",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper.lineHeight"
      },
      {
        "name": "mergedDefaults",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "mergeDeepAll(Chart.defaults, CHART_GLOBAL_DEFAULTS)"
      },
      {
        "name": "MOCK_COMPONENTS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/testing-base/src/lib/mock-components.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\r\n  MockAccordionItemComponent,\r\n  MockAppComponent,\r\n  MockAvatarComponent,\r\n  MockButtonComponent,\r\n  MockCalendarComponent,\r\n  MockCardFooterComponent,\r\n  MockCardHeaderComponent,\r\n  MockCardComponent,\r\n  MockChartComponent,\r\n  MockChartDeprecatedComponent,\r\n  MockCheckboxComponent,\r\n  MockChipComponent,\r\n  MockDividerComponent,\r\n  MockDropdownComponent,\r\n  MockEmptyStateComponent,\r\n  MockFabSheetComponent,\r\n  MockFlagComponent,\r\n  MockFormFieldMessageComponent,\r\n  MockFormFieldComponent,\r\n  MockInputComponent,\r\n  MockInputCounterComponent,\r\n  MockTextareaComponent,\r\n  MockGridComponent,\r\n  MockIconComponent,\r\n  MockItemComponent,\r\n  MockLabelComponent,\r\n  MockListHeaderComponent,\r\n  MockListItemComponent,\r\n  MockListSectionHeaderComponent,\r\n  MockListComponent,\r\n  MockLoadingOverlayComponent,\r\n  MockActionSheetComponent,\r\n  MockModalFooterComponent,\r\n  MockPageFooterComponent,\r\n  MockPageTitleDirective,\r\n  MockPageToolbarTitleDirective,\r\n  MockPageActionsDirective,\r\n  MockPageContentDirective,\r\n  MockPageProgressComponent,\r\n  MockPageTitleComponent,\r\n  MockPageContentComponent,\r\n  MockPageActionsComponent,\r\n  MockPageComponent,\r\n  MockPopoverComponent,\r\n  MockProgressCircleComponent,\r\n  MockRadioGroupComponent,\r\n  MockRadioComponent,\r\n  MockRangeComponent,\r\n  MockReorderListComponent,\r\n  MockRouterOutletComponent,\r\n  MockSegmentedControlComponent,\r\n  MockSlideButtonComponent,\r\n  MockSpinnerComponent,\r\n  MockTabButtonComponent,\r\n  MockTabsComponent,\r\n  MockToggleComponent,\r\n  MockToggleButtonComponent,\r\n]"
      },
      {
        "name": "MOCK_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/testing-base/src/lib/mock-directives.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[MockThemeColorDirective, MockFitHeadingDirective]"
      },
      {
        "name": "MOCK_PROVIDERS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\r\n  {\r\n    provide: IconRegistryService,\r\n    useFactory: iconRegistryServiceFactory,\r\n  },\r\n  {\r\n    provide: LoadingOverlayService,\r\n    useFactory: loadingOverlayServiceFactory,\r\n  },\r\n  {\r\n    provide: ModalController,\r\n    useFactory: modalControllerFactory,\r\n  },\r\n  {\r\n    provide: TabsService,\r\n    useFactory: tabsServiceFactory,\r\n  },\r\n  {\r\n    provide: ToastController,\r\n    useFactory: toastControllerFactory,\r\n  },\r\n]"
      },
      {
        "name": "MOCK_PROVIDERS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\r\n  {\r\n    provide: IconRegistryService,\r\n    useFactory: iconRegistryServiceFactory,\r\n  },\r\n  {\r\n    provide: LoadingOverlayService,\r\n    useFactory: loadingOverlayServiceFactory,\r\n  },\r\n  {\r\n    provide: ModalController,\r\n    useFactory: modalControllerFactory,\r\n  },\r\n  {\r\n    provide: TabsService,\r\n    useFactory: tabsServiceFactory,\r\n  },\r\n  {\r\n    provide: ToastController,\r\n    useFactory: toastControllerFactory,\r\n  },\r\n]"
      },
      {
        "name": "providers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/kirby.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ModalController,\n  ActionSheetHelper,\n  ModalHelper,\n  AlertHelper,\n  ToastHelper,\n  ToastController,\n  BreakpointHelperService,\n  LoadingOverlayService,\n  ResizeObserverFactory,\n  ResizeObserverService,\n  customElementsInitializer(),\n]"
      },
      {
        "name": "proxyInputs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach((item) => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      },\n    });\n  });\n}"
      },
      {
        "name": "proxyMethods",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach((methodName) => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));\n    };\n  });\n}"
      },
      {
        "name": "proxyOutputs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));\n}"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "ResizeObserver",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type"
      },
      {
        "name": "selectedTabClickEvent",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'kirbySelectedTabClick'"
      },
      {
        "name": "stockChartDeprecatedOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(locale: string, height: number) => {\n  const options: Options = defaultOptions(locale) as Options;\n  const transparentColor = 'rgba(255,255,255,0)';\n  options.chart.backgroundColor = transparentColor;\n  options.chart.height = height;\n\n  options.tooltip.backgroundColor = ColorHelper.getThemeColorRgbString('background-color');\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.tooltip.formatter = function() {\n    return (\n      '<div class=\"kirby-text-xsmall\">' +\n      // @ts-ignore\n      dateFormat('%e. %b', new Date(this.x)) +\n      '</div><br/><div class=\"kirby-text-small kirby-text-bold\">' +\n      formatNumber(this.y, locale) +\n      '</div>'\n    );\n  };\n  options.plotOptions.area.fillColor = transparentColor;\n  options.plotOptions.area.lineColor = ColorHelper.getThemeColorRgbString('tertiary');\n\n  options.plotOptions.area.marker.lineColor = 'rgba(255,255,255,0.3)';\n  options.plotOptions.area.marker.fillColor = ColorHelper.getThemeColorRgbString('primary');\n\n  options.xAxis = {\n    ...options.xAxis,\n    crosshair: {\n      color: ColorHelper.getThemeColorRgbString('primary'),\n    },\n    tickColor: transparentColor,\n    lineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  options.yAxis = {\n    ...options.yAxis,\n    lineColor: transparentColor,\n    gridLineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  /*\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOver = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      tickColor: transparentColor,\n      lineColor: ColorHelper.getThemeColorRgbString('medium'),\n      labels: {\n        style: {\n          color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n        },\n      },\n    });\n  };\n\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOut = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      lineColor: transparentColor,\n      labels: {\n        style: {\n          color: transparentColor,\n        },\n      },\n    });\n  };\n   */\n\n  return options;\n}"
      },
      {
        "name": "styles",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/helpers/color-helper.styles.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  brandColors: { primary: '#00e89a', secondary: '#005c3c', tertiary: '#01352c' },\n  notificationColors: { success: '#2cf287', warning: '#ffca3a', danger: '#ff595e' },\n  systemColors: {\n    backgroundColor: '#f6f6f6',\n    white: '#ffffff',\n    light: '#f2f2f2',\n    semiLight: '#ebebeb',\n    medium: '#d1d1d1',\n    semiDark: '#8e8e8e',\n    dark: '#353535',\n    black: '#1c1c1c',\n  },\n  textColors: { white: '#ffffff', semiDark: '#707070', black: '#1c1c1c', danger: '#ee0d0d' },\n  focusRingColor: '#4d90fe',\n  mainColors: {\n    primary: '#00e89a',\n    secondary: '#005c3c',\n    tertiary: '#01352c',\n    success: '#2cf287',\n    warning: '#ffca3a',\n    danger: '#ff595e',\n    light: '#f2f2f2',\n    medium: '#d1d1d1',\n    dark: '#353535',\n  },\n  kirbyColors: {\n    black: '#1c1c1c',\n    blackRgb: '28, 28, 28',\n    blackContrast: '#ffffff',\n    blackContrastRgb: '255, 255, 255',\n    blackShade: '#191919',\n    blackShadeRgb: '25, 25, 25',\n    blackTint: '#333333',\n    blackTintRgb: '51, 51, 51',\n    blackColorBrightness: 'dark',\n    dark: '#353535',\n    darkRgb: '53, 53, 53',\n    darkContrast: '#ffffff',\n    darkContrastRgb: '255, 255, 255',\n    darkShade: '#2f2f2f',\n    darkShadeRgb: '47, 47, 47',\n    darkTint: '#494949',\n    darkTintRgb: '73, 73, 73',\n    darkColorBrightness: 'dark',\n    semiDark: '#8e8e8e',\n    semiDarkRgb: '142, 142, 142',\n    semiDarkContrast: '#1c1c1c',\n    semiDarkContrastRgb: '28, 28, 28',\n    semiDarkShade: '#7d7d7d',\n    semiDarkShadeRgb: '125, 125, 125',\n    semiDarkTint: '#999999',\n    semiDarkTintRgb: '153, 153, 153',\n    semiDarkColorBrightness: 'light',\n    medium: '#d1d1d1',\n    mediumRgb: '209, 209, 209',\n    mediumContrast: '#1c1c1c',\n    mediumContrastRgb: '28, 28, 28',\n    mediumShade: '#b8b8b8',\n    mediumShadeRgb: '184, 184, 184',\n    mediumTint: '#d6d6d6',\n    mediumTintRgb: '214, 214, 214',\n    mediumColorBrightness: 'light',\n    semiLight: '#ebebeb',\n    semiLightRgb: '235, 235, 235',\n    semiLightContrast: '#1c1c1c',\n    semiLightContrastRgb: '28, 28, 28',\n    semiLightShade: '#cfcfcf',\n    semiLightShadeRgb: '207, 207, 207',\n    semiLightTint: '#ededed',\n    semiLightTintRgb: '237, 237, 237',\n    semiLightColorBrightness: 'light',\n    light: '#f2f2f2',\n    lightRgb: '242, 242, 242',\n    lightContrast: '#1c1c1c',\n    lightContrastRgb: '28, 28, 28',\n    lightShade: '#d5d5d5',\n    lightShadeRgb: '213, 213, 213',\n    lightTint: '#f3f3f3',\n    lightTintRgb: '243, 243, 243',\n    lightColorBrightness: 'light',\n    white: '#ffffff',\n    whiteRgb: '255, 255, 255',\n    whiteContrast: '#1c1c1c',\n    whiteContrastRgb: '28, 28, 28',\n    whiteShade: '#e0e0e0',\n    whiteShadeRgb: '224, 224, 224',\n    whiteTint: 'white',\n    whiteTintRgb: '255, 255, 255',\n    whiteColorBrightness: 'white',\n    backgroundColor: '#f6f6f6',\n    backgroundColorRgb: '246, 246, 246',\n    backgroundColorContrast: '#1c1c1c',\n    backgroundColorContrastRgb: '28, 28, 28',\n    backgroundColorShade: '#d8d8d8',\n    backgroundColorShadeRgb: '216, 216, 216',\n    backgroundColorTint: '#f7f7f7',\n    backgroundColorTintRgb: '247, 247, 247',\n    backgroundColorColorBrightness: 'light',\n    danger: '#ff595e',\n    dangerRgb: '255, 89, 94',\n    dangerContrast: '#1c1c1c',\n    dangerContrastRgb: '28, 28, 28',\n    dangerShade: '#e04e53',\n    dangerShadeRgb: '224, 78, 83',\n    dangerTint: '#ff6a6e',\n    dangerTintRgb: '255, 106, 110',\n    dangerColorBrightness: 'light',\n    warning: '#ffca3a',\n    warningRgb: '255, 202, 58',\n    warningContrast: '#1c1c1c',\n    warningContrastRgb: '28, 28, 28',\n    warningShade: '#e0b233',\n    warningShadeRgb: '224, 178, 51',\n    warningTint: '#ffcf4e',\n    warningTintRgb: '255, 207, 78',\n    warningColorBrightness: 'light',\n    success: '#2cf287',\n    successRgb: '44, 242, 135',\n    successContrast: '#1c1c1c',\n    successContrastRgb: '28, 28, 28',\n    successShade: '#27d577',\n    successShadeRgb: '39, 213, 119',\n    successTint: '#41f393',\n    successTintRgb: '65, 243, 147',\n    successColorBrightness: 'light',\n    tertiary: '#01352c',\n    tertiaryRgb: '1, 53, 44',\n    tertiaryContrast: '#ffffff',\n    tertiaryContrastRgb: '255, 255, 255',\n    tertiaryShade: '#012f27',\n    tertiaryShadeRgb: '1, 47, 39',\n    tertiaryTint: '#1a4941',\n    tertiaryTintRgb: '26, 73, 65',\n    tertiaryColorBrightness: 'dark',\n    secondary: '#005c3c',\n    secondaryRgb: '0, 92, 60',\n    secondaryContrast: '#ffffff',\n    secondaryContrastRgb: '255, 255, 255',\n    secondaryShade: '#005135',\n    secondaryShadeRgb: '0, 81, 53',\n    secondaryTint: '#1a6c50',\n    secondaryTintRgb: '26, 108, 80',\n    secondaryColorBrightness: 'dark',\n    primary: '#00e89a',\n    primaryRgb: '0, 232, 154',\n    primaryContrast: '#1c1c1c',\n    primaryContrastRgb: '28, 28, 28',\n    primaryShade: '#00cc88',\n    primaryShadeRgb: '0, 204, 136',\n    primaryTint: '#1aeaa4',\n    primaryTintRgb: '26, 234, 164',\n    primaryColorBrightness: 'light',\n  },\n  kirbyTextColors: {\n    danger: '#ee0d0d',\n    dangerRgb: '238, 13, 13',\n    dangerContrast: '#ffffff',\n    dangerContrastRgb: '255, 255, 255',\n    dangerShade: '#d10b0b',\n    dangerShadeRgb: '209, 11, 11',\n    dangerTint: '#f02525',\n    dangerTintRgb: '240, 37, 37',\n    dangerColorBrightness: 'dark',\n    black: '#1c1c1c',\n    blackRgb: '28, 28, 28',\n    blackContrast: '#ffffff',\n    blackContrastRgb: '255, 255, 255',\n    blackShade: '#191919',\n    blackShadeRgb: '25, 25, 25',\n    blackTint: '#333333',\n    blackTintRgb: '51, 51, 51',\n    blackColorBrightness: 'dark',\n    semiDark: '#707070',\n    semiDarkRgb: '112, 112, 112',\n    semiDarkContrast: '#ffffff',\n    semiDarkContrastRgb: '255, 255, 255',\n    semiDarkShade: '#636363',\n    semiDarkShadeRgb: '99, 99, 99',\n    semiDarkTint: '#7e7e7e',\n    semiDarkTintRgb: '126, 126, 126',\n    semiDarkColorBrightness: 'dark',\n    white: '#ffffff',\n    whiteRgb: '255, 255, 255',\n    whiteContrast: '#1c1c1c',\n    whiteContrastRgb: '28, 28, 28',\n    whiteShade: '#e0e0e0',\n    whiteShadeRgb: '224, 224, 224',\n    whiteTint: 'white',\n    whiteTintRgb: '255, 255, 255',\n    whiteColorBrightness: 'white',\n  },\n}"
      },
      {
        "name": "styles",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/helpers/design-token-helper.styles.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  sizes: {\n    xxxl: '56px',\n    xxl: '48px',\n    xl: '40px',\n    l: '32px',\n    m: '24px',\n    s: '16px',\n    xs: '12px',\n    xxs: '8px',\n    xxxs: '4px',\n    xxxxs: '2px',\n  },\n  fontSizes: {\n    xxxxl: '72px',\n    xxxl: '56px',\n    xxl: '40px',\n    xl: '32px',\n    l: '22px',\n    m: '18px',\n    n: '16px',\n    s: '14px',\n    xs: '12px',\n    xxs: '10px',\n  },\n  lineHeight: { xl: '38px', l: '28px', m: '24px', n: '24px', s: '20px', xs: '16px', xxs: '11px' },\n  fontWeight: { light: '300', normal: '400', bold: '700', black: '900' },\n  iconFontSizes: { xs: '16px', sm: '24px', md: '32px', lg: '56px' },\n  zLayers: {\n    default: '1',\n    segmentBadge: '2',\n    dropdown: '800',\n    popover: '850',\n    modalOverlay: '900',\n    modal: '901',\n    loadingOverlay: '1001',\n  },\n  borderRadius: '16px',\n  borderRadiusRound: '999px',\n  breakpoints: {\n    small: '321px',\n    medium: '721px',\n    large: '1025px',\n    xlarge: '60em',\n    xxlarge: '80em',\n  },\n  elevations: {\n    2: 'rgba(28, 28, 28, 0.3) 0px 5px 10px -10px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n    4: 'rgba(28, 28, 28, 0.3) 0px 10px 15px -10px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n    8: 'rgba(28, 28, 28, 0.3) 0px 20px 30px -15px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n  },\n  avatarSizes: { xs: '32px', s: '40px', m: '56px', l: '96px' },\n  avatarBadgeSize: '16px',\n  pageContentMaxWidth: '720px',\n  alertMaxWidth: '359px',\n  compactModalMaxWidth: '359px',\n  modalMaxWidth: '720px',\n  modalHeights: { s: '288px', m: '460px', l: '576px' },\n  modalDefaultHeight: '460px',\n  drawerDefaultHeight: '288px',\n  itemHeights: { m: '56px', s: '44px', xs: '32px' },\n  dropdownItemHeight: '44px',\n  fatFingerSize: '44px',\n  checkboxRadioSizes: { xs: '32px', sm: '44px', md: '56px' },\n  checkboxRadioSpacing: { toEdge: '16px', toLabel: '12px' },\n  softKeyboardTransitionEnter: '250ms ease-out 1ms',\n  softKeyboardTransitionLeave: '150ms ease-out',\n  transitionDurations: { quick: '200ms', short: '300ms', long: '500ms', extraLong: '1000ms' },\n  transitionEasings: {\n    static: 'linear',\n    enter: 'ease-out',\n    exit: 'ease-in',\n    enterExit: 'ease',\n    motion: 'cubic-bezier(0.25, 0.1, 0.25, 1)',\n    modal: { enter: 'cubic-bezier(0.32, 0.72, 0, 1)', exit: 'cubic-bezier(0.32, 0.72, 0, 1)' },\n  },\n  loadingOverlayBackdropOpacity: '0.8',\n}"
      },
      {
        "name": "TIMESERIES_OPTIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<Options>('TimeSeriesOptions')"
      },
      {
        "name": "TimeSeriesOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Options",
        "defaultValue": "{\n  chart: {\n    backgroundColor: {\n      linearGradient: { x1: 0, x2: 0, y1: 0, y2: 3 },\n      stops: [\n        [0, '#F6F6F6'],\n        [1, '#808080'],\n      ],\n    },\n    zoomType: 'x',\n    type: 'timeseries',\n    borderWidth: 0,\n    plotBorderWidth: 0,\n    margin: 0,\n    marginTop: 48,\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    text: '',\n  },\n  subtitle: {\n    text: '',\n  },\n  tooltip: {\n    shadow: false,\n    formatter: function() {\n      // @ts-ignore\n      return dateFormat('%e. %b', new Date(this.x)) + '.' + '<br/><b>' + this.y + '</b>';\n    },\n    //xDateFormat: '%d/%m',\n    positioner: function(_labelWidth, _labelHeight, point) {\n      return { x: point.x, y: 0 };\n    },\n    borderWidth: 0,\n  },\n  xAxis: {\n    visible: false,\n    lineColor: '#FFFFFF',\n    tickColor: '#FFFFFF',\n    labels: {\n      style: {\n        color: 'white',\n      },\n    },\n    opposite: true,\n    crosshair: {\n      zIndex: 3,\n      width: 1,\n      color: '#00E89A',\n    },\n    type: 'datetime',\n    tickInterval: 1,\n  },\n  yAxis: {\n    visible: false,\n  },\n  legend: {\n    enabled: false,\n  },\n  plotOptions: {\n    area: {\n      fillColor: '#01352C',\n      marker: {\n        lineWidth: 14,\n        lineColor: 'rgba(255,255,255,0.2)',\n        radius: 6,\n        fillColor: '#00E89A',\n      },\n      lineColor: '#01352C',\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1,\n        },\n      },\n      threshold: null,\n    },\n    series: {\n      marker: {\n        enabledThreshold: 50,\n      },\n    },\n  },\n  series: [\n    {\n      type: 'area',\n      name: 'USD to EUR',\n    },\n  ],\n}"
      },
      {
        "name": "uniqueId",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "ColorHelper"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "ColorHelper"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "ColorHelper"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "DesignTokenHelper"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "ColorHelper"
      }
    ],
    "functions": [
      {
        "name": "colorPoints",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "colorPoints",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "compareCssProperty",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "util",
            "type": "MatchersUtil",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "customEqualityTesters",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "element",
            "type": "Element",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "expectedValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "expectedValueAlias",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "returnType": "CustomMatcherResult",
        "jsdoctags": [
          {
            "name": "util",
            "type": "MatchersUtil",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "customEqualityTesters",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "element",
            "type": "Element",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expectedValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expectedValueAlias",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "compareSize",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "first",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "second",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "boolean | void",
        "jsdoctags": [
          {
            "name": "first",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "second",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "cssPropertyMatcher",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "util",
            "type": "MatchersUtil",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "customEqualityTesters",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "util",
            "type": "MatchersUtil",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "customEqualityTesters",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "customElementsInitializer",
        "file": "libs/designsystem/src/lib/app-initialize.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "deepCopy",
        "file": "libs/designsystem/src/lib/helpers/deep-copy.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "obj",
            "type": "Object",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "obj",
            "type": "Object",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getErrorMessage",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "element",
            "type": "Element",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "actualValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "expectedValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "expectedValueAlias",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "jsdoctags": [
          {
            "name": "element",
            "type": "Element",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "actualValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expectedValue",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expectedValueAlias",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getExpectedStringValueAndAlias",
        "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "expectedValue",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "cssProperty",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expectedValue",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "iconRegistryServiceFactory",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "iconRegistryServiceFactory",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "isNumberArray",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "value",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "number[]",
        "jsdoctags": [
          {
            "name": "value",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "loadingOverlayServiceFactory",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "loadingOverlayServiceFactory",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "mergeDeep",
        "file": "libs/designsystem/src/lib/helpers/merge-deep.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Performs a deep merge of objects and returns new object. Does not modify\nobjects (immutable).\nIt merges from into object to the left\n eg. mergeDeep({a: &#39;will be overridden&#39;, b: &#39;some val&#39;}, {a: &#39;new val&#39;}) =&gt;  {a: &#39;new val&#39;, b: &#39;some val&#39;}</p>\n",
        "args": [
          {
            "name": "originalObject",
            "type": "",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "overrideObject",
            "type": "",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "config",
            "type": "object",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "{ mergeArrays: false }"
          }
        ],
        "jsdoctags": [
          {
            "name": {
              "pos": 269,
              "end": 283,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "originalObject"
            },
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 263,
              "end": 268,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>object - Object to override,</p>\n"
          },
          {
            "name": {
              "pos": 323,
              "end": 337,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "overrideObject"
            },
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 317,
              "end": 322,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>object - Object to override &quot;toOverride&quot; values with</p>\n"
          },
          {
            "name": {
              "pos": 401,
              "end": 407,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "config"
            },
            "type": "object",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "{ mergeArrays: false }",
            "tagName": {
              "pos": 395,
              "end": 400,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>object - Configuration for how to merge.\nmergeArrays determines if it should merge or override arrays</p>\n"
          },
          {
            "tagName": {
              "pos": 518,
              "end": 525,
              "flags": 4194304,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "returns"
            },
            "comment": "<p>object - New object with merged key/values</p>\n"
          }
        ]
      },
      {
        "name": "mergeDeepAll",
        "file": "libs/designsystem/src/lib/helpers/merge-deep.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "objects",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true
          }
        ],
        "returnType": "Object",
        "jsdoctags": [
          {
            "name": "objects",
            "deprecated": false,
            "deprecationMessage": "",
            "dotDotDotToken": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "modalControllerFactory",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "modalControllerFactory",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "ProxyCmp",
        "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "opts",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "opts",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "scriptedBackgroundColor",
        "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "context",
            "type": "ScriptableContext",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "context",
            "type": "ScriptableContext",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "scriptedHoverBackgroundColor",
        "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "context",
            "type": "ScriptableContext",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "context",
            "type": "ScriptableContext",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "tabsServiceFactory",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "tabsServiceFactory",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "toastControllerFactory",
        "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "toastControllerFactory",
        "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      }
    ],
    "typealiases": [
      {
        "name": "BoundaryClass",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"first\" | \"last\"",
        "file": "libs/designsystem/src/lib/components/list/list-item/list-item.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "CalendarYearNavigatorConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/src/lib/components/calendar/options/calendar-year-navigator-config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "CardFlagLevel",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "NotificationColor | \"info\" | null",
        "file": "libs/designsystem/src/lib/components/card/card-header/card-header.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ChartDataset",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "ChartHighlightedElements",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "number[][]",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 181
      },
      {
        "name": "ChartType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"column\" | \"bar\" | \"line\"",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ChartTypeConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "ChartTypesConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 193
      },
      {
        "name": "fixedConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "fixedConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/src/lib/components/page/page.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "ListShape",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"square\" | \"rounded\" | \"none\"",
        "file": "libs/designsystem/src/lib/components/list/list.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ListSwipeActionType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"success\" | \"warning\" | \"danger\"",
        "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ListSwipeDirection",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"right\" | \"left\"",
        "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ListSwipeEnd",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"start\" | \"end\"",
        "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "Locale",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "LocaleDateFns",
        "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 176
      },
      {
        "name": "MessageType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"success\" | \"warning\" | \"danger\"",
        "file": "libs/designsystem/src/lib/components/toast/config/toast-config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>&#39;danger&#39; is deprecated. Use Kirby Alert for critical events</p>\n",
        "kind": 185
      },
      {
        "name": "ModalFlavor",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"modal\" | \"drawer\" | \"compact\"",
        "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ModalSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"small\" | \"medium\" | \"large\" | \"full-height\"",
        "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 185
      },
      {
        "name": "ResizeObserverCallback",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer-callback.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 177
      },
      {
        "name": "ScreenSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/designsystem/src/lib/testing/test-helper.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 191
      },
      {
        "name": "stickyConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "stickyConfig",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/designsystem/src/lib/components/page/page.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      }
    ],
    "enumerations": [
      {
        "name": "AvatarSize",
        "childs": [
          {
            "name": "XS",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "xs"
          },
          {
            "name": "SM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "sm"
          },
          {
            "name": "MD",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "md"
          },
          {
            "name": "LG",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "lg"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/avatar/avatar.component.ts"
      },
      {
        "name": "ButtonSize",
        "childs": [
          {
            "name": "SM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "sm"
          },
          {
            "name": "MD",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "md"
          },
          {
            "name": "LG",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "lg"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/button/button.component.ts"
      },
      {
        "name": "ChartDeprecatedType",
        "childs": [
          {
            "name": "PIE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "pie"
          },
          {
            "name": "DONUT",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "donut"
          },
          {
            "name": "AREASPLINE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "areaspline"
          },
          {
            "name": "TIMESERIES",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "timeseries"
          },
          {
            "name": "ACTIVITYGAUGE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "activitygauge"
          },
          {
            "name": "BAR",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "bar"
          },
          {
            "name": "COLUMN",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "column"
          },
          {
            "name": "CUSTOM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "custom"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-type.ts"
      },
      {
        "name": "Duration",
        "childs": [
          {
            "name": "QUICK",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "SHORT",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "LONG",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "EXTRA_LONG",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/animation/kirby-animation.ts"
      },
      {
        "name": "HorizontalDirection",
        "childs": [
          {
            "name": "right",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "right"
          },
          {
            "name": "left",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "left"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/popover/popover.component.ts"
      },
      {
        "name": "IconSize",
        "childs": [
          {
            "name": "XS",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "xs"
          },
          {
            "name": "SM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "sm"
          },
          {
            "name": "MD",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "md"
          },
          {
            "name": "LG",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "lg"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/icon/icon.component.ts"
      },
      {
        "name": "InputSize",
        "childs": [
          {
            "name": "medium",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "md"
          },
          {
            "name": "large",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "lg"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/form-field/input/input.component.ts"
      },
      {
        "name": "ItemSize",
        "childs": [
          {
            "name": "XS",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "xs"
          },
          {
            "name": "SM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "sm"
          },
          {
            "name": "MD",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "md"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/item/item.component.ts"
      },
      {
        "name": "OpenState",
        "childs": [
          {
            "name": "closed",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "opening",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "open",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/dropdown/dropdown.types.ts"
      },
      {
        "name": "SegmentedControlMode",
        "childs": [
          {
            "name": "chip",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "chip"
          },
          {
            "name": "compactChip",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "compactChip"
          },
          {
            "name": "default",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "default"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/segmented-control/segmented-control.component.ts"
      },
      {
        "name": "TimeUnit",
        "childs": [
          {
            "name": "years",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "years"
          },
          {
            "name": "months",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "months"
          },
          {
            "name": "weeks",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "weeks"
          },
          {
            "name": "days",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "days"
          },
          {
            "name": "hours",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "hours"
          },
          {
            "name": "minutes",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "minutes"
          },
          {
            "name": "seconds",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "seconds"
          },
          {
            "name": "milliseconds",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "milliseconds"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts"
      },
      {
        "name": "VerticalDirection",
        "childs": [
          {
            "name": "up",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "down",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/designsystem/src/lib/components/dropdown/dropdown.types.ts"
      }
    ],
    "groupedVariables": {
      "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts": [
        {
          "name": "ACTIVITYGAUGE_OPTIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<Options>('ActivityGaugeOptions')"
        },
        {
          "name": "ActivityGaugeOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    style: {\n      fontFamily: 'Roboto, sans-serif',\n      fontWeight: '300',\n    },\n    backgroundColor: 'transparent',\n    type: 'solidgauge',\n    height: '110%',\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    align: 'center',\n    verticalAlign: 'middle',\n    text: '',\n    y: 0,\n    floating: false,\n    style: {\n      fontSize: '30px',\n      color: '#fff',\n      fontWeight: 'bold',\n    },\n  },\n  subtitle: {\n    text: '',\n    align: 'center',\n    y: 25,\n    verticalAlign: 'middle',\n    style: {\n      color: '#fff',\n      fontSize: '14px',\n      fontWeight: 'normal',\n    },\n  },\n  credits: {\n    enabled: false,\n  },\n  tooltip: {\n    enabled: false,\n    animation: false,\n  },\n  pane: {\n    startAngle: 0,\n    endAngle: 360,\n    background: [\n      {\n        backgroundColor: {\n          linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n          stops: [\n            [1, 'rgba(255, 255, 255, 0.3)'],\n            [0, 'rgba(255, 255, 255, 0.3)'],\n          ],\n        },\n        outerRadius: '112%',\n        innerRadius: '88%',\n        borderWidth: 0,\n      },\n    ],\n  },\n  yAxis: {\n    min: 0,\n    max: 100,\n    lineWidth: 0,\n    tickPositions: [],\n  },\n  plotOptions: {\n    solidgauge: {\n      dataLabels: {\n        enabled: false,\n      },\n      linecap: 'round',\n      stickyTracking: false,\n      rounded: true,\n    },\n  },\n  series: [\n    {\n      type: 'solidgauge',\n    },\n  ],\n}"
        }
      ],
      "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts": [
        {
          "name": "annotations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(locale: string): Highcharts.AnnotationsOptions => {\n  return {\n    id: 'minmax',\n    zIndex: 2,\n    labels: [\n      {\n        point: 'max',\n        shape: 'rect',\n        distance: 5,\n        align: 'center',\n        verticalAlign: 'top',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n      {\n        point: 'min',\n        shape: 'rect',\n        distance: -28,\n        align: 'center',\n        verticalAlign: 'bottom',\n        backgroundColor: ColorHelper.getThemeColorRgbString('tertiary'),\n        // Using a function instead of a lamdba-expression because of a reference to this.\n        formatter: function() {\n          return formatNumber(this.y, locale, '1.1-1');\n        },\n      },\n    ],\n    labelOptions: {\n      y: 0,\n      allowOverlap: true,\n    },\n  };\n}"
        },
        {
          "name": "defaultOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(locale: string) => {\n  return {\n    chart: {\n      zoomType: 'x',\n      type: 'StockChart',\n      spacingTop: 30,\n      //spacingRight: 55,\n    },\n    navigator: {\n      enabled: false,\n    },\n    rangeSelector: {\n      enabled: false,\n    },\n    scrollbar: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    title: {\n      text: '',\n    },\n    subtitle: {\n      text: '',\n    },\n    xAxis: {\n      ordinal: true,\n      type: 'datetime',\n      lineWidth: 0.5,\n      opposite: false,\n      labels: {\n        format: '{value:%Y-%b-%e %l:%M %p }',\n      },\n    },\n    yAxis: {\n      opposite: false,\n      title: {\n        text: '',\n      },\n      /* Doesn't work before upgrade.\n        labels: {\n          x: 0,\n          y: 10,\n          align: 'right',\n        },\n         */\n    },\n    annotations: [annotations(locale)],\n    legend: {\n      enabled: false,\n    },\n    tooltip: {\n      crosshairs: {\n        width: 1,\n        zIndex: 2,\n      },\n      shadow: false,\n      borderWidth: 0,\n    },\n    plotOptions: {\n      area: {\n        marker: {\n          lineWidth: 16,\n          radius: 7,\n        },\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        events: {},\n        threshold: null,\n      },\n      series: {\n        marker: {\n          zIndex: 100,\n          enabledThreshold: 50,\n        },\n      },\n    },\n    series: [\n      {\n        type: 'area',\n        data: [],\n      },\n    ],\n  };\n}"
        },
        {
          "name": "stockChartDeprecatedOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(locale: string, height: number) => {\n  const options: Options = defaultOptions(locale) as Options;\n  const transparentColor = 'rgba(255,255,255,0)';\n  options.chart.backgroundColor = transparentColor;\n  options.chart.height = height;\n\n  options.tooltip.backgroundColor = ColorHelper.getThemeColorRgbString('background-color');\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.tooltip.formatter = function() {\n    return (\n      '<div class=\"kirby-text-xsmall\">' +\n      // @ts-ignore\n      dateFormat('%e. %b', new Date(this.x)) +\n      '</div><br/><div class=\"kirby-text-small kirby-text-bold\">' +\n      formatNumber(this.y, locale) +\n      '</div>'\n    );\n  };\n  options.plotOptions.area.fillColor = transparentColor;\n  options.plotOptions.area.lineColor = ColorHelper.getThemeColorRgbString('tertiary');\n\n  options.plotOptions.area.marker.lineColor = 'rgba(255,255,255,0.3)';\n  options.plotOptions.area.marker.fillColor = ColorHelper.getThemeColorRgbString('primary');\n\n  options.xAxis = {\n    ...options.xAxis,\n    crosshair: {\n      color: ColorHelper.getThemeColorRgbString('primary'),\n    },\n    tickColor: transparentColor,\n    lineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  options.yAxis = {\n    ...options.yAxis,\n    lineColor: transparentColor,\n    gridLineColor: ColorHelper.getThemeColorRgbString('medium'),\n    labels: {\n      style: {\n        color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n      },\n    },\n  };\n\n  /*\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOver = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      tickColor: transparentColor,\n      lineColor: ColorHelper.getThemeColorRgbString('medium'),\n      labels: {\n        style: {\n          color: ColorHelper.getThemeColorRgbString('semi-dark-tint'),\n        },\n      },\n    });\n  };\n\n  // Using a function instead of a lamdba-expression because of a reference to this.\n  options.plotOptions.area.events.mouseOut = function() {\n    const transparentColor = 'rgba(255,255,255,0)';\n    this.chart.xAxis[0].update({\n      lineColor: transparentColor,\n      labels: {\n        style: {\n          color: transparentColor,\n        },\n      },\n    });\n  };\n   */\n\n  return options;\n}"
        }
      ],
      "libs/designsystem/src/lib/app-initialize.ts": [
        {
          "name": "appInitialize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/app-initialize.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(doc: Document) => {\n  return () => {\n    defineCustomElements(doc.defaultView);\n  };\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts": [
        {
          "name": "AREASPLINE_OPTIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<Options>('AreasplineOptions')"
        },
        {
          "name": "AreaSplineOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    type: 'areaspline',\n    borderWidth: 0,\n    plotBorderWidth: 0,\n    margin: 0,\n    marginTop: 48,\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    text: '',\n  },\n  credits: {\n    enabled: false,\n  },\n  exporting: {\n    enabled: false,\n  },\n  tooltip: {\n    enabled: true,\n    animation: false,\n    shape: 'square',\n    borderColor: '#FFFFFF',\n    shadow: false,\n    backgroundColor: '#FFFFFF',\n    style: {\n      fontSize: '1.25rem',\n    },\n    formatter: function(): string {\n      return String(this.y);\n    },\n    positioner: function() {\n      return { x: this.chart.plotSizeX / 2 - this.label.width / 2, y: 0 };\n    },\n  },\n  xAxis: {\n    visible: false,\n    minPadding: 0,\n    maxPadding: 0,\n    crosshair: {\n      zIndex: 3,\n      width: 1,\n      color: '#177E17',\n    },\n  },\n  yAxis: {\n    visible: false,\n    endOnTick: false,\n    startOnTick: false,\n  },\n  plotOptions: {\n    areaspline: {\n      shadow: true,\n      showInLegend: false,\n      fillColor: {\n        linearGradient: { x1: 0, x2: 0, y1: 0, y2: 0.8 },\n        stops: [\n          [0, '#C9E5C9'],\n          [1, '#FFFFFF'],\n        ],\n      },\n      lineColor: '#177E17',\n      lineWidth: 2,\n    },\n    series: {\n      states: {\n        hover: {\n          halo: {\n            size: 0,\n          },\n        },\n      },\n      marker: {\n        enabled: false,\n        states: {\n          hover: {\n            enabled: true,\n            fillColor: '#177E17',\n          },\n        },\n      },\n    },\n  },\n  series: [\n    {\n      type: 'areaspline',\n    },\n  ],\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts": [
        {
          "name": "backgroundColor",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "getThemeColorHexString('secondary')"
        },
        {
          "name": "hoverBackgroundColor",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "getThemeColorHexString('primary')"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "ColorHelper"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts": [
        {
          "name": "barOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    type: 'bar',\n    animation: {\n      duration: 150,\n    },\n    backgroundColor: 'transparent',\n    events: {\n      load: colorPoints,\n      redraw: colorPoints,\n    },\n  },\n  accessibility: {\n    description: 'Bar chart',\n  },\n  credits: {\n    enabled: false,\n  },\n  title: {\n    text: '',\n  },\n  xAxis: {\n    labels: {\n      style: {\n        fontSize: fontSize('s'),\n        fontFamily: 'Roboto',\n        color: getColor('black').value,\n      },\n    },\n    min: 0,\n    lineColor: 'transparent',\n  },\n  yAxis: {\n    title: {\n      text: '',\n    },\n    labels: {\n      enabled: false,\n    },\n    min: 0,\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    gridLineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n    maxPadding: 0,\n    endOnTick: false,\n    showLastLabel: false,\n    showFirstLabel: false,\n  },\n  plotOptions: {\n    bar: {\n      events: {},\n    },\n    series: {\n      color: getColor('secondary').value,\n      stacking: 'normal',\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n  },\n  tooltip: {\n    enabled: false,\n  },\n  legend: {\n    enabled: false,\n  },\n}"
        },
        {
          "name": "fontSize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.fontSize"
        },
        {
          "name": "getColor",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.getColor"
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts": [
        {
          "name": "borderColor",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "getThemeColorHexString('semi-dark')"
        },
        {
          "name": "borderDash",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "[6, 3]"
        },
        {
          "name": "borderWidth",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "defaultValue": "1"
        },
        {
          "name": "CHART_ANNOTATIONS_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "AnnotationTypeRegistry",
          "defaultValue": "{\n  line: {\n    borderDash,\n    borderWidth,\n    borderColor,\n  },\n  ellipse: {\n    borderDash,\n    borderWidth,\n    borderColor,\n    backgroundColor: 'transparent',\n  },\n  box: {\n    borderDash,\n    borderWidth,\n    borderColor,\n    backgroundColor: 'transparent',\n  },\n  point: {\n    backgroundColor: 'initial',\n  },\n}"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "ColorHelper"
        }
      ],
      "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts": [
        {
          "name": "CHART_CONTROLLERS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[BarController, LineController]"
        },
        {
          "name": "CHART_ELEMENTS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[BarElement, LineElement, PointElement]"
        },
        {
          "name": "CHART_PLUGINS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[annotationPlugin]"
        },
        {
          "name": "CHART_SCALES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[CategoryScale, LinearScale]"
        },
        {
          "name": "mergedDefaults",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "mergeDeepAll(Chart.defaults, CHART_GLOBAL_DEFAULTS)"
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts": [
        {
          "name": "CHART_GLOBAL_DEFAULTS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  maintainAspectRatio: false,\n  color: getThemeColorHexString('black'),\n  resizeDelay: 10,\n  elements: {\n    bar: {\n      backgroundColor: scriptedBackgroundColor,\n      hoverBackgroundColor: scriptedHoverBackgroundColor,\n    },\n    line: {\n      borderColor: scriptedBackgroundColor,\n      borderWidth: 2,\n      tension: 0.3,\n    },\n  },\n  scales: {\n    linear: {\n      display: false,\n      ticks: {\n        display: false,\n      },\n    },\n    category: {\n      display: true,\n      grid: {\n        display: false,\n      },\n    },\n  },\n  font: {\n    family: 'Roboto',\n  },\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n}"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "ColorHelper"
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/interaction-functions-extensions.config.ts": [
        {
          "name": "CHART_INTERACTION_FUNCTIONS_EXTENSIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/interaction-functions-extensions.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  onHover: (\n    _event: ChartEvent,\n    activeElements: ActiveElement[],\n    _chart: Chart,\n    callback: ChartOptions['onHover']\n  ) => {\n    if (_chart.options.onClick) {\n      _chart.canvas.style.cursor = activeElements[0] ? 'pointer' : 'default';\n    }\n\n    if (callback) callback(_event, activeElements, _chart);\n  },\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/type.config.ts": [
        {
          "name": "CHART_TYPES_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ChartTypesConfig",
          "defaultValue": "{\n  bar: {\n    type: 'bar',\n    options: {\n      datasets: {\n        bar: {\n          barPercentage: 0.6,\n        },\n        line: {\n          spanGaps: true,\n        },\n      },\n      indexAxis: 'y',\n      scales: {\n        y: {\n          grid: {\n            drawBorder: false,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('s')),\n            },\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n        line: {\n          borderColor: getThemeColorHexString('medium'),\n        },\n      },\n    },\n  },\n  column: {\n    type: 'bar',\n    options: {\n      datasets: {\n        bar: {\n          barPercentage: 0.6,\n        },\n        line: {\n          spanGaps: true,\n        },\n      },\n      indexAxis: 'x',\n      scales: {\n        x: {\n          grid: {\n            drawBorder: false,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('xs')),\n            },\n          },\n        },\n      },\n      elements: {\n        line: {\n          tension: 0.2,\n          borderColor: getThemeColorHexString('medium'),\n        },\n        point: {\n          radius: 0,\n        },\n      },\n    },\n  },\n  line: {\n    type: 'line',\n    options: {\n      scales: {\n        x: {\n          grid: {\n            borderColor: getThemeColorHexString('medium'),\n            borderWidth: 1,\n          },\n          ticks: {\n            font: {\n              size: parseInt(fontSize('xs')),\n            },\n          },\n        },\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n      },\n    },\n  },\n}"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "ColorHelper"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts": [
        {
          "name": "columnOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    animation: {\n      duration: 500,\n    },\n    backgroundColor: 'transparent',\n    type: 'column',\n    events: {\n      load: colorPoints,\n      redraw: colorPoints,\n    },\n  },\n  title: {\n    text: '',\n  },\n  accessibility: {\n    description: 'Column chart',\n  },\n  xAxis: {\n    labels: {\n      style: {\n        fontSize: fontSize('xxs'),\n        fontFamily: 'Roboto',\n        color: getColor('black').value,\n      },\n    },\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    lineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n  },\n  yAxis: {\n    title: {\n      text: '',\n    },\n    labels: {\n      enabled: false,\n    },\n    min: 0,\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    gridLineColor: 'transparent',\n    minorTickLength: 0,\n    tickLength: 0,\n    showLastLabel: false,\n    showFirstLabel: false,\n  },\n  credits: {\n    enabled: false,\n  },\n  plotOptions: {\n    column: {\n      stacking: 'normal',\n    },\n    series: {\n      color: getColor('secondary').value,\n      zIndex: 10,\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n    line: {\n      className: 'avg-line',\n      marker: {\n        enabled: false,\n      },\n      allowPointSelect: false,\n    },\n  },\n  tooltip: {\n    enabled: false,\n  },\n  legend: {\n    enabled: false,\n  },\n}"
        },
        {
          "name": "fontSize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.fontSize"
        },
        {
          "name": "getColor",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.getColor"
        }
      ],
      "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.helper.ts": [
        {
          "name": "COMPONENT_PROPS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.helper.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<string>('componentProps')"
        }
      ],
      "libs/designsystem/src/lib/helpers/line-clamp-helper.ts": [
        {
          "name": "config",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/helpers/line-clamp-helper.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Object.freeze({\n  className: 'kirby-line-clamp',\n  lineClamp: '--line-clamp',\n  lineHeight: '--line-height',\n})"
        }
      ],
      "libs/designsystem/src/lib/kirby.module.ts": [
        {
          "name": "ConfigToken",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<any>('USERCONFIG')"
        },
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ...exportedDeclarations,\n  KeyHandlerDirective,\n  FormFieldMessageComponent,\n  AlertComponent,\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ProgressCircleRingComponent,\n  PopoverComponent,\n]"
        },
        {
          "name": "entryComponents",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ModalWrapperComponent,\n  ModalCompactWrapperComponent,\n  ActionSheetComponent,\n  AlertComponent,\n]"
        },
        {
          "name": "exportedDeclarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  CardComponent,\n  CardHeaderComponent,\n  CardFooterComponent,\n  ButtonComponent,\n  ChartDeprecatedComponent,\n  StockChartDeprecatedComponent,\n  GridComponent,\n  ComponentLoaderDirective,\n  AvatarComponent,\n  GroupByPipe,\n  CalendarComponent,\n  CheckboxComponent,\n  ActionSheetComponent,\n  ModalFooterComponent,\n  ModalRouterLinkDirective,\n  SegmentedControlComponent,\n  ChipComponent,\n  BadgeComponent,\n  ThemeColorDirective,\n  DateInputDirective,\n  DecimalMaskDirective,\n  SlideButtonComponent,\n  ToggleComponent,\n  EmptyStateComponent,\n  FormFieldComponent,\n  InputComponent,\n  InputCounterComponent,\n  TextareaComponent,\n  FabSheetComponent,\n  DividerComponent,\n  ReorderListComponent,\n  DropdownComponent,\n  LoadingOverlayComponent,\n  ProgressCircleComponent,\n  FlagComponent,\n  SlidesComponent,\n  SlideDirective,\n  AccordionDirective,\n  AccordionItemComponent,\n  RadioComponent,\n  RadioGroupComponent,\n  RangeComponent,\n]"
        },
        {
          "name": "exportedModules",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AppModule,\n  RouterOutletModule,\n  PageModule,\n  TabsModule,\n  IconModule,\n  ItemModule,\n  ToggleButtonModule,\n  ListModule,\n  ChartModule,\n  SpinnerModule,\n]"
        },
        {
          "name": "exports",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[...exportedModules, ...exportedDeclarations]"
        },
        {
          "name": "importedModules",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[...exportedModules]"
        },
        {
          "name": "providers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/kirby.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ModalController,\n  ActionSheetHelper,\n  ModalHelper,\n  AlertHelper,\n  ToastHelper,\n  ToastController,\n  BreakpointHelperService,\n  LoadingOverlayService,\n  ResizeObserverFactory,\n  ResizeObserverService,\n  customElementsInitializer(),\n]"
        }
      ],
      "libs/designsystem/src/lib/components/list/list.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/list/list.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ...exportedDeclarations,\n  ListItemColorDirective,\n  InfiniteScrollDirective,\n  ListItemComponent,\n]"
        },
        {
          "name": "exportedDeclarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/list/list.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ListComponent,\n  ListItemComponent,\n  ListItemDirective,\n  ListFlexItemDirective,\n  ListItemTemplateDirective,\n  ListSectionHeaderComponent,\n  ListSectionHeaderDirective,\n  ListHeaderDirective,\n  ListHeaderComponent,\n  ListFooterDirective,\n]"
        }
      ],
      "libs/designsystem/src/lib/components/toggle-button/toggle-button.module.ts": [
        {
          "name": "DECLARATIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/toggle-button/toggle-button.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[ToggleButtonComponent]"
        }
      ],
      "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts": [
        {
          "name": "defaultIcons",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "kirbyIconSettings.icons.map((icon) => icon.name)"
        },
        {
          "name": "kirbyIconSettings",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IconSettings",
          "defaultValue": "{\n  icons: [\n    { name: 'accounts-outline', svg: 'assets/kirby/icons/svg/accounts-outline.svg' },\n    { name: 'accounts', svg: 'assets/kirby/icons/svg/accounts.svg' },\n    { name: 'add', svg: 'assets/kirby/icons/svg/add.svg' },\n    { name: 'remove', svg: 'assets/kirby/icons/svg/remove.svg' },\n    { name: 'unsubscribe', svg: 'assets/kirby/icons/svg/unsubscribe.svg' },\n    { name: 'arrow-back', svg: 'assets/kirby/icons/svg/arrow-back.svg' },\n    { name: 'arrow-down', svg: 'assets/kirby/icons/svg/arrow-down.svg' },\n    { name: 'arrow-more', svg: 'assets/kirby/icons/svg/arrow-more.svg' },\n    { name: 'arrow-up', svg: 'assets/kirby/icons/svg/arrow-up.svg' },\n    { name: 'attach', svg: 'assets/kirby/icons/svg/attach.svg' },\n    { name: 'backspace', svg: 'assets/kirby/icons/svg/backspace.svg' },\n    { name: 'calendar', svg: 'assets/kirby/icons/svg/calendar.svg' },\n    { name: 'camera', svg: 'assets/kirby/icons/svg/camera.svg' },\n    { name: 'checkbox-outline', svg: 'assets/kirby/icons/svg/checkbox-outline.svg' },\n    { name: 'checkbox', svg: 'assets/kirby/icons/svg/checkbox.svg' },\n    { name: 'checkmark-selected', svg: 'assets/kirby/icons/svg/checkmark-selected.svg' },\n    { name: 'close', svg: 'assets/kirby/icons/svg/close.svg' },\n    { name: 'cog', svg: 'assets/kirby/icons/svg/cog.svg' },\n    { name: 'copy', svg: 'assets/kirby/icons/svg/copy.svg' },\n    { name: 'flag', svg: 'assets/kirby/icons/svg/flag.svg' },\n    { name: 'edit', svg: 'assets/kirby/icons/svg/edit.svg' },\n    { name: 'filter', svg: 'assets/kirby/icons/svg/filter.svg' },\n    { name: 'flash-off', svg: 'assets/kirby/icons/svg/flash-off.svg' },\n    { name: 'flash', svg: 'assets/kirby/icons/svg/flash.svg' },\n    { name: 'moneybag', svg: 'assets/kirby/icons/svg/moneybag.svg' },\n    { name: 'help', svg: 'assets/kirby/icons/svg/help.svg' },\n    { name: 'home', svg: 'assets/kirby/icons/svg/home.svg' },\n    { name: 'inbox', svg: 'assets/kirby/icons/svg/inbox.svg' },\n    { name: 'inbox-outline', svg: 'assets/kirby/icons/svg/inbox-outline.svg' },\n    { name: 'information', svg: 'assets/kirby/icons/svg/information.svg' },\n    { name: 'investment', svg: 'assets/kirby/icons/svg/investment.svg' },\n    { name: 'kirby', svg: 'assets/kirby/icons/svg/kirby.svg' },\n    { name: 'link', svg: 'assets/kirby/icons/svg/link.svg' },\n    { name: 'log-out', svg: 'assets/kirby/icons/svg/log-out.svg' },\n    { name: 'menu-outline', svg: 'assets/kirby/icons/svg/menu-outline.svg' },\n    { name: 'menu', svg: 'assets/kirby/icons/svg/menu.svg' },\n    { name: 'misc', svg: 'assets/kirby/icons/svg/misc.svg' },\n    { name: 'more', svg: 'assets/kirby/icons/svg/more.svg' },\n    { name: 'move', svg: 'assets/kirby/icons/svg/move.svg' },\n    { name: 'pension', svg: 'assets/kirby/icons/svg/pension.svg' },\n    { name: 'person-outline', svg: 'assets/kirby/icons/svg/person-outline.svg' },\n    { name: 'person', svg: 'assets/kirby/icons/svg/person.svg' },\n    { name: 'qr', svg: 'assets/kirby/icons/svg/QR.svg' },\n    { name: 'search', svg: 'assets/kirby/icons/svg/search.svg' },\n    { name: 'share', svg: 'assets/kirby/icons/svg/share.svg' },\n    { name: 'sort', svg: 'assets/kirby/icons/svg/sort.svg' },\n    { name: 'support', svg: 'assets/kirby/icons/svg/support.svg' },\n    { name: 'swap', svg: 'assets/kirby/icons/svg/swap.svg' },\n    { name: 'trash', svg: 'assets/kirby/icons/svg/trash.svg' },\n    { name: 'foreign-payment', svg: 'assets/kirby/icons/svg/foreign-payment.svg' },\n    { name: 'clock', svg: 'assets/kirby/icons/svg/clock.svg' },\n    { name: 'verify', svg: 'assets/kirby/icons/svg/verify.svg' },\n    { name: 'warning', svg: 'assets/kirby/icons/svg/warning.svg' },\n    { name: 'write-message', svg: 'assets/kirby/icons/svg/write-message.svg' },\n    { name: 'reorder', svg: 'assets/kirby/icons/svg/reorder.svg' },\n  ],\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts": [
        {
          "name": "DONUT_OPTIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<Options>('DonutOptions')"
        },
        {
          "name": "DonutOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    style: {\n      fontFamily: 'Roboto',\n      fontWeight: '300',\n    },\n    backgroundColor: 'transparent',\n    type: '',\n  },\n  accessibility: {\n    description: 'Donut chart',\n  },\n  title: {\n    text: '',\n  },\n  tooltip: {\n    enabled: false,\n    animation: false,\n  },\n  legend: {\n    layout: 'vertical',\n    symbolRadius: 0,\n    itemStyle: {\n      fontSize: '.875rem',\n    },\n  },\n  plotOptions: {\n    pie: {\n      colors: ['#015132', '#B2D1BF', '#AABC08', '#1FA05A', 'yellowgreen'],\n      allowPointSelect: false,\n      cursor: 'pointer',\n      showInLegend: true,\n      borderColor: null,\n      dataLabels: {\n        format: '{point.label}',\n        enabled: true,\n        connectorWidth: 0,\n        distance: 5,\n        style: {\n          fontSize: '1rem',\n          fontWeight: '200',\n        },\n      },\n      point: {\n        events: {\n          legendItemClick: () => {\n            // Prevent the default behavior (toggle visibility of slices when clicking on legends)\n            return false;\n          },\n        },\n      },\n      states: {\n        hover: {\n          enabled: false,\n        },\n      },\n    },\n    series: {\n      animation: true,\n      dataLabels: {},\n      states: {\n        hover: {\n          enabled: false,\n        },\n        inactive: {\n          opacity: 1,\n        },\n      },\n    },\n  },\n  series: [\n    {\n      name: '',\n      type: 'pie',\n    },\n  ],\n  credits: {\n    enabled: false,\n  },\n  exporting: {\n    enabled: false,\n  },\n  responsive: {\n    rules: [\n      {\n        condition: {\n          minWidth: 640,\n        },\n        chartOptions: {\n          legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            itemMarginTop: 12,\n            symbolRadius: 0,\n            symbolWidth: 14,\n            symbolHeight: 14,\n            x: -100,\n          },\n        },\n      },\n      {\n        condition: {\n          minWidth: 0,\n        },\n        chartOptions: {\n          legend: {\n            symbolRadius: 0,\n          },\n        },\n      },\n    ],\n  },\n}"
        }
      ],
      "libs/designsystem/src/lib/animation/kirby-animation.ts": [
        {
          "name": "Easing",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/animation/kirby-animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.transitionEasings()"
        }
      ],
      "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts": [
        {
          "name": "ElementCssCustomMatchers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CustomMatcherFactories",
          "defaultValue": "{\n  toHaveComputedStyle: (util: MatchersUtil, customEqualityTesters: CustomEqualityTester[]) =>\n    cssPropertyMatcher(util, customEqualityTesters),\n}"
        }
      ],
      "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts": [
        {
          "name": "fontSize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.fontSize"
        },
        {
          "name": "lineHeight",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "DesignTokenHelper.lineHeight"
        }
      ],
      "libs/designsystem/src/lib/components/icon/icon-settings.ts": [
        {
          "name": "ICON_SETTINGS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<IconSettings>('IconSettings')"
        }
      ],
      "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts": [
        {
          "name": "INFINITE_SCROLL_DEBOUNCE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "defaultValue": "100",
          "rawdescription": "Specify debounce duration in ms",
          "description": "<p>Specify debounce duration in ms</p>\n"
        }
      ],
      "libs/designsystem/src/lib/components/list/list.component.ts": [
        {
          "name": "INTERVAL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/list/list.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "defaultValue": "400"
        }
      ],
      "libs/designsystem/testing-base/src/lib/mock-components.ts": [
        {
          "name": "MOCK_COMPONENTS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/testing-base/src/lib/mock-components.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\r\n  MockAccordionItemComponent,\r\n  MockAppComponent,\r\n  MockAvatarComponent,\r\n  MockButtonComponent,\r\n  MockCalendarComponent,\r\n  MockCardFooterComponent,\r\n  MockCardHeaderComponent,\r\n  MockCardComponent,\r\n  MockChartComponent,\r\n  MockChartDeprecatedComponent,\r\n  MockCheckboxComponent,\r\n  MockChipComponent,\r\n  MockDividerComponent,\r\n  MockDropdownComponent,\r\n  MockEmptyStateComponent,\r\n  MockFabSheetComponent,\r\n  MockFlagComponent,\r\n  MockFormFieldMessageComponent,\r\n  MockFormFieldComponent,\r\n  MockInputComponent,\r\n  MockInputCounterComponent,\r\n  MockTextareaComponent,\r\n  MockGridComponent,\r\n  MockIconComponent,\r\n  MockItemComponent,\r\n  MockLabelComponent,\r\n  MockListHeaderComponent,\r\n  MockListItemComponent,\r\n  MockListSectionHeaderComponent,\r\n  MockListComponent,\r\n  MockLoadingOverlayComponent,\r\n  MockActionSheetComponent,\r\n  MockModalFooterComponent,\r\n  MockPageFooterComponent,\r\n  MockPageTitleDirective,\r\n  MockPageToolbarTitleDirective,\r\n  MockPageActionsDirective,\r\n  MockPageContentDirective,\r\n  MockPageProgressComponent,\r\n  MockPageTitleComponent,\r\n  MockPageContentComponent,\r\n  MockPageActionsComponent,\r\n  MockPageComponent,\r\n  MockPopoverComponent,\r\n  MockProgressCircleComponent,\r\n  MockRadioGroupComponent,\r\n  MockRadioComponent,\r\n  MockRangeComponent,\r\n  MockReorderListComponent,\r\n  MockRouterOutletComponent,\r\n  MockSegmentedControlComponent,\r\n  MockSlideButtonComponent,\r\n  MockSpinnerComponent,\r\n  MockTabButtonComponent,\r\n  MockTabsComponent,\r\n  MockToggleComponent,\r\n  MockToggleButtonComponent,\r\n]"
        }
      ],
      "libs/designsystem/testing-base/src/lib/mock-directives.ts": [
        {
          "name": "MOCK_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/testing-base/src/lib/mock-directives.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[MockThemeColorDirective, MockFitHeadingDirective]"
        }
      ],
      "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts": [
        {
          "name": "MOCK_PROVIDERS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\r\n  {\r\n    provide: IconRegistryService,\r\n    useFactory: iconRegistryServiceFactory,\r\n  },\r\n  {\r\n    provide: LoadingOverlayService,\r\n    useFactory: loadingOverlayServiceFactory,\r\n  },\r\n  {\r\n    provide: ModalController,\r\n    useFactory: modalControllerFactory,\r\n  },\r\n  {\r\n    provide: TabsService,\r\n    useFactory: tabsServiceFactory,\r\n  },\r\n  {\r\n    provide: ToastController,\r\n    useFactory: toastControllerFactory,\r\n  },\r\n]"
        }
      ],
      "libs/designsystem/testing-jest/src/lib/mock-providers.ts": [
        {
          "name": "MOCK_PROVIDERS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\r\n  {\r\n    provide: IconRegistryService,\r\n    useFactory: iconRegistryServiceFactory,\r\n  },\r\n  {\r\n    provide: LoadingOverlayService,\r\n    useFactory: loadingOverlayServiceFactory,\r\n  },\r\n  {\r\n    provide: ModalController,\r\n    useFactory: modalControllerFactory,\r\n  },\r\n  {\r\n    provide: TabsService,\r\n    useFactory: tabsServiceFactory,\r\n  },\r\n  {\r\n    provide: ToastController,\r\n    useFactory: toastControllerFactory,\r\n  },\r\n]"
        }
      ],
      "libs/designsystem/src/lib/components/angular-component-lib/utils.ts": [
        {
          "name": "proxyInputs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach((item) => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      },\n    });\n  });\n}"
        },
        {
          "name": "proxyMethods",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach((methodName) => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));\n    };\n  });\n}"
        },
        {
          "name": "proxyOutputs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts": [
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts": [
        {
          "name": "ResizeObserver",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type"
        }
      ],
      "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.events.ts": [
        {
          "name": "selectedTabClickEvent",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.events.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'kirbySelectedTabClick'"
        }
      ],
      "libs/designsystem/src/lib/helpers/color-helper.styles.ts": [
        {
          "name": "styles",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/helpers/color-helper.styles.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  brandColors: { primary: '#00e89a', secondary: '#005c3c', tertiary: '#01352c' },\n  notificationColors: { success: '#2cf287', warning: '#ffca3a', danger: '#ff595e' },\n  systemColors: {\n    backgroundColor: '#f6f6f6',\n    white: '#ffffff',\n    light: '#f2f2f2',\n    semiLight: '#ebebeb',\n    medium: '#d1d1d1',\n    semiDark: '#8e8e8e',\n    dark: '#353535',\n    black: '#1c1c1c',\n  },\n  textColors: { white: '#ffffff', semiDark: '#707070', black: '#1c1c1c', danger: '#ee0d0d' },\n  focusRingColor: '#4d90fe',\n  mainColors: {\n    primary: '#00e89a',\n    secondary: '#005c3c',\n    tertiary: '#01352c',\n    success: '#2cf287',\n    warning: '#ffca3a',\n    danger: '#ff595e',\n    light: '#f2f2f2',\n    medium: '#d1d1d1',\n    dark: '#353535',\n  },\n  kirbyColors: {\n    black: '#1c1c1c',\n    blackRgb: '28, 28, 28',\n    blackContrast: '#ffffff',\n    blackContrastRgb: '255, 255, 255',\n    blackShade: '#191919',\n    blackShadeRgb: '25, 25, 25',\n    blackTint: '#333333',\n    blackTintRgb: '51, 51, 51',\n    blackColorBrightness: 'dark',\n    dark: '#353535',\n    darkRgb: '53, 53, 53',\n    darkContrast: '#ffffff',\n    darkContrastRgb: '255, 255, 255',\n    darkShade: '#2f2f2f',\n    darkShadeRgb: '47, 47, 47',\n    darkTint: '#494949',\n    darkTintRgb: '73, 73, 73',\n    darkColorBrightness: 'dark',\n    semiDark: '#8e8e8e',\n    semiDarkRgb: '142, 142, 142',\n    semiDarkContrast: '#1c1c1c',\n    semiDarkContrastRgb: '28, 28, 28',\n    semiDarkShade: '#7d7d7d',\n    semiDarkShadeRgb: '125, 125, 125',\n    semiDarkTint: '#999999',\n    semiDarkTintRgb: '153, 153, 153',\n    semiDarkColorBrightness: 'light',\n    medium: '#d1d1d1',\n    mediumRgb: '209, 209, 209',\n    mediumContrast: '#1c1c1c',\n    mediumContrastRgb: '28, 28, 28',\n    mediumShade: '#b8b8b8',\n    mediumShadeRgb: '184, 184, 184',\n    mediumTint: '#d6d6d6',\n    mediumTintRgb: '214, 214, 214',\n    mediumColorBrightness: 'light',\n    semiLight: '#ebebeb',\n    semiLightRgb: '235, 235, 235',\n    semiLightContrast: '#1c1c1c',\n    semiLightContrastRgb: '28, 28, 28',\n    semiLightShade: '#cfcfcf',\n    semiLightShadeRgb: '207, 207, 207',\n    semiLightTint: '#ededed',\n    semiLightTintRgb: '237, 237, 237',\n    semiLightColorBrightness: 'light',\n    light: '#f2f2f2',\n    lightRgb: '242, 242, 242',\n    lightContrast: '#1c1c1c',\n    lightContrastRgb: '28, 28, 28',\n    lightShade: '#d5d5d5',\n    lightShadeRgb: '213, 213, 213',\n    lightTint: '#f3f3f3',\n    lightTintRgb: '243, 243, 243',\n    lightColorBrightness: 'light',\n    white: '#ffffff',\n    whiteRgb: '255, 255, 255',\n    whiteContrast: '#1c1c1c',\n    whiteContrastRgb: '28, 28, 28',\n    whiteShade: '#e0e0e0',\n    whiteShadeRgb: '224, 224, 224',\n    whiteTint: 'white',\n    whiteTintRgb: '255, 255, 255',\n    whiteColorBrightness: 'white',\n    backgroundColor: '#f6f6f6',\n    backgroundColorRgb: '246, 246, 246',\n    backgroundColorContrast: '#1c1c1c',\n    backgroundColorContrastRgb: '28, 28, 28',\n    backgroundColorShade: '#d8d8d8',\n    backgroundColorShadeRgb: '216, 216, 216',\n    backgroundColorTint: '#f7f7f7',\n    backgroundColorTintRgb: '247, 247, 247',\n    backgroundColorColorBrightness: 'light',\n    danger: '#ff595e',\n    dangerRgb: '255, 89, 94',\n    dangerContrast: '#1c1c1c',\n    dangerContrastRgb: '28, 28, 28',\n    dangerShade: '#e04e53',\n    dangerShadeRgb: '224, 78, 83',\n    dangerTint: '#ff6a6e',\n    dangerTintRgb: '255, 106, 110',\n    dangerColorBrightness: 'light',\n    warning: '#ffca3a',\n    warningRgb: '255, 202, 58',\n    warningContrast: '#1c1c1c',\n    warningContrastRgb: '28, 28, 28',\n    warningShade: '#e0b233',\n    warningShadeRgb: '224, 178, 51',\n    warningTint: '#ffcf4e',\n    warningTintRgb: '255, 207, 78',\n    warningColorBrightness: 'light',\n    success: '#2cf287',\n    successRgb: '44, 242, 135',\n    successContrast: '#1c1c1c',\n    successContrastRgb: '28, 28, 28',\n    successShade: '#27d577',\n    successShadeRgb: '39, 213, 119',\n    successTint: '#41f393',\n    successTintRgb: '65, 243, 147',\n    successColorBrightness: 'light',\n    tertiary: '#01352c',\n    tertiaryRgb: '1, 53, 44',\n    tertiaryContrast: '#ffffff',\n    tertiaryContrastRgb: '255, 255, 255',\n    tertiaryShade: '#012f27',\n    tertiaryShadeRgb: '1, 47, 39',\n    tertiaryTint: '#1a4941',\n    tertiaryTintRgb: '26, 73, 65',\n    tertiaryColorBrightness: 'dark',\n    secondary: '#005c3c',\n    secondaryRgb: '0, 92, 60',\n    secondaryContrast: '#ffffff',\n    secondaryContrastRgb: '255, 255, 255',\n    secondaryShade: '#005135',\n    secondaryShadeRgb: '0, 81, 53',\n    secondaryTint: '#1a6c50',\n    secondaryTintRgb: '26, 108, 80',\n    secondaryColorBrightness: 'dark',\n    primary: '#00e89a',\n    primaryRgb: '0, 232, 154',\n    primaryContrast: '#1c1c1c',\n    primaryContrastRgb: '28, 28, 28',\n    primaryShade: '#00cc88',\n    primaryShadeRgb: '0, 204, 136',\n    primaryTint: '#1aeaa4',\n    primaryTintRgb: '26, 234, 164',\n    primaryColorBrightness: 'light',\n  },\n  kirbyTextColors: {\n    danger: '#ee0d0d',\n    dangerRgb: '238, 13, 13',\n    dangerContrast: '#ffffff',\n    dangerContrastRgb: '255, 255, 255',\n    dangerShade: '#d10b0b',\n    dangerShadeRgb: '209, 11, 11',\n    dangerTint: '#f02525',\n    dangerTintRgb: '240, 37, 37',\n    dangerColorBrightness: 'dark',\n    black: '#1c1c1c',\n    blackRgb: '28, 28, 28',\n    blackContrast: '#ffffff',\n    blackContrastRgb: '255, 255, 255',\n    blackShade: '#191919',\n    blackShadeRgb: '25, 25, 25',\n    blackTint: '#333333',\n    blackTintRgb: '51, 51, 51',\n    blackColorBrightness: 'dark',\n    semiDark: '#707070',\n    semiDarkRgb: '112, 112, 112',\n    semiDarkContrast: '#ffffff',\n    semiDarkContrastRgb: '255, 255, 255',\n    semiDarkShade: '#636363',\n    semiDarkShadeRgb: '99, 99, 99',\n    semiDarkTint: '#7e7e7e',\n    semiDarkTintRgb: '126, 126, 126',\n    semiDarkColorBrightness: 'dark',\n    white: '#ffffff',\n    whiteRgb: '255, 255, 255',\n    whiteContrast: '#1c1c1c',\n    whiteContrastRgb: '28, 28, 28',\n    whiteShade: '#e0e0e0',\n    whiteShadeRgb: '224, 224, 224',\n    whiteTint: 'white',\n    whiteTintRgb: '255, 255, 255',\n    whiteColorBrightness: 'white',\n  },\n}"
        }
      ],
      "libs/designsystem/src/lib/helpers/design-token-helper.styles.ts": [
        {
          "name": "styles",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/helpers/design-token-helper.styles.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  sizes: {\n    xxxl: '56px',\n    xxl: '48px',\n    xl: '40px',\n    l: '32px',\n    m: '24px',\n    s: '16px',\n    xs: '12px',\n    xxs: '8px',\n    xxxs: '4px',\n    xxxxs: '2px',\n  },\n  fontSizes: {\n    xxxxl: '72px',\n    xxxl: '56px',\n    xxl: '40px',\n    xl: '32px',\n    l: '22px',\n    m: '18px',\n    n: '16px',\n    s: '14px',\n    xs: '12px',\n    xxs: '10px',\n  },\n  lineHeight: { xl: '38px', l: '28px', m: '24px', n: '24px', s: '20px', xs: '16px', xxs: '11px' },\n  fontWeight: { light: '300', normal: '400', bold: '700', black: '900' },\n  iconFontSizes: { xs: '16px', sm: '24px', md: '32px', lg: '56px' },\n  zLayers: {\n    default: '1',\n    segmentBadge: '2',\n    dropdown: '800',\n    popover: '850',\n    modalOverlay: '900',\n    modal: '901',\n    loadingOverlay: '1001',\n  },\n  borderRadius: '16px',\n  borderRadiusRound: '999px',\n  breakpoints: {\n    small: '321px',\n    medium: '721px',\n    large: '1025px',\n    xlarge: '60em',\n    xxlarge: '80em',\n  },\n  elevations: {\n    2: 'rgba(28, 28, 28, 0.3) 0px 5px 10px -10px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n    4: 'rgba(28, 28, 28, 0.3) 0px 10px 15px -10px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n    8: 'rgba(28, 28, 28, 0.3) 0px 20px 30px -15px, rgba(28, 28, 28, 0.08) 0px 0px 5px 0px',\n  },\n  avatarSizes: { xs: '32px', s: '40px', m: '56px', l: '96px' },\n  avatarBadgeSize: '16px',\n  pageContentMaxWidth: '720px',\n  alertMaxWidth: '359px',\n  compactModalMaxWidth: '359px',\n  modalMaxWidth: '720px',\n  modalHeights: { s: '288px', m: '460px', l: '576px' },\n  modalDefaultHeight: '460px',\n  drawerDefaultHeight: '288px',\n  itemHeights: { m: '56px', s: '44px', xs: '32px' },\n  dropdownItemHeight: '44px',\n  fatFingerSize: '44px',\n  checkboxRadioSizes: { xs: '32px', sm: '44px', md: '56px' },\n  checkboxRadioSpacing: { toEdge: '16px', toLabel: '12px' },\n  softKeyboardTransitionEnter: '250ms ease-out 1ms',\n  softKeyboardTransitionLeave: '150ms ease-out',\n  transitionDurations: { quick: '200ms', short: '300ms', long: '500ms', extraLong: '1000ms' },\n  transitionEasings: {\n    static: 'linear',\n    enter: 'ease-out',\n    exit: 'ease-in',\n    enterExit: 'ease',\n    motion: 'cubic-bezier(0.25, 0.1, 0.25, 1)',\n    modal: { enter: 'cubic-bezier(0.32, 0.72, 0, 1)', exit: 'cubic-bezier(0.32, 0.72, 0, 1)' },\n  },\n  loadingOverlayBackdropOpacity: '0.8',\n}"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts": [
        {
          "name": "TIMESERIES_OPTIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<Options>('TimeSeriesOptions')"
        },
        {
          "name": "TimeSeriesOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Options",
          "defaultValue": "{\n  chart: {\n    backgroundColor: {\n      linearGradient: { x1: 0, x2: 0, y1: 0, y2: 3 },\n      stops: [\n        [0, '#F6F6F6'],\n        [1, '#808080'],\n      ],\n    },\n    zoomType: 'x',\n    type: 'timeseries',\n    borderWidth: 0,\n    plotBorderWidth: 0,\n    margin: 0,\n    marginTop: 48,\n  },\n  accessibility: {\n    description: '',\n  },\n  title: {\n    text: '',\n  },\n  subtitle: {\n    text: '',\n  },\n  tooltip: {\n    shadow: false,\n    formatter: function() {\n      // @ts-ignore\n      return dateFormat('%e. %b', new Date(this.x)) + '.' + '<br/><b>' + this.y + '</b>';\n    },\n    //xDateFormat: '%d/%m',\n    positioner: function(_labelWidth, _labelHeight, point) {\n      return { x: point.x, y: 0 };\n    },\n    borderWidth: 0,\n  },\n  xAxis: {\n    visible: false,\n    lineColor: '#FFFFFF',\n    tickColor: '#FFFFFF',\n    labels: {\n      style: {\n        color: 'white',\n      },\n    },\n    opposite: true,\n    crosshair: {\n      zIndex: 3,\n      width: 1,\n      color: '#00E89A',\n    },\n    type: 'datetime',\n    tickInterval: 1,\n  },\n  yAxis: {\n    visible: false,\n  },\n  legend: {\n    enabled: false,\n  },\n  plotOptions: {\n    area: {\n      fillColor: '#01352C',\n      marker: {\n        lineWidth: 14,\n        lineColor: 'rgba(255,255,255,0.2)',\n        radius: 6,\n        fillColor: '#00E89A',\n      },\n      lineColor: '#01352C',\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1,\n        },\n      },\n      threshold: null,\n    },\n    series: {\n      marker: {\n        enabledThreshold: 50,\n      },\n    },\n  },\n  series: [\n    {\n      type: 'area',\n      name: 'USD to EUR',\n    },\n  ],\n}"
        }
      ],
      "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts": [
        {
          "name": "uniqueId",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "defaultValue": "0"
        }
      ]
    },
    "groupedFunctions": {
      "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts": [
        {
          "name": "colorPoints",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts": [
        {
          "name": "colorPoints",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        }
      ],
      "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts": [
        {
          "name": "compareCssProperty",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "util",
              "type": "MatchersUtil",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customEqualityTesters",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "expectedValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "expectedValueAlias",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "returnType": "CustomMatcherResult",
          "jsdoctags": [
            {
              "name": "util",
              "type": "MatchersUtil",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customEqualityTesters",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "expectedValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "expectedValueAlias",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "compareSize",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "first",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "second",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "boolean | void",
          "jsdoctags": [
            {
              "name": "first",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "second",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cssPropertyMatcher",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "util",
              "type": "MatchersUtil",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customEqualityTesters",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "util",
              "type": "MatchersUtil",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customEqualityTesters",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getErrorMessage",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "actualValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "expectedValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "expectedValueAlias",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Element",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "actualValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "expectedValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "expectedValueAlias",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExpectedStringValueAndAlias",
          "file": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "expectedValue",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "cssProperty",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "expectedValue",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/designsystem/src/lib/app-initialize.ts": [
        {
          "name": "customElementsInitializer",
          "file": "libs/designsystem/src/lib/app-initialize.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        }
      ],
      "libs/designsystem/src/lib/helpers/deep-copy.ts": [
        {
          "name": "deepCopy",
          "file": "libs/designsystem/src/lib/helpers/deep-copy.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "obj",
              "type": "Object",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "obj",
              "type": "Object",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts": [
        {
          "name": "iconRegistryServiceFactory",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "loadingOverlayServiceFactory",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "modalControllerFactory",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "tabsServiceFactory",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "toastControllerFactory",
          "file": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        }
      ],
      "libs/designsystem/testing-jest/src/lib/mock-providers.ts": [
        {
          "name": "iconRegistryServiceFactory",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "loadingOverlayServiceFactory",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "modalControllerFactory",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "tabsServiceFactory",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "toastControllerFactory",
          "file": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        }
      ],
      "libs/designsystem/src/lib/components/chart/chart.types.ts": [
        {
          "name": "isNumberArray",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "number[]",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/designsystem/src/lib/helpers/merge-deep.ts": [
        {
          "name": "mergeDeep",
          "file": "libs/designsystem/src/lib/helpers/merge-deep.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Performs a deep merge of objects and returns new object. Does not modify\nobjects (immutable).\nIt merges from into object to the left\n eg. mergeDeep({a: &#39;will be overridden&#39;, b: &#39;some val&#39;}, {a: &#39;new val&#39;}) =&gt;  {a: &#39;new val&#39;, b: &#39;some val&#39;}</p>\n",
          "args": [
            {
              "name": "originalObject",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "overrideObject",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "config",
              "type": "object",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ mergeArrays: false }"
            }
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 269,
                "end": 283,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "originalObject"
              },
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 263,
                "end": 268,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>object - Object to override,</p>\n"
            },
            {
              "name": {
                "pos": 323,
                "end": 337,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "overrideObject"
              },
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 317,
                "end": 322,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>object - Object to override &quot;toOverride&quot; values with</p>\n"
            },
            {
              "name": {
                "pos": 401,
                "end": 407,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "config"
              },
              "type": "object",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ mergeArrays: false }",
              "tagName": {
                "pos": 395,
                "end": 400,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>object - Configuration for how to merge.\nmergeArrays determines if it should merge or override arrays</p>\n"
            },
            {
              "tagName": {
                "pos": 518,
                "end": 525,
                "flags": 4194304,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": "<p>object - New object with merged key/values</p>\n"
            }
          ]
        },
        {
          "name": "mergeDeepAll",
          "file": "libs/designsystem/src/lib/helpers/merge-deep.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "objects",
              "deprecated": false,
              "deprecationMessage": "",
              "dotDotDotToken": true
            }
          ],
          "returnType": "Object",
          "jsdoctags": [
            {
              "name": "objects",
              "deprecated": false,
              "deprecationMessage": "",
              "dotDotDotToken": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/designsystem/src/lib/components/angular-component-lib/utils.ts": [
        {
          "name": "ProxyCmp",
          "file": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "opts",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "opts",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts": [
        {
          "name": "scriptedBackgroundColor",
          "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "context",
              "type": "ScriptableContext",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "context",
              "type": "ScriptableContext",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scriptedHoverBackgroundColor",
          "file": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "context",
              "type": "ScriptableContext",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "context",
              "type": "ScriptableContext",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "libs/designsystem/src/lib/components/avatar/avatar.component.ts": [
        {
          "name": "AvatarSize",
          "childs": [
            {
              "name": "XS",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "xs"
            },
            {
              "name": "SM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "sm"
            },
            {
              "name": "MD",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "md"
            },
            {
              "name": "LG",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "lg"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/avatar/avatar.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/button/button.component.ts": [
        {
          "name": "ButtonSize",
          "childs": [
            {
              "name": "SM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "sm"
            },
            {
              "name": "MD",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "md"
            },
            {
              "name": "LG",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "lg"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/button/button.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-type.ts": [
        {
          "name": "ChartDeprecatedType",
          "childs": [
            {
              "name": "PIE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "pie"
            },
            {
              "name": "DONUT",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "donut"
            },
            {
              "name": "AREASPLINE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "areaspline"
            },
            {
              "name": "TIMESERIES",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "timeseries"
            },
            {
              "name": "ACTIVITYGAUGE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "activitygauge"
            },
            {
              "name": "BAR",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "bar"
            },
            {
              "name": "COLUMN",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "column"
            },
            {
              "name": "CUSTOM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "custom"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-type.ts"
        }
      ],
      "libs/designsystem/src/lib/animation/kirby-animation.ts": [
        {
          "name": "Duration",
          "childs": [
            {
              "name": "QUICK",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "SHORT",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "LONG",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "EXTRA_LONG",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/animation/kirby-animation.ts"
        }
      ],
      "libs/designsystem/src/lib/components/popover/popover.component.ts": [
        {
          "name": "HorizontalDirection",
          "childs": [
            {
              "name": "right",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "right"
            },
            {
              "name": "left",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "left"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/popover/popover.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/icon/icon.component.ts": [
        {
          "name": "IconSize",
          "childs": [
            {
              "name": "XS",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "xs"
            },
            {
              "name": "SM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "sm"
            },
            {
              "name": "MD",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "md"
            },
            {
              "name": "LG",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "lg"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/icon/icon.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/form-field/input/input.component.ts": [
        {
          "name": "InputSize",
          "childs": [
            {
              "name": "medium",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "md"
            },
            {
              "name": "large",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "lg"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/form-field/input/input.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/item/item.component.ts": [
        {
          "name": "ItemSize",
          "childs": [
            {
              "name": "XS",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "xs"
            },
            {
              "name": "SM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "sm"
            },
            {
              "name": "MD",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "md"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/item/item.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/dropdown/dropdown.types.ts": [
        {
          "name": "OpenState",
          "childs": [
            {
              "name": "closed",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "opening",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "open",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/dropdown/dropdown.types.ts"
        },
        {
          "name": "VerticalDirection",
          "childs": [
            {
              "name": "up",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "down",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/dropdown/dropdown.types.ts"
        }
      ],
      "libs/designsystem/src/lib/components/segmented-control/segmented-control.component.ts": [
        {
          "name": "SegmentedControlMode",
          "childs": [
            {
              "name": "chip",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "chip"
            },
            {
              "name": "compactChip",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "compactChip"
            },
            {
              "name": "default",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "default"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/segmented-control/segmented-control.component.ts"
        }
      ],
      "libs/designsystem/src/lib/components/calendar/calendar.component.ts": [
        {
          "name": "TimeUnit",
          "childs": [
            {
              "name": "years",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "years"
            },
            {
              "name": "months",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "months"
            },
            {
              "name": "weeks",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "weeks"
            },
            {
              "name": "days",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "days"
            },
            {
              "name": "hours",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "hours"
            },
            {
              "name": "minutes",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "minutes"
            },
            {
              "name": "seconds",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "seconds"
            },
            {
              "name": "milliseconds",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "milliseconds"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "libs/designsystem/src/lib/components/list/list-item/list-item.component.ts": [
        {
          "name": "BoundaryClass",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"first\" | \"last\"",
          "file": "libs/designsystem/src/lib/components/list/list-item/list-item.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/calendar/options/calendar-year-navigator-config.ts": [
        {
          "name": "CalendarYearNavigatorConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/src/lib/components/calendar/options/calendar-year-navigator-config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "libs/designsystem/src/lib/components/card/card-header/card-header.component.ts": [
        {
          "name": "CardFlagLevel",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "NotificationColor | \"info\" | null",
          "file": "libs/designsystem/src/lib/components/card/card-header/card-header.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/chart/chart.types.ts": [
        {
          "name": "ChartDataset",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        },
        {
          "name": "ChartHighlightedElements",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "number[][]",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 181
        },
        {
          "name": "ChartType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"column\" | \"bar\" | \"line\"",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        },
        {
          "name": "ChartTypeConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        },
        {
          "name": "ChartTypesConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/designsystem/src/lib/components/chart/chart.types.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 193
        }
      ],
      "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts": [
        {
          "name": "fixedConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        },
        {
          "name": "stickyConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "libs/designsystem/src/lib/components/page/page.component.ts": [
        {
          "name": "fixedConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/src/lib/components/page/page.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        },
        {
          "name": "stickyConfig",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/designsystem/src/lib/components/page/page.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "libs/designsystem/src/lib/components/list/list.component.ts": [
        {
          "name": "ListShape",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"square\" | \"rounded\" | \"none\"",
          "file": "libs/designsystem/src/lib/components/list/list.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts": [
        {
          "name": "ListSwipeActionType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"success\" | \"warning\" | \"danger\"",
          "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        },
        {
          "name": "ListSwipeDirection",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"right\" | \"left\"",
          "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        },
        {
          "name": "ListSwipeEnd",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"start\" | \"end\"",
          "file": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/calendar/calendar.component.ts": [
        {
          "name": "Locale",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "LocaleDateFns",
          "file": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 176
        }
      ],
      "libs/designsystem/src/lib/components/toast/config/toast-config.ts": [
        {
          "name": "MessageType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"success\" | \"warning\" | \"danger\"",
          "file": "libs/designsystem/src/lib/components/toast/config/toast-config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>&#39;danger&#39; is deprecated. Use Kirby Alert for critical events</p>\n",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts": [
        {
          "name": "ModalFlavor",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"modal\" | \"drawer\" | \"compact\"",
          "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        },
        {
          "name": "ModalSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"small\" | \"medium\" | \"large\" | \"full-height\"",
          "file": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 185
        }
      ],
      "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer-callback.ts": [
        {
          "name": "ResizeObserverCallback",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer-callback.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 177
        }
      ],
      "libs/designsystem/src/lib/testing/test-helper.ts": [
        {
          "name": "ScreenSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/designsystem/src/lib/testing/test-helper.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 191
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": "libs/designsystem/src/lib/animation/kirby-animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Easing",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/app-initialize.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "customElementsInitializer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/app-initialize.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appInitialize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AccordionItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/accordion/accordion-item.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "uniqueId",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/accordion/accordion.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AccordionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "ProxyCmp",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "proxyInputs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "proxyMethods",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/angular-component-lib/utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "proxyOutputs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/avatar/avatar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AvatarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/29",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CalendarComponent",
        "coveragePercent": 1,
        "coverageCount": "1/58",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/calendar/calendar.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CalendarDay",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/calendar/helpers/calendar-cell.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CalendarCell",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/calendar/helpers/calendar-options.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CalendarOptions",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/calendar/helpers/calendar.helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CalendarHelper",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/card/card-footer/card-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/card/card-header/card-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/card/card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ChartDeprecatedHelper",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated-helper.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/chart-deprecated.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChartDeprecatedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/24",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ACTIVITYGAUGE_OPTIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/activitygauge.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ActivityGaugeOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AREASPLINE_OPTIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/areaspline.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AreaSplineOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "colorPoints",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "barOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "fontSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/bar.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "colorPoints",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "columnOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "fontSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/column.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DONUT_OPTIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/donut.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DonutOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TIMESERIES_OPTIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart-deprecated/options/timeseries.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TimeSeriesOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/chart-js.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ChartJSService",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_CONTROLLERS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_ELEMENTS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_PLUGINS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_SCALES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart-js/configured-chart-js.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "mergedDefaults",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChartComponent",
        "coveragePercent": 0,
        "coverageCount": "0/22",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/chart.types.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "isNumberArray",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "borderColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "borderDash",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "borderWidth",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_ANNOTATIONS_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/annotations.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/chart-config.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ChartConfigService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_GLOBAL_DEFAULTS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/global-defaults.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/interaction-functions-extensions.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_INTERACTION_FUNCTIONS_EXTENSIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "scriptedBackgroundColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "scriptedHoverBackgroundColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "backgroundColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "hoverBackgroundColor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/shared.utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CHART_TYPES_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chart/configs/type.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/checkbox/checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CheckboxComponent",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/chip/chip.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChipComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/divider/divider.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DividerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/dropdown/dropdown.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DropdownComponent",
        "coveragePercent": 5,
        "coverageCount": "5/91",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/dropdown/keyboard-handler.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "KeyboardHandlerService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/empty-state/empty-state.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "EmptyStateComponent",
        "coveragePercent": 12,
        "coverageCount": "1/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/fab-sheet/fab-sheet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FabSheetComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/flag/flag.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FlagComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/directives/date/date-input.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DateInputDirective",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/directives/decimal-mask/decimal-mask.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DecimalMaskDirective",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/directives/decimal-mask/decimal-mask.directive.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "InputMask",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/form-field-message/form-field-message.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormFieldMessageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/form-field.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormFieldComponent",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/input-counter/input-counter.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputCounterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/input/input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputComponent",
        "coveragePercent": 5,
        "coverageCount": "1/18",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/form-field/textarea/textarea.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TextareaComponent",
        "coveragePercent": 7,
        "coverageCount": "1/14",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/grid/breakpoint-helper.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "BreakpointHelperService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/grid/grid-card-configuration.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GridCardConfiguration",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/grid/grid.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GridComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/grid/grid.component.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GridCard",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/icon-registry.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "IconRegistryService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Icon",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IconSettings",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/icon-settings.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ICON_SETTINGS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/icon.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "IconComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "defaultIcons",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/icon/kirby-icon-settings.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "kirbyIconSettings",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/item/item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/item/label/label.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LabelComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "InfiniteScrollDirective",
        "coveragePercent": 66,
        "coverageCount": "8/12",
        "status": "good"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/directives/infinite-scroll.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "INFINITE_SCROLL_DEBOUNCE",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/directives/list-item-color.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListItemColorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/directives/scroll.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Scroll",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/helpers/list-helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ListHelper",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list-header/list-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ListHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list-item/list-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ListItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/25",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list-section-header/list-section-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ListSectionHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list-swipe-action.type.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ListSwipeAction",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ListComponent",
        "coveragePercent": 4,
        "coverageCount": "2/47",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "INTERVAL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListFlexItemDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListFooterDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListItemDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListItemTemplateDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ListSectionHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.event.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "LoadOnDemandEvent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.event.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "LoadOnDemandEventData",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/list.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "exportedDeclarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/list/pipes/group-by.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "GroupByPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/loading-overlay/loading-overlay.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LoadingOverlayComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/loading-overlay/loading-overlay.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LoadingOverlayService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/action-sheet/action-sheet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ActionSheetComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/action-sheet/config/action-sheet-config.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ActionSheetConfig",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/action-sheet/config/action-sheet-item.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ActionSheetItem",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/alert/alert.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AlertComponent",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/alert/config/alert-config.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "AlertConfig",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/footer/modal-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/compact/modal-compact-wrapper.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalCompactWrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/drawer-supplementary-action.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DrawerSupplementaryAction",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.helper.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COMPONENT_PROPS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/config/modal-config.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModalConfig",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalWrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/80",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "component",
        "linktype": "component",
        "name": "DynamicFooterEmbeddedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "component",
        "linktype": "component",
        "name": "DynamicPageProgressEmbeddedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputEmbeddedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "component",
        "linktype": "component",
        "name": "StaticFooterEmbeddedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "component",
        "linktype": "component",
        "name": "StaticPageProgressEmbeddedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/modal-wrapper/modal-wrapper.testbuilder.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ModalWrapperTestBuilder",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/action-sheet.helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ActionSheetHelper",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/alert.helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AlertHelper",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal-animation-builder.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalAnimationBuilderService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal-navigation.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalNavigationService",
        "coveragePercent": 0,
        "coverageCount": "0/25",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.controller.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalController",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalHelper",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Modal",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModalRouteActivation",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Overlay",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/modal/services/modal.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "OverlayEventDetail",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page-footer/page-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageActionsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/57",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageContentComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageProgressComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageTitleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "PageActionsDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "PageContentDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "PageTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/page/page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "PageToolbarTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/popover/popover.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PopoverComponent",
        "coveragePercent": 0,
        "coverageCount": "0/27",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/progress-circle/progress-circle-ring.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProgressCircleRingComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/progress-circle/progress-circle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProgressCircleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/radio/radio-group/radio-group.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RadioGroupComponent",
        "coveragePercent": 2,
        "coverageCount": "1/40",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/radio/radio.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RadioComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/range/range.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RangeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/22",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/reorder-list/reorder-event.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ReorderEvent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/reorder-list/reorder-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ReorderListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/router-outlet/router-outlet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RouterOutletComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/segmented-control/segment-item.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SegmentItem",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/segmented-control/segmented-control.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SegmentedControlComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/component-configuration.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ComponentConfiguration",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/component-loader.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ComponentLoaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/dynamic-component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DynamicComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ResizeObserverFactory",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.factory.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ResizeObserver",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/resize-observer/resize-observer.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ResizeObserverService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer-entry.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ResizeObserverEntry",
        "coveragePercent": 66,
        "coverageCount": "2/3",
        "status": "good"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/shared/resize-observer/types/resize-observer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ResizeObserver",
        "coveragePercent": 75,
        "coverageCount": "3/4",
        "status": "good"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/slide-button/slide-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SlideButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/slides/slides.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SlidesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/slides/slides.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SlideDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/spinner/spinner.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SpinnerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StockChartDeprecatedDataPoint",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "annotations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "defaultOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/stock-chart-deprecated/options/stock-chart-deprecated-options.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "stockChartDeprecatedOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/stock-chart-deprecated/stock-chart-deprecated.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StockChartDeprecatedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/tabs/tab-button/tab-button.events.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectedTabClickEvent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/tabs/tabs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/tabs/tabs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TabsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toast/config/toast-config.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ToastConfig",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toast/services/toast.controller.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ToastController",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toast/services/toast.helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ToastHelper",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toggle-button/toggle-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ToggleButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toggle-button/toggle-button.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DECLARATIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/toggle/toggle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ToggleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/components/web-component-proxies.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "KirbyBadge",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "FitHeadingDirective",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FitHeadingConfig",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "HeadingSize",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "fontSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/fit-heading/fit-heading.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "lineHeight",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/key-handler/key-handler.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "KeyHandlerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/modal-router-link/modal-router-link.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ModalRouterLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/directives/theme-color/theme-color.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ThemeColorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/30",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/color-helper.styles.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "styles",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/deep-copy.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "deepCopy",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/design-token-helper.styles.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "styles",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/line-clamp-helper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LineClampHelper",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/line-clamp-helper.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "config",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/merge-deep.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "mergeDeep",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/merge-deep.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "mergeDeepAll",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/platform.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PlatformService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/helpers/unique-id-generator.helper.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UniqueIdGenerator",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "KirbyConfig",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ConfigToken",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "entryComponents",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "exportedDeclarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "exportedModules",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "exports",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "importedModules",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/kirby.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "providers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/scss/scss-helper.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ScssHelper",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "compareCssProperty",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "compareSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "cssPropertyMatcher",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getErrorMessage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getExpectedStringValueAndAlias",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/element-css-custom-matchers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ElementCssCustomMatchers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/testing/test-helper.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TestHelper",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/src/lib/types/window-ref.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "WindowRef",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.accordion-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockAccordionItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.action-sheet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockActionSheetComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockAppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.avatar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockAvatarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.badge.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockBadgeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.calendar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockCalendarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.card-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockCardFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.card-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockCardHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.chart-deprecated.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockChartDeprecatedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.chart.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockChartComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockCheckboxComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.chip.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockChipComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.divider.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockDividerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.dropdown.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockDropdownComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.empty-state.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockEmptyStateComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.fab-sheet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockFabSheetComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.flag.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockFlagComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.form-field-message.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockFormFieldMessageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.form-field.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockFormFieldComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.grid.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockGridComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.icon.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockIconComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.input-counter.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockInputCounterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockInputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.label.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockLabelComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.list-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockListHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.list-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockListItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.list-section-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockListSectionHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.loading-overlay.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockLoadingOverlayComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.modal-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockModalFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageActionsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageContentComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageProgressComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPageTitleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockPageActionsDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockPageContentDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockPageTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.page.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockPageToolbarTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.popover.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockPopoverComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.progress-circle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockProgressCircleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.radio-group.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockRadioGroupComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.radio.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockRadioComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.range.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockRangeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.reorder-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockReorderListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.router-outlet.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockRouterOutletComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.segmented-control.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockSegmentedControlComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.slide-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockSlideButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.slides.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockSlidesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.slides.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockSlideDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.spinner.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockSpinnerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.tab-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockTabButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.tabs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockTabsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.textarea.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockTextareaComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.toggle-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockToggleButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.toggle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockToggleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/components/mock.web-component-proxies.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MockBadgeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/directives/mock.fit-heading.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockFitHeadingDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/directives/mock.theme-color.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MockThemeColorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/mock-components.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_COMPONENTS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-base/src/lib/mock-directives.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "iconRegistryServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "loadingOverlayServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "modalControllerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "tabsServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "toastControllerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jasmine/src/lib/mock-providers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_PROVIDERS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "iconRegistryServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "loadingOverlayServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "modalControllerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "tabsServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "toastControllerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/designsystem/testing-jest/src/lib/mock-providers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_PROVIDERS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
